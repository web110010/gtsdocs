[{"id":0,"href":"/docs/api/swagger/","title":"Swagger","section":"API","content":" API Documentation # GoToSocial uses go-swagger to generate a V2 OpenAPI specification document from code annotations.\nThe resulting API documentation is rendered below, for quick reference.\nIf you\u0026rsquo;d like to do more with the spec, you can also view the swagger.yaml directly, and then paste it into something like the Swagger Editor in order to autogenerate GoToSocial API clients in different languages, convert the doc to JSON or OpenAPI v3 specification, etc. See here for more.\n"},{"id":1,"href":"/docs/configuration/general/","title":"General","section":"Configuration","content":" General # The top-level configuration for GoToSocial, including basic things like host, port, bind address and transport protocol.\nThe only things you really need to set here are host, which should be the hostname where your instance is reachable, and probably port.\nSettings # ########################### ##### GENERAL CONFIG ###### ########################### # String. Log level to use throughout the application. Must be lower-case. # Options: [\u0026#34;trace\u0026#34;,\u0026#34;debug\u0026#34;,\u0026#34;info\u0026#34;,\u0026#34;warn\u0026#34;,\u0026#34;error\u0026#34;,\u0026#34;fatal\u0026#34;] # Default: \u0026#34;info\u0026#34; log-level: \u0026#34;info\u0026#34; # Bool. Log database queries when log-level is set to debug or trace. # This setting produces verbose logs, so it\u0026#39;s better to only enable it # when you\u0026#39;re trying to track an issue down. # Options: [true, false] # Default: false log-db-queries: false # String. Application name to use internally. # Examples: [\u0026#34;My Application\u0026#34;,\u0026#34;gotosocial\u0026#34;] # Default: \u0026#34;gotosocial\u0026#34; application-name: \u0026#34;gotosocial\u0026#34; # String. Hostname that this server will be reachable at. Defaults to localhost for local testing, # but you should *definitely* change this when running for real, or your server won\u0026#39;t work at all. # DO NOT change this after your server has already run once, or you will break things! # Examples: [\u0026#34;gts.example.org\u0026#34;,\u0026#34;some.server.com\u0026#34;] # Default: \u0026#34;localhost\u0026#34; host: \u0026#34;localhost\u0026#34; # String. Domain to use when federating profiles. This is useful when you want your server to be at # eg., \u0026#34;gts.example.org\u0026#34;, but you want the domain on accounts to be \u0026#34;example.org\u0026#34; because it looks better # or is just shorter/easier to remember. # # To make this setting work properly, you need to redirect requests at \u0026#34;example.org/.well-known/webfinger\u0026#34; # to \u0026#34;gts.example.org/.well-known/webfinger\u0026#34; so that GtS can handle them properly. # # You should also redirect requests at \u0026#34;example.org/.well-known/nodeinfo\u0026#34; in the same way. # # You should also redirect requests at \u0026#34;example.org/.well-known/host-meta\u0026#34; in the same way. This endpoint is used by a number of clients to discover the API endpoint to use when the host and account domain are different. # # An empty string (ie., not set) means that the same value as \u0026#39;host\u0026#39; will be used. # # DO NOT change this after your server has already run once, or you will break things! # # Please read the appropriate section of the installation guide before you go messing around with this setting: # https://docs.gotosocial.org/installation_guide/advanced/#can-i-host-my-instance-at-fediexampleorg-but-have-just-exampleorg-in-my-username # # Examples: [\u0026#34;example.org\u0026#34;,\u0026#34;server.com\u0026#34;] # Default: \u0026#34;\u0026#34; account-domain: \u0026#34;\u0026#34; # String. Protocol to use for the server. Only change to http for local testing! # This should be the protocol part of the URI that your server is actually reachable on. So even if you\u0026#39;re # running GoToSocial behind a reverse proxy that handles SSL certificates for you, instead of using built-in # letsencrypt, it should still be https. # Options: [\u0026#34;http\u0026#34;,\u0026#34;https\u0026#34;] # Default: \u0026#34;https\u0026#34; protocol: \u0026#34;https\u0026#34; # String. Address to bind the GoToSocial server to. # This can be an IPv4 address or an IPv6 address (surrounded in square brackets), or a hostname. # The default value will bind to all interfaces, which makes the server # accessible by other machines. For most setups there is no need to change this. # If you are using GoToSocial in a reverse proxy setup with the proxy running on # the same machine, you will want to set this to \u0026#34;localhost\u0026#34; or an equivalent, # so that the proxy can\u0026#39;t be bypassed. # Examples: [\u0026#34;0.0.0.0\u0026#34;, \u0026#34;172.128.0.16\u0026#34;, \u0026#34;localhost\u0026#34;, \u0026#34;[::]\u0026#34;, \u0026#34;[2001:db8::fed1]\u0026#34;] # Default: \u0026#34;0.0.0.0\u0026#34; bind-address: \u0026#34;0.0.0.0\u0026#34; # Int. Listen port for the GoToSocial webserver + API. If you\u0026#39;re running behind a reverse proxy and/or in a docker, # container, just set this to whatever you like (or leave the default), and make sure it\u0026#39;s forwarded properly. # If you are running with built-in letsencrypt enabled, and running GoToSocial directly on a host machine, you will # probably want to set this to 443 (standard https port), unless you have other services already using that port. # This *MUST NOT* be the same as the letsencrypt port specified below, unless letsencrypt is turned off. # Examples: [443, 6666, 8080] # Default: 8080 port: 8080 # Array of string. CIDRs or IP addresses of proxies that should be trusted when determining real client IP from behind a reverse proxy. # If you\u0026#39;re running inside a Docker container behind Traefik or Nginx, for example, add the subnet of your docker network, # or the gateway of the docker network, and/or the address of the reverse proxy (if it\u0026#39;s not running on the host network). # Example: [\u0026#34;127.0.0.1/32\u0026#34;, \u0026#34;172.20.0.1\u0026#34;] # Default: [\u0026#34;127.0.0.1/32\u0026#34;, \u0026#34;::1\u0026#34;] (localhost ipv4 + ipv6) trusted-proxies: - \u0026#34;127.0.0.1/32\u0026#34; - \u0026#34;::1\u0026#34; "},{"id":2,"href":"/docs/federation/glossary/","title":"Glossary","section":"Federation","content":" Glossary # This document describes some commonly-used terms in discussions of federation.\nActivityPub # A decentralized social networking protocol based on the ActivityStreams data format. See here.\nGoToSocial uses the ActivityPub protocol to communicate between GtS servers, and with other federated servers like Mastodon, Pixelfed, etc.\nActivityStreams # A model/data format for representing potential and completed activities using JSON. See here.\nGoToSocial uses the ActivityStreams data model to \u0026lsquo;speak\u0026rsquo; ActivityPub with other servers.\nActor # An actor is an ActivityStreams object that is capable of performing some Activity like following, liking, creating a post, reblogging, etc. See here.\nIn GoToSocial, each account/user is an actor.\nDereference # To \u0026lsquo;dereference\u0026rsquo; a post or a profile means to make an HTTP call to the server that hosts that post or profile, in order to obtain its ActivityStreams representation.\nGoToSocial \u0026lsquo;dereferences\u0026rsquo; posts and profiles on remote servers, in order to convert them to models that GoToSocial can understand and work with.\nHere\u0026rsquo;s a more detailed explanation with some examples:\nLet\u0026rsquo;s say that someone on an ActivityPub server searches for the username @tobi@goblin.technology.\nTheir server would then do a webfinger lookup at goblin.technology for the username tobi, at the following URL:\nhttps://goblin.technology/.well-known/webfinger?resource=acct:tobi@goblin.technology The goblin.technology server would give back some JSON in response; something like this:\n{ \u0026#34;subject\u0026#34;: \u0026#34;acct:tobi@goblin.technology\u0026#34;, \u0026#34;aliases\u0026#34;: [ \u0026#34;https://goblin.technology/users/tobi\u0026#34;, \u0026#34;https://goblin.technology/@tobi\u0026#34; ], \u0026#34;links\u0026#34;: [ { \u0026#34;rel\u0026#34;: \u0026#34;http://webfinger.net/rel/profile-page\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;text/html\u0026#34;, \u0026#34;href\u0026#34;: \u0026#34;https://goblin.technology/@tobi\u0026#34; }, { \u0026#34;rel\u0026#34;: \u0026#34;self\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;application/activity+json\u0026#34;, \u0026#34;href\u0026#34;: \u0026#34;https://goblin.technology/users/tobi\u0026#34; } ] } Under the links section the requesting server would look for a link of type application/activity+json, which denotes the ActivityStreams representation of the user. In this case, the URL is:\nhttps://goblin.technology/users/tobi The above URL is a reference to the activitypub representation of the user/Actor tobi on the goblin.technology instance. It\u0026rsquo;s called a reference because it doesn\u0026rsquo;t contain all of the information about that user, it\u0026rsquo;s only a reference point for where that information can be found.\nNow, the requesting server will make a request to that URL in order to obtain a fuller representation of @tobi@goblin.technology, which complies to the ActivityPub spec. In other words, the server now follows a reference to get to the thing it references. This makes it not a reference anymore, hence the term dereferencing.\nFor an analogy, consider what happens when you look something up in the index of a book: first you get the page number that the material you\u0026rsquo;re interested in is on, which is a reference. Then you turn to the referenced page to see the content, which is dereferencing.\n"},{"id":3,"href":"/docs/getting_started/deployment_considerations/","title":"Deployment Considerations","section":"Getting Started","content":" Deployment considerations # Before deploying GoToSocial, it\u0026rsquo;s important to think through a few things as some choices will have long-term consequences for how you run and manage GoToSocial.\nDanger\nIt\u0026rsquo;s not supported across the Fediverse to switch between implementations on the same domain. This means that if you run GoToSocial on example.org, you\u0026rsquo;ll run into federation issues if you try to switch to a different implementation like Pleroma/Akkoma, Misskey/Calckey etc.\nIn that same vein, if you already have another ActivityPub implementation running on example.org you should not attempt to switch to GoToSocial on that domain.\nDatabase # GoToSocial supports both SQLite and Postgres and you can start using either. We do not currently have tooling to support migrating from SQLite to Postgres or vice-versa, but it is possible in theory.\nSQLite is great for a single-user instance. If you\u0026rsquo;re planning on hosting multiple people it\u0026rsquo;s advisable to use Postgres instead. You can always use Postgres regardless of the instance size.\nTip\nPlease backup your database. The database contains encryption keys for the instance and any user accounts. You won\u0026rsquo;t be able to federate again from the same domain if you lose these keys.\nDomain name # In order to federate with others, you\u0026rsquo;ll need a domain like example.org. You can register your domain name through any domain registrar, like Namecheap. Make sure you pick a registrar that also lets you manage DNS entries, so you can point your domain to the IP of the server that\u0026rsquo;s running your GoToSocial instance.\nYou\u0026rsquo;ll commonly see usernames existing at the apex of the domain, for example @me@example.org but this is not required. It\u0026rsquo;s perfectly fine to have users exist on @me@social.example.org instead. Many people prefer to have usernames on the apex as its shorter to type, but you can use any (subdomain) you control.\nIt is possible to have usernames like @me@example.org but have GoToSocial running on social.example.org instead. This is done by distinguishing between the API domain, called the \u0026ldquo;host\u0026rdquo;, and the domain used for usernames, called the \u0026ldquo;account domain\u0026rdquo;.\nDanger\nIt\u0026rsquo;s not possible to safely change whether the host and account domain are different after the fact. It requires regenerating the database and will cause confusion for any server you have already federated with.\nWhen using a single domain, you only need to configure the \u0026ldquo;host\u0026rdquo; in the GoToSocial configuration:\nhost: \u0026#34;example.org\u0026#34; When using a split domain approach, you need to configure both the \u0026ldquo;host\u0026rdquo; and the \u0026ldquo;account-domain\u0026rdquo;:\nhost: \u0026#34;social.example.org\u0026#34; account-domain: \u0026#34;example.org\u0026#34; TLS # For federation to work, you have to use TLS. Most implementations, including GoToSocial, will generally refuse to federate over unencrypted transports.\nGoToSocial comes with built-in support for provisioning certificates through Lets Encrypt. It can also load certificates from disk. If you have a reverse-proxy in front of GoToSocial you can handle TLS at that level instead.\nTip\nMake sure you configure the use of modern versions of TLS, TLSv1.2 and higher, in order to keep communications between servers and clients safe. When GoToSocial handles TLS termination this is done automatically for you. If you have a reverse-proxy in use, use the Mozilla SSL Configuration Generator.\nServer / VPS # GoToSocial aims to fit in small spaces so we try and ensure that the system requirements are fairly minimal: for a single-user instance with about 100 followers/followees, it uses somewhere between 50 to 100MB of RAM. CPU usage is only intensive when handling media (encoding blurhashes, mostly) and/or doing a lot of federation requests at the same time.\nThese light requirements mean GtS runs pretty well on something like a Raspberry Pi (a €40 single-board computer). It\u0026rsquo;s been tested on a Raspberry Pi Zero W as well (a €9 computer smaller than a credit card), but it\u0026rsquo;s not quite able to run on that. It should run on a Raspberry Pi Zero W 2 (which costs €14!), but we haven\u0026rsquo;t tested that yet. You can also repurpose an old laptop or desktop to run GoToSocial for you.\nIf you decide to use a VPS instead, you can spin yourself up something cheap with Linux running on it. Most of the VPS offerings in the €2-€5 range will perform admirably for a personal GoToSocial instance.\nHostwinds is a good option here: it\u0026rsquo;s cheap and they throw in a static IP address for free.\nGreenhost is also great: it has zero CO2 emissions, but is a bit more costly.\nPorts # GoToSocial needs ports 80 and 443 open.\n80 is used for Lets Encrypt. As such, you don\u0026rsquo;t need it if you don\u0026rsquo;t use the built-in Lets Encrypt provisioning. 443 is used to serve the API on with TLS and is what any instance you\u0026rsquo;re federating with will try to connect to. If you can\u0026rsquo;t leave 443 and 80 open on the machine, don\u0026rsquo;t worry! You can configure these ports in GoToSocial, but you\u0026rsquo;ll have to also configure port forwarding to properly forward traffic on 443 and 80 to whatever ports you choose.\nTip\nYou should configure a firewall on your machine, as well as some protection against brute-force SSH login attempts and the like. Take a look at our firewall documentation for pointers on what to configure and tools that can help you out.\n"},{"id":4,"href":"/docs/getting_started/reverse_proxy/nginx/","title":"Nginx","section":"Reverse Proxy","content":" NGINX # In order to use NGINX as a reverse proxy for GoToSocial you\u0026rsquo;ll need to have it installed on your server. If you intend for the NGINX instance to also handle TLS, you\u0026rsquo;ll need to provision TLS certificates too.\nNGINX is packaged for many distributions. It\u0026rsquo;s very likely you can install it with your distribution\u0026rsquo;s package manager. You can also run NGINX using a container runtime with the official NGINX image that\u0026rsquo;s published to the Docker Hub.\nIn this guide we\u0026rsquo;ll also show how to use certbot to provision the TLS certificates. It too is packaged in many distributions but many distributions tend to ship fairly old versions of certbot. If you run into trouble it may be worth considering using the container image instead.\nConfigure GoToSocial # If GoToSocial is already running, stop it.\nsudo systemctl stop gotosocial Or if you don\u0026rsquo;t have a systemd service just stop it manually.\nTweak your GoToSocial configuration like so:\nletsencrypt-enabled: false port: 8080 bind-address: 127.0.0.1 The first setting disables the built-in provisioning of TLS certificates. Since NGINX will now be handling that traffic GoToSocial no longer needs to be bound to port 443, or any privileged port.\nBy setting the bind-address to 127.0.0.1 GoToSocial will no longer be accessible directly from the outside. If your NGINX and GoToSocial instance aren\u0026rsquo;t running on the same server you\u0026rsquo;ll need to bind to an IP address that lets your reverse proxy reach your GoToSocial instance. By binding to a private IP address you can be sure GoToSocial can\u0026rsquo;t be accessed except through NGINX.\nSet up NGINX # First we will set up NGINX to serve GoToSocial as unsecured http and then use Certbot to automatically upgrade it to serve https.\nPlease do not try to use it until that\u0026rsquo;s done or you\u0026rsquo;ll risk transmitting passwords over clear text, or breaking federation.\nFirst we\u0026rsquo;ll write a configuration for NGINX and put it in /etc/nginx/sites-available.\nsudo mkdir -p /etc/nginx/sites-available sudoedit /etc/nginx/sites-available/yourgotosocial.url.conf In the above commands, replace yourgotosocial.url with your actual GoToSocial host value. So if your host is set to example.org, then the file should be called /etc/nginx/sites-available/example.org.conf\nThe file you\u0026rsquo;re about to create should look like this:\nserver { listen 80; listen [::]:80; server_name example.org; location / { # set to 127.0.0.1 instead of localhost to work around https://stackoverflow.com/a/52550758 proxy_pass http://127.0.0.1:8080; proxy_set_header Host $host; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \u0026#34;upgrade\u0026#34;; proxy_set_header X-Forwarded-For $remote_addr; proxy_set_header X-Forwarded-Proto $scheme; } client_max_body_size 40M; } Change proxy_pass to the ip and port that you\u0026rsquo;re actually serving GoToSocial on (if it\u0026rsquo;s not on 127.0.0.1:8080), and change server_name to your own domain name.\nIf your domain name is example.org then server_name example.org; would be the correct value.\nIf you\u0026rsquo;re running GoToSocial on another machine with the local ip of 192.168.178.69 and on port 8080 then proxy_pass http://192.168.178.69:8080; would be the correct value.\nNote: You can remove the line listen [::]:80; if your server is not ipv6 capable.\nNote: proxy_set_header Host $host; is essential. It guarantees that the proxy and GoToSocial use the same server name. If not, GoToSocial will build the wrong authentication headers, and all attempts at federation will be rejected with 401.\nNote: The Connection and Upgrade headers are used for WebSocket connections. See the WebSocket docs.\nNote: client_max_body_size is set to 40M in this example, which is the default max video upload size for GoToSocial. You can make this value larger or smaller if necessary. The nginx default is only 1M, which is rather too small.\nNote: To make X-Forwarded-For and rate limiting work, set the trusted-proxies configuration variable. See the rate limiting and general configuration docs\nNext we\u0026rsquo;ll need to link the file we just created to the folder that nginx reads configurations for active sites from.\nsudo mkdir -p /etc/nginx/sites-enabled sudo ln -s /etc/nginx/sites-available/yourgotosocial.url.conf /etc/nginx/sites-enabled/ Again, replace yourgotosocial.url with your actual GoToSocial host value.\nNow check for configuration errors.\nsudo nginx -t If everything is fine you should get this as output:\nnginx: the configuration file /etc/nginx/nginx.conf syntax is ok nginx: configuration file /etc/nginx/nginx.conf test is successful Everything working? Great! Then restart nginx to load your new config file.\nsudo systemctl restart nginx Set up TLS # Note\nWe have additional documentation on how to provision TLS certificates that also provides links to additional content and tutorials for different distributions that may be good to review.\nYou should now be able to run certbot and it will guide you through the steps required to enable https for your instance.\nsudo certbot --nginx After you do, it should have automatically edited your configuration file to enable https.\nReload NGINX one last time:\nsudo systemctl restart nginx Now start GoToSocial again:\nsudo systemctl start gotosocial Security hardening # If you want to harden up your NGINX deployment with advanced configuration options, there are many guides online for doing so (for example). Try to find one that\u0026rsquo;s up to date. Mozilla also publishes best-practice SSL configuration here.\nResults # You should now be able to open the splash page for your instance in your web browser, and will see that it runs under https!\nIf you open the NGINX config again, you\u0026rsquo;ll see that Certbot added some extra lines to it.\n!!! note This may look a bit different depending on the options you chose while setting up Certbot, and the NGINX version you\u0026rsquo;re using.\nserver { server_name example.org; location / { # set to 127.0.0.1 instead of localhost to work around https://stackoverflow.com/a/52550758 proxy_pass http://127.0.0.1:8080; proxy_set_header Host $host; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \u0026#34;upgrade\u0026#34;; proxy_set_header X-Forwarded-For $remote_addr; proxy_set_header X-Forwarded-Proto $scheme; } client_max_body_size 40M; listen [::]:443 ssl ipv6only=on; # managed by Certbot listen 443 ssl; # managed by Certbot ssl_certificate /etc/letsencrypt/live/example.org/fullchain.pem; # managed by Certbot ssl_certificate_key /etc/letsencrypt/live/example.org/privkey.pem; # managed by Certbot include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot } server { if ($host = example.org) { return 301 https://$host$request_uri; } # managed by Certbot listen 80; listen [::]:80; server_name example.org; return 404; # managed by Certbot } A number of additional configurations for nginx, including static asset serving and caching, are documented in the Advanced section of our documentation.\n"},{"id":5,"href":"/docs/user_guide/posts/","title":"Posts","section":"User Guide","content":" Posts # Privacy Settings # GoToSocial offers Mastodon-style privacy settings for posts. In order from most to least private, these are:\nDirect Mutuals-only Private/Followers-only Unlisted Public Whatever privacy setting you choose for a post, GoToSocial will do the best it can to ensure that your posts don\u0026rsquo;t appear to users on instances that you\u0026rsquo;ve blocked, or to users that you\u0026rsquo;ve blocked directly.\nUnlike with some other fediverse server implementations, GoToSocial uses a default post setting of unlisted rather than public for new accounts. Our philosophy here is that posting something public should always be a conscious decision rather than a default.\nPlease note that while GoToSocial respects these privacy settings very strictly, other server implementations cannot necessarily be trusted to do so: there are bad actors on the fediverse. As with any social media, you should think carefully about what you post and to whom.\nDirect # Posts with a visibility of direct will only appear to the post author, and to users who are mentioned in the post. Take the following post for example:\nHey @whoever@example.org, this is a private/direct post! Only we can see this! If this message was written by @someone@server.com then only @whoever@example.org and @someone@server.com would be able to see it.\nAs the name implies, direct posts are best used when you want to communicate directly with one or more people.\nHowever, direct posts are not a suitable replacement for end-to-end encrypted messaging offered by things like Signal and Matrix. If you want to communicate directly, but you\u0026rsquo;re not communicating sensitive information, then direct posts are fine. If you need to have a sensitive + secure conversation, use something else!\nDirect posts can be liked/faved, but they cannot be boosted.\nDirect posts are not accessible via a web URL on your GoToSocial instance.\nMutuals-only # Posts with a visibility of mutuals_only will only appear to the post author, and to mutual follows of the post author. In other words, they can only be seen by others if two conditions are met:\nThe other account follows the post author. The post author follows the other account back. This is useful for when you want to post something that you only want friends to see.\nMutuals-only posts can be liked/faved, but they cannot be boosted.\nMutuals-only posts are not accessible via a web URL on your GoToSocial instance.\nPrivate/Followers-only # Posts with a visibility of private will only be visible to the post author, and to people who follow the post author. This is similar to mutuals_only, but only the first condition needs to met; the post author doesn\u0026rsquo;t need to follow the other account back.\nThis is useful for when you want to make announcements to people who follow you, or share something slightly less private than mutuals_only.\nPrivate/followers-only posts can be liked/faved, but they cannot be boosted.\nPrivate/followers-only posts are not accessible via a web URL on your GoToSocial instance.\nUnlisted # Posts with a visibility of unlisted (sometimes called unlocked posts) are semi-public. They will be sent to anyone who follows you, and they can be boosted into the timelines of people who don\u0026rsquo;t follow you, but they won\u0026rsquo;t appear on Federated or Local timelines, and they won\u0026rsquo;t appear on your public profile.\nUnlisted posts are useful when you want to allow a post to spread, but you don\u0026rsquo;t want it to be immediately visible to everyone. They are also useful when you want to make public-ish posts, but without clogging up Federated/Local timelines.\nUnlisted posts can be liked/faved, and they can be boosted.\nUnlike with Mastodon, unlisted posts are not accessible via a web URL on your GoToSocial instance!\nPublic # Posts with a visibility of public are fully public. That is, they can be seen via the web, and they will appear in Local and Federated timelines, and they are fully boostable. public is the ultimate \u0026rsquo;let my post be seen everywhere\u0026rsquo; setting, for when you want something to be widely available and easy to distribute.\nPublic posts can be liked/faved, and they can be boosted.\nPublic posts are accessible via a web URL on your GoToSocial instance!\nExtra Flags # GoToSocial offers four extra flags on posts, which can be used to tweak how your post can be interacted with by others. These are:\nfederated boostable replyable likeable By default, all these flags are set to true.\nPlease note that while GoToSocial strictly respects these settings, other fediverse server implementations might not be aware of them. A consequence of this is that users on non-GoToSocial servers might think they are replying/boosting/liking your post, and their instance might behave as though that behavior was allowed, but those interactions will be denied by your GoToSocial server and you won\u0026rsquo;t see them.\nFederated # When set to false, this post will not be federated out to other fediverse servers, and will be viewable only to accounts on your GoToSocial instance. This is sometimes called \u0026rsquo;local-only\u0026rsquo; posting.\nBoostable # When set to false, your post will not be boostable, even if it is unlisted or public. GoToSocial enforces this by refusing dereferencing requests from remote servers in the event that someone tries to boost the post.\nReplyable # When set to false, replies to your post will not be accepted by your GoToSocial server, and will not appear in your timeline or create notifications. GoToSocial enforces this by giving an error message to attempted replies to the post from federated servers.\nLikeable # When set to false, likes/faves of your post will not be accepted by your GoToSocial server, and will not create notifications. GoToSocial enforces this by giving an error message to attempted likes/faves on the post from federated servers.\nInput Types # GoToSocial currently accepts two different types of input for posts (and user bio). The user settings page allows you to select between them. These are:\nplain markdown Plain is the default method of posting: GtS accepts some plain looking text, and converts it into some nice HTML by parsing links and mentions etc. If you\u0026rsquo;re used to Mastodon or Twitter or most other social media platforms, this way of writing posts will be immediately familiar.\nMarkdown is a more complex way of organizing text, which gives you more control over how your text is parsed and formatted.\nGoToSocial supports the Basic Markdown Syntax, and some of the Extended Markdown Syntax as well, including fenced code blocks, footnotes, strikethrough, subscript, superscript, and automated URL linking.\nYou can also include snippets of basic HTML in your markdown!\nFor more information on Markdown, see The Markdown Guide.\nFor a quick reference on Markdown syntax, see the Markdown Cheat Sheet.\nFormatting # When a post is submitted in plain format, GoToSocial automatically does some tidying up and formatting of the post in order to convert it to HTML, as described below.\nWhitespace # Any leading or trailing whitespaces and newlines are removed from the post. So for example:\nthis post starts with some newlines will become:\nthis post starts with some newlines Wrapping # The whole post will be wrapped in \u0026lt;p\u0026gt;\u0026lt;/p\u0026gt;.\nSo the following text:\nHi here\u0026#39;s a little post! Will become:\n\u0026lt;p\u0026gt;Hi here\u0026#39;s a little post!\u0026lt;/p\u0026gt; Linebreaks # Any newlines will be replaced with \u0026lt;br /\u0026gt;\nSo to continue the above example:\nHi here\u0026#39;s a little post! And here\u0026#39;s another line. Will become:\n\u0026lt;p\u0026gt;Hi here\u0026#39;s a little post!\u0026lt;br /\u0026gt;\u0026lt;br /\u0026gt;And here\u0026#39;s another line\u0026lt;/p\u0026gt; Links # Any recognizable links in the text will be shortened and turned into proper hyperlinks, and have some additional attributes added to them.\nFor example:\nHere\u0026#39;s a link to something: https://example.org/some/link/address will become:\nHere\u0026#39;s a link to something: \u0026lt;a href=\u0026#34;https://example.org/some/link/address\u0026#34; rel=\u0026#34;nofollow\u0026#34; rel=\u0026#34;noreferrer\u0026#34; rel=\u0026#34;noopener\u0026#34;\u0026gt;example.org/some/link/address\u0026lt;/a\u0026gt; which will be rendered as:\nHere\u0026rsquo;s a link to something: example.org/some/link/address\nNote that this will only work for http and https links; other schemes are not supported.\nMentions # You can \u0026lsquo;mention\u0026rsquo; another account by referring to the account in the following way:\n@some_account@example.org\nIn this example, some_account is the username of the account you want to mention, and example.org is the domain that hosts their account.\nThe mentioned account will get a notification that you\u0026rsquo;ve mentioned them, and be able to see the post in which they were mentioned.\nMentions are formatted in a similar way to links, so:\nhi @some_account@example.org how\u0026#39;s it going? will become:\nhi \u0026lt;span class=\u0026#34;h-card\u0026#34;\u0026gt;\u0026lt;a href=\u0026#34;https://example.org/@some_account\u0026#34; class=\u0026#34;u-url mention\u0026#34;\u0026gt;@\u0026lt;span\u0026gt;some_account\u0026lt;/span\u0026gt;\u0026lt;/a\u0026gt;\u0026lt;/span\u0026gt; how\u0026#39;s it going? which will be rendered as:\nhi @some_account how\u0026rsquo;s it going?\nWhen mentioning local accounts (ie., accounts on your instance), the second part of the mention is not necessary. If there\u0026rsquo;s an account with username local_account_person on your instance, you can mention them just by writing:\nhey @local_account_person you\u0026#39;re my neighbour This will become:\nhey \u0026lt;span class=\u0026#34;h-card\u0026#34;\u0026gt;\u0026lt;a href=\u0026#34;https://my.instance.org/@local_account_person\u0026#34; class=\u0026#34;u-url mention\u0026#34;\u0026gt;@\u0026lt;span\u0026gt;local_account_person\u0026lt;/span\u0026gt;\u0026lt;/a\u0026gt;\u0026lt;/span\u0026gt; you\u0026#39;re my neighbour which will be rendered as:\nhey @local_account_person you\u0026rsquo;re my neighbour\nInput Sanitization # In order not to spread scripts, vulnerabilities, and glitchy HTML all over the place, GoToSocial performs the following types of input sanitization:\nplain input type:\nBefore parsing, any existing HTML is completely removed from the post body and content-warning fields. After parsing, all generated HTML is run through a sanitizer to remove harmful elements. markdown input type:\nBefore parsing, any existing HTML is completely removed from the content-warning field. Before parsing, any existing HTML in the post body is run through a sanitizer to remove harmful elements. After parsing, all generated HTML is run through a sanitizer to remove harmful elements. GoToSocial uses bluemonday for HTML sanitization.\n"},{"id":6,"href":"/docs/admin/settings/","title":"Admin Settings","section":"Admin","content":" Admin Settings # The GoToSocial Settings interface uses the admin api routes to manage your instance. It\u0026rsquo;s combined with the User settings and uses the same OAUTH mechanism as normal clients (with scope: admin).\nAccount permissions # To use the Admin API your account has to be promoted as such:\n./gotosocial --config-path ./config.yaml admin account promote --username YOUR_USERNAME After this, you can enter your instance domain in the login field (auto-filled if you run GoToSocial on the same domain), and login like you would with any other client.\nInstance Settings # Here you can set various metadata for your instance, like the displayed name, thumbnail image, description texts (HTML), and contact username and email.\nActions # You can use media cleanup to remove remote media older than the specified number of days. This also removes unused headers and avatars.\nFederation # In the federation section you can influence which instances you federate with, through adding domain blocks. You can enter a domain to suspend in the search field, which will filter the list to show you if you already have a block for it. Clicking \u0026lsquo;suspend\u0026rsquo; gives you a form to add a public and/or private comment, and submit to add the block. Adding a suspension will suspend all the currently known accounts on the instance, and prevent any new interactions with any user on the blocked instance.\nBulk import/export # Through the link at the bottom of the Federation section (or going to /settings/admin/federation/import-export) you can do bulk import/export of your domain blocklist.\nUpon importing a list, either through the input field or from a file, you can review the entries in the list before importing a subset. You\u0026rsquo;ll also be warned for entries that use subdomains, providing an easy way to change them to the main domain.\nReports # The reports section shows a list of reports, originating from your local users, or remote instances (shown anonymously as just the name of the instance, without specific username).\nClicking a report shows if it was resolved (with the reasoning if available), more information, and a list of reported toots if selected by the reporting user.\nCustom Emoji # Custom Emoji will be automatically fetched when included in remote toots, but to use them in your own posts they have to be enabled on your instance.\nLocal # This section shows an overview of all the custom emoji enabled on your instance, sorted by their category. Clicking an emoji shows it\u0026rsquo;s details, and provides options to change the category or image, or delete it completely. The shortcode cannot be updated here, you would have to upload it with the new shortcode yourself (and optionally delete the old one).\nBelow the overview you can upload your own custom emoji, after previewing how they look in a toot. PNG and (animated) GIF\u0026rsquo;s are supported.\nRemote # Through the \u0026lsquo;remote\u0026rsquo; section, you can look up a link to any remote toots (provided the instance isn\u0026rsquo;t suspended). If they use any custom emoji they will be listed, providing an easy way to copy them to the local emoji (for use in your own toots), or disable them ( hiding them from toots).\nNote: as the testrig server does not federate, this feature can\u0026rsquo;t be used in development (500: Internal Server Error).\n"},{"id":7,"href":"/docs/advanced/security/sandboxing/","title":"Application sandboxing","section":"Security","content":" Application sandboxing # By sandboxing the GoToSocial binary it\u0026rsquo;s possible to control which parts of the system GoToSocial can access, and limit which things it can read and write. This can be helpful to ensure that even in the face of a security issue in GoToSocial, an attacker is severely hindered in escalating their privileges and gaining a foothold on your system.\nNote\nAs GoToSocial is still early in its development, the sandboxing policies we ship may get out of date. If you happen to run into this, please raise an issue on the issue tracker or better yet submit a PR to help us fix it.\nDifferent distributions have different sandboxing mechanisms they prefer and support:\nAppArmor for the Debian or Ubuntu family of distributions or OpenSuSE, including when running with Docker SELinux for the Red Hat/Fedora/CentOS family of distributions or Gentoo Containers and sandboxing\nRunning GoToSocial as a container does not in and of itself provide much additional security. Despite their name, \u0026ldquo;containers do not contain\u0026rdquo;. Containers are a distribution mechanism, not a security sandbox. To further secure your container you can instruct the container runtime to load the AppArmor profile and look into limiting which syscalls can be used using a seccomp profile.\nAppArmor # We ship an example AppArmor policy for GoToSocial, which you can retrieve and install as follows:\n$ curl -LO \u0026#39;https://github.com/superseriousbusiness/gotosocial/raw/main/example/apparmor/gotosocial\u0026#39; $ sudo install -o root -g root gotosocial /etc/apparmor.d/gotosocial $ sudo apparmor_parser -Kr /etc/apparmor.d/gotosocial Tip\nIf you\u0026rsquo;re using SQLite, the AppArmor profile expects the database in /gotosocial/db/ so you\u0026rsquo;ll need to adjust your configuration paths or the policy accordingly.\nWith the policy installed, you\u0026rsquo;ll need to configure your system to use it to constrain the permissions GoToSocial has.\nYou can disable the policy like this:\n$ sudo apparmor_parser -R /etc/apparmor.d/gotosocial $ sudo rm -vi /etc/apparmor.d/gotosocial Don\u0026rsquo;t forget to roll back any configuration changes you made that load the AppArmor policy.\nsystemd # Add the following to the systemd service, or create an override:\n[Service] ... AppArmorProfile=gotosocial Reload systemd and restart GoToSocial:\n$ systemctl daemon-reload $ systemctl restart gotosocial Containers # !!! tip You should review the Docker or Podman documentation on AppArmor.\nWhen using our example Compose file, you can tell it to load the AppArmor policy by tweaking it like so:\nservices: gotosocial: ... security_opt: - apparmor=gotosocial When launching the container with docker run or podman run, you\u0026rsquo;ll need the --security-opt=\u0026quot;apparmor=gotosocial\u0026quot; command line flag.\nSELinux # !!! note SELinux can only be used in combination with the binary installation method. SELinux cannot be used to constrain GoToSocial when running in a container.\nThe SELinux policy is maintained by the community in the lzap/gotosocial-selinux repository on GitHub. Make sure to read its documentation, review the policy before using it and use their issue tracker for any support requests around the SELinux policy.\n"},{"id":8,"href":"/docs/getting_started/installation/metal/","title":"Bare metal","section":"Installation","content":" Bare metal # This guide walks you through getting GoToSocial up and running on bare metal using the official binary releases.\nPrepare VPS # In a terminal on the VPS or your homeserver, make the directory that GoToSocial will run from, the directory it will use as storage, and the directory it will store LetsEncrypt certificates in:\nmkdir /gotosocial \u0026amp;\u0026amp; mkdir /gotosocial/storage \u0026amp;\u0026amp; mkdir /gotosocial/storage/certs If you don\u0026rsquo;t have root permissions on the machine, use something like ~/gotosocial instead.\nDownload Release # In a terminal on the VPS or your homeserver, cd into the base directory for GoToSocial you just created above:\ncd /gotosocial Now, download the latest GoToSocial release archive corresponding to the operating system and architecture you\u0026rsquo;re running on.\n(You can find the list of releases right here, arranged with the newest release at the top.)\nFor example, to download version 0.5.2 for running on 64-bit Linux:\nwget https://github.com/superseriousbusiness/gotosocial/releases/download/v0.5.2/gotosocial_0.5.2_linux_amd64.tar.gz Then extract it:\ntar -xzf gotosocial_0.5.2_linux_amd64.tar.gz This will put the gotosocial binary in your current directory, in addition to the web folder, which contains assets for the web frontend, and an example folder, which contains a sample configuration file.\nEdit Configuration File # Copy the configuration file from the example folder into your current directory:\ncp ./example/config.yaml . Now open the file in your text editor of choice so that you can set some important configuration values. Change the following settings:\nSet host to whatever hostname you\u0026rsquo;re going to be running the server on (eg., example.org). Set port to 443. Set db-type to sqlite. Set db-address to sqlite.db. Set storage-local-base-path to the storage directory you created above (eg., /gotosocial/storage). Set letsencrypt-enabled to true. Set letsencrypt-cert-dir to the certificate storage directory you created above (eg., /gotosocial/storage/certs). The above options assume you\u0026rsquo;re using SQLite as your database. If you want to use Postgres instead, see here for the config options.\nRun the Binary # You can now run the binary.\nStart the GoToSocial server with the following command:\n./gotosocial --config-path ./config.yaml server start The server should now start up and you should be able to access the splash page by navigating to your domain in the browser. Note that it might take up to a minute or so for your LetsEncrypt certificates to be created for the first time, so refresh a few times if necessary.\nNote that for this example we\u0026rsquo;re assuming that we\u0026rsquo;re allowed to run on port 443 (standard https port), and that nothing else is running on this port.\nCreate your user # You can use the GoToSocial binary to also create and promote your user account. This is all documented in our Creating users guide.\nLogin # You should now be able to log in to your instance using the email address and password of the account you just created. We recommend using Semaphore or Tusky for this.\n(Optional) Enable the systemd service # If you don\u0026rsquo;t like manually starting GoToSocial on every boot you might want to create a systemd service that does that for you.\nFirst stop your GoToSocial instance.\nThen create a new user and group for your GoToSocial installation:\nsudo useradd -r gotosocial sudo groupadd gotosocial sudo usermod -a -G gotosocial gotosocial Then make them the owner of your GoToSocial installation since they will need to read and write in it:\nsudo chown -R gotosocial:gotosocial /gotosocial You can find a gotosocial.service file in the example folder on github or your installation.\nCopy it to /etc/systemd/system/gotosocial.service:\nsudo cp /gotosocial/example/gotosocial.service /etc/systemd/system/ Then use sudoedit /etc/systemd/system/gotosocial.service to change the ExecStart= and WorkingDirectory= lines according to your installation.\nIf you have been following this guide word for word the defaults should be fine.\nAfter you\u0026rsquo;re done enable the service:\nsudo systemctl enable --now gotosocial.service (Optional) Reverse proxy # If you want to run other webservers on port 443 or want to add an additional layer of security you might want to use a reverse proxy. We have guides available for a couple of popular open source options and will gladly take pull requests to add more.\n"},{"id":9,"href":"/docs/faq/","title":"FAQ","section":"Docs","content":" Frequently Asked Questions # Where\u0026rsquo;s the user interface?\nGoToSocial is just a bare server for the most part and is designed to be used thru external applications. Semaphore and Tusky are the best-supported, but anything that supports the Mastodon API should work, other than the features GoToSocial doesn\u0026rsquo;t yet have. Permalinks and profile pages are served directly thru GoToSocial as well as the settings panel, but most interaction goes thru the apps.\nWhy aren\u0026rsquo;t my posts showing up on my profile page?\nUnlike Mastodon, the default post visibility is Unlisted. If you want something to be visible on your profile page, the post must have Public visibility.\nWhy aren\u0026rsquo;t my posts showing up on other servers?\nFirst check the visibility as noted above. TODO: explain how to debug common federation issues\nWhy am I getting frequent http 429 error responses?\nGoToSocial is configured to use per-IP rate limiting by default, but in certain situations it can\u0026rsquo;t accurately identify the remote IP and will treat all connections as coming from the same place. In those cases, the rate limiting needs to be disabled or reconfigured.\nWhy am I getting frequent http 503 error responses?\nCode 503 is returned to callers when your instance is under heavy load and requests are being throttled. This behavior can be tuned as desired, or turned off entirely, see here.\nI keep getting a 400 Bad Request error, and I have done everything suggested by the error message. What should I do?\nVerify that the host configuration matches the domain that GoToSocial is served from (the domain that users use to acces the server).\nMy instance is deployed and I\u0026rsquo;m logged in to a client but my timelines are empty, what\u0026rsquo;s up there?\nTo see posts, you have to start following people! Once you\u0026rsquo;ve followed a few people and they\u0026rsquo;ve posted or boosted things, you\u0026rsquo;ll start seeing them in your timelines. Right now GoToSocial doesn\u0026rsquo;t have a way of \u0026lsquo;backfilling\u0026rsquo; posts \u0026ndash; that is, fetching previous posts from other instances \u0026ndash; so you\u0026rsquo;ll only see new posts of people you follow. If you want to interact with an older post of theirs, you can copy the link to the post from their web profile, and paste it in to your client\u0026rsquo;s search bar.\nHow can I sign up for a server?\nRight now the only way to create an account is by the server\u0026rsquo;s admin to run a command directly on the server. A web-based signup flow is in the roadmap but not implemented yet.\nWhy\u0026rsquo;s it still in alpha?\nTake a look at the list of open bugs and the roadmap for a more detailed rundown, but the main missing features at the time of this writing are:\nmuting conversations backfill of posts web-based signup profile metadata fields lists of users polls scheduling posts account migration federated hashtag search shared block lists across servers "},{"id":10,"href":"/docs/admin/cli/","title":"GtS CLI Tool","section":"Admin","content":" GtS CLI Tool # GoToSocial compiles to an executable binary.\nThe standard way of using this binary is to run a server with the gotosocial server start command.\nHowever, this binary can also be used as an admin tool, and for debugging.\nHere\u0026rsquo;s the full output of gotosocial --help, without the big list of global config options.\nGoToSocial - a fediverse social media server For help, see: https://docs.gotosocial.org. Code: https://github.com/superseriousbusiness/gotosocial Usage: gotosocial [command] Available Commands: admin gotosocial admin-related tasks completion generate the autocompletion script for the specified shell debug gotosocial debug-related tasks help Help about any command server gotosocial server-related tasks testrig gotosocial testrig-related tasks Under Available Commands, you can see the standard server command. But there are also commands doing admin and testing etc, which will be explained in this document.\nPlease note \u0026ndash; for all of these commands, you will still need to set the global options correctly so that the CLI tool knows how eg., how to connect to your database, which database to use, which host and account domain to use etc.\nYou can set these options using environment variables, passing them as CLI flags (eg., gotosocial [commands] --host example.org), or by just pointing the CLI tool towards your config file (eg., gotosocial --config-path ./config.yaml [commands]).\ngotosocial admin # Contains account, export, import, and media subcommands.\ngotosocial admin account create # This command can be used to create a new account on your instance.\ngotosocial admin account create --help:\ncreate a new local account Usage: gotosocial admin account create [flags] Flags: --email string the email address of this account -h, --help help for create --password string the password to set for this account --username string the username to create/delete/etc Example:\ngotosocial admin account create \\ --username some_username \\ --email someuser@example.org \\ --password \u0026#39;somelongandcomplicatedpassword\u0026#39; \\ --config-path config.yaml gotosocial admin account confirm # This command can be used to confirm a user+account on your instance, allowing them to log in and use the account. Note that if the account was created using admin account create this is not necessary.\ngotosocial admin account confirm --help:\nconfirm an existing local account manually, thereby skipping email confirmation Usage: gotosocial admin account confirm [flags] Flags: -h, --help help for confirm --username string the username to create/delete/etc Example:\ngotosocial admin account confirm --username some_username --config-path config.yaml gotosocial admin account promote # This command can be used to promote a user to admin.\ngotosocial admin account promote --help:\npromote a local account to admin Usage: gotosocial admin account promote [flags] Flags: -h, --help help for promote --username string the username to create/delete/etc Example:\ngotosocial admin account promote --username some_username --config-path config.yaml gotosocial admin account demote # This command can be used to demote a user from admin to normal user.\ngotosocial admin account demote --help:\ndemote a local account from admin to normal user Usage: gotosocial admin account demote [flags] Flags: -h, --help help for demote --username string the username to create/delete/etc Example:\ngotosocial admin account demote --username some_username --config-path config.yaml gotosocial admin account disable # This command can be used to disable an account on your instance: prevent it from signing in or doing anything, without deleting data.\ngotosocial admin account disable --help:\nprevent a local account from signing in or posting etc, but don\u0026#39;t delete anything Usage: gotosocial admin account disable [flags] Flags: -h, --help help for disable --username string the username to create/delete/etc Example:\ngotosocial admin account disable --username some_username --config-path config.yaml gotosocial admin account password # This command can be used to set a new password on the given local account.\ngotosocial admin account password --help:\nset a new password for the given local account Usage: gotosocial admin account password [flags] Flags: -h, --help help for password --password string the password to set for this account --username string the username to create/delete/etc Example:\ngotosocial admin account password --username some_username --pasword some_really_good_password --config-path config.yaml gotosocial admin export # This command can be used to export data from your GoToSocial instance into a file, for backup/storage.\nThe file format will be a series of newline-separated JSON objects.\ngotosocial admin export --help:\nexport data from the database to file at the given path Usage: gotosocial admin export [flags] Flags: -h, --help help for export --path string the path of the file to import from/export to Example:\ngotosocial admin export --path example.json --config-path config.yaml example.json:\n{\u0026#34;type\u0026#34;:\u0026#34;account\u0026#34;,\u0026#34;id\u0026#34;:\u0026#34;01F8MH5NBDF2MV7CTC4Q5128HF\u0026#34;,\u0026#34;createdAt\u0026#34;:\u0026#34;2021-08-31T12:00:53.985645Z\u0026#34;,\u0026#34;username\u0026#34;:\u0026#34;1happyturtle\u0026#34;,\u0026#34;locked\u0026#34;:true,\u0026#34;language\u0026#34;:\u0026#34;en\u0026#34;,\u0026#34;uri\u0026#34;:\u0026#34;http://localhost:8080/users/1happyturtle\u0026#34;,\u0026#34;url\u0026#34;:\u0026#34;http://localhost:8080/@1happyturtle\u0026#34;,\u0026#34;inboxURI\u0026#34;:\u0026#34;http://localhost:8080/users/1happyturtle/inbox\u0026#34;,\u0026#34;outboxURI\u0026#34;:\u0026#34;http://localhost:8080/users/1happyturtle/outbox\u0026#34;,\u0026#34;followingUri\u0026#34;:\u0026#34;http://localhost:8080/users/1happyturtle/following\u0026#34;,\u0026#34;followersUri\u0026#34;:\u0026#34;http://localhost:8080/users/1happyturtle/followers\u0026#34;,\u0026#34;featuredCollectionUri\u0026#34;:\u0026#34;http://localhost:8080/users/1happyturtle/collections/featured\u0026#34;,\u0026#34;actorType\u0026#34;:\u0026#34;Person\u0026#34;,\u0026#34;privateKey\u0026#34;:\u0026#34;-----BEGIN RSA PRIVATE KEY-----\\nMIIEowIBAAKCAQEAzLP7oyyR+BU9ejn0CN9K+WpX3L37pxUcCgZAGH5lf3cGPZjz\\nausfsFME94OjVyzw3K5M2beDkZ4E+Fak46NLtakLB1yovy9jKtj4Y4txHoMvRJLz\\neUPxdfeXtpx2d3FDj++Uq4DEE0BhbePXhTGJWaNdC9MQmWKghJnCS5mrnFkdpEFx\\njUz9l0UHl2Z4wppxPdpt7FyevcdfKqzGsAA3BxTM0dg47ZJWjtcvfCiSYpAKFNJY\\nfKhKn9T3ezZgrLsF+o0IpD23KxWe1X4d5lgJRU9T4FmLmbvyJKUnfgYXbSEvLUcq\\n79WbhgRcWwxWubjmWXgPGwzULVhhpYlwd2Cv3wIDAQABAoIBAGF+MxHjD15VV2NY\\nKKb1GjMx98i1Xx6TijgoA+zmfha4LGu35e79Lql+0LXFp0zEpa6lAQsMQQhgd0OD\\nmKKmSk+pxAvskJ4FxrhIf/yBFA4RMrj5OCaAOocRtdsOJ8n5UtFBrNAF0tzMY9q/\\nkgzoq97aVF1mV9iFxaeBx6zT8ozSdqBq1PK/3w1dVg89S5tfKYc7Q0lQ00SfsTnd\\niTDClKyqurebo9Pt6M7gXavgg3tvBlmwwr6XHs34Leng3oiN9mW8DVzaBMPzn+rE\\nxF2eqs3v9vVpj8es88OwCh5P+ff8vJYvhu7Fcr/bJ8BItBQwfb8QBDATg/MXU2BI\\n2ssW6AECgYEA4wmIyYGeu9+hzDa/J3Vh8GnlVNUCohHcChQdOsWsFXUgpVlUIHrX\\neKHn42vD4Rzy52/YzJts4NkZTM9sL+kEXIEcpMG/S9xIIud7U0m/hMSAlmnJK/9j\\niEXws3o4jo0E77jnRcBdIjpG4K5Eekm0DSR3SFhtZfEdN2DWPvu7K98CgYEA5tER\\n/qJwFMc51AobMU87ZjXON7hI2U1WY/pVF62jSl0IcSsnj2riEKWLrs+GRG+HUg+U\\naFSqAHcxaVHA0h0AYR8RopAhDdVKh0kvB8biLo+IEzNjPv2vyn0yRN5YSfXdGzyJ\\nUjVU6kWdQOwmzy86nHgFaqEx7eofHIaGZzJK/AECgYEAu2VNQHX63TuzQuoVUa5z\\nzoq5vhGsALYZF0CO98ndRkDNV22qIL0ESQ/qZS64GYFZhWouWoQXlGfdmCbFN65v\\n6SKwz9UT3rvN1vGWO6Ltr9q6AG0EnYpJT1vbV2kUcaU4Y94NFue2d9/+TMnKv91B\\n/m8Q/efvNGuWH/WQIaCKV6UCgYBz89WhYMMDfS4M2mLcu5vwddk53qciGxrqMMjs\\nkzsz0Va7W12NS7lzeWaZlAE0gf6t98urOdUJVNeKvBoss4sMP0phqxwf0eWV3ur0\\ncjIQB+TpGGikLVdRVuGY/UXHKe9AjoHBva8B3aTpB3lbnbNJBXZbIc1uYq3sa5w7\\nXWWUAQKBgH3yW73RRpQNcc9hTUssomUsnQQgHxpfWx5tNxqod36Ytd9EKBh3NqUZ\\nvPcH6gdh7mcnNaVNTtQOHLHsbPfBK/pqvb3MAsdlokJcQz8MQJ9SGBBPY6PaGw8z\\nq/ambaQykER6dwlXTIlU20uXY0bttOL/iYjKmgo3vA66qfzS6nsg\\n-----END RSA PRIVATE KEY-----\\n\u0026#34;,\u0026#34;publicKey\u0026#34;:\u0026#34;-----BEGIN RSA PUBLIC KEY-----\\nMIIBCgKCAQEAzLP7oyyR+BU9ejn0CN9K+WpX3L37pxUcCgZAGH5lf3cGPZjzausf\\nsFME94OjVyzw3K5M2beDkZ4E+Fak46NLtakLB1yovy9jKtj4Y4txHoMvRJLzeUPx\\ndfeXtpx2d3FDj++Uq4DEE0BhbePXhTGJWaNdC9MQmWKghJnCS5mrnFkdpEFxjUz9\\nl0UHl2Z4wppxPdpt7FyevcdfKqzGsAA3BxTM0dg47ZJWjtcvfCiSYpAKFNJYfKhK\\nn9T3ezZgrLsF+o0IpD23KxWe1X4d5lgJRU9T4FmLmbvyJKUnfgYXbSEvLUcq79Wb\\nhgRcWwxWubjmWXgPGwzULVhhpYlwd2Cv3wIDAQAB\\n-----END RSA PUBLIC KEY-----\\n\u0026#34;,\u0026#34;publicKeyUri\u0026#34;:\u0026#34;http://localhost:8080/users/1happyturtle#main-key\u0026#34;} {\u0026#34;type\u0026#34;:\u0026#34;account\u0026#34;,\u0026#34;id\u0026#34;:\u0026#34;01F8MH0BBE4FHXPH513MBVFHB0\u0026#34;,\u0026#34;createdAt\u0026#34;:\u0026#34;2021-09-08T10:00:53.985634Z\u0026#34;,\u0026#34;username\u0026#34;:\u0026#34;weed_lord420\u0026#34;,\u0026#34;locked\u0026#34;:true,\u0026#34;language\u0026#34;:\u0026#34;en\u0026#34;,\u0026#34;uri\u0026#34;:\u0026#34;http://localhost:8080/users/weed_lord420\u0026#34;,\u0026#34;url\u0026#34;:\u0026#34;http://localhost:8080/@weed_lord420\u0026#34;,\u0026#34;inboxURI\u0026#34;:\u0026#34;http://localhost:8080/users/weed_lord420/inbox\u0026#34;,\u0026#34;outboxURI\u0026#34;:\u0026#34;http://localhost:8080/users/weed_lord420/outbox\u0026#34;,\u0026#34;followingUri\u0026#34;:\u0026#34;http://localhost:8080/users/weed_lord420/following\u0026#34;,\u0026#34;followersUri\u0026#34;:\u0026#34;http://localhost:8080/users/weed_lord420/followers\u0026#34;,\u0026#34;featuredCollectionUri\u0026#34;:\u0026#34;http://localhost:8080/users/weed_lord420/collections/featured\u0026#34;,\u0026#34;actorType\u0026#34;:\u0026#34;Person\u0026#34;,\u0026#34;privateKey\u0026#34;:\u0026#34;-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEAzsCcTHzwIgpWKVvut0Q/t1bFwnbj9hO6Ic6k0KXCXbf6qi0b\\nMIyLRZr8DS61mD+SPSO2QKEL647xxyW2D8YGtwN6Cc6MpWETsWJkNtS8t7tDL//P\\nceYpo5LiqKgn0TXj0Pq8Lvb7rqpH8QJ2EVm14SK+elhKZW/Bi5ZOEwfL8pw6EHI4\\nus6VxCNQ099dksu++kbdD7zxqEKnk/4zOttYt0whlVrxzkibTjlKdlSlTYpIstU+\\nfNyYVE0xWvrn+yF7jVlEwZYOFGfZbpELadrdOr2k1hvAk7upkrpKmLqYfwqD/xPc\\nqwtx0iS6AEnmkSiTcAvju5vLkoLFRU7Of4AZ2wIDAQABAoIBAEAA4GHNS4k+Ke4j\\nx4J0XkUjV5UbuPY0pSpSDjOJHOJmUfLcg85Ds9mYYO6zxwOaqmrC42ieclI5rh84\\nTWQUqX9+VAk1J9UKeE4xZ1SSBtnZ3rK9PjrERZ+dmQ0dATaCuEO5Wwgu7Trk++Bg\\nIqy8WNGZL94v9tfwALp1jTXW9AvmQoNdCFBP62vcmYW4YLjnggxLCFTA8YKfdePa\\nTuxxY6uLkeBbxzWpbRU2+bmlxd5OnCkiRSMHIX+6JdtCu2JdWpUTCnWrFi2n1TZz\\nZQx9z5rvowK1O785jGMFum5vBWpjIU8sJcXmPjGMU25zzmrhzfmkJsTXER3CXoUo\\nSqSPqgECgYEA78OR7bY5KKQQ7Lyz6dru4Fct5P/OXTQoOg5aS7TKb95LVWj+TANn\\n5djwIbLmAUV30z0Id9VgiZOL0Hny8+3VV9eU088Z408pAy5WQrL3dB8tZLUJSq5c\\n5k6X15/VjWOOZKppDxShzoV3mcohrnwVwkv4fhPFQQOJJBYz6xurWs0CgYEA3MDE\\nsDMd9ahzO0dl62ynojkkA8ZTcn2UdyvLpGj9UxT5j9vWF3CfqitXgcpNiVSIbxqQ\\nbo/pBch7c/2Xakv5zkdcrJj5/6gyr+m1/tK2o7+CjDaSE4SYwufXx+qkl03Zpyzt\\nKdOi7Hz/b2tdjump7ECEDE45mG2ea8oSnPgXl0cCgYBkGGFzu/9g2B24t47ksmHH\\nhp3CXIjqoDurARLxSCi7SzJoFc0ULtfRPSAC8YzUOwwrQ++lF4+V3+MexcqHy2Kl\\nqXqYcn18SC/3BAE/Fzf3Yoyw3mNiqihefbEmc7PTsxxfKkVx5ksmzNGBgsFM9sCe\\nvNigyeAvpCo8xogmPwbqgQKBgE34mIBTzcUzFmBdu5YH7r3RyPK8XkUWLhZZlbgg\\njTmHMw6o61mkIgENBf+F4RUckoQLsfAbTIcKZPB3JcAZzcYaVpVwAv1V/3E671lu\\nO6xivE2iCL50GzDcis7GBhSbHsF5kNsxMV6uV9qW5ZjQ13/m2b0u9BDuxwHzgdeH\\nmW2JAoGAIUOYniuEwdygxWVnYatpr3NPjT3BOKoV5i9zkeJRu1hFpwQM6vQ4Ds5p\\nGC5vbMKAv9Cwuw62e2HvqTun3+U2Y5Uived3XCpgM/50BFrFHCfuqXEnu1bEzk5z\\n9mIhp8uXPxzC5N7tRQfb3/eU1IUcb6T6ksbr2P81z0j03J55erg=\\n-----END RSA PRIVATE KEY-----\\n\u0026#34;,\u0026#34;publicKey\u0026#34;:\u0026#34;-----BEGIN RSA PUBLIC KEY-----\\nMIIBCgKCAQEAzsCcTHzwIgpWKVvut0Q/t1bFwnbj9hO6Ic6k0KXCXbf6qi0bMIyL\\nRZr8DS61mD+SPSO2QKEL647xxyW2D8YGtwN6Cc6MpWETsWJkNtS8t7tDL//PceYp\\no5LiqKgn0TXj0Pq8Lvb7rqpH8QJ2EVm14SK+elhKZW/Bi5ZOEwfL8pw6EHI4us6V\\nxCNQ099dksu++kbdD7zxqEKnk/4zOttYt0whlVrxzkibTjlKdlSlTYpIstU+fNyY\\nVE0xWvrn+yF7jVlEwZYOFGfZbpELadrdOr2k1hvAk7upkrpKmLqYfwqD/xPcqwtx\\n0iS6AEnmkSiTcAvju5vLkoLFRU7Of4AZ2wIDAQAB\\n-----END RSA PUBLIC KEY-----\\n\u0026#34;,\u0026#34;publicKeyUri\u0026#34;:\u0026#34;http://localhost:8080/users/weed_lord420#main-key\u0026#34;} {\u0026#34;type\u0026#34;:\u0026#34;account\u0026#34;,\u0026#34;id\u0026#34;:\u0026#34;01F8MH17FWEB39HZJ76B6VXSKF\u0026#34;,\u0026#34;createdAt\u0026#34;:\u0026#34;2021-09-05T10:00:53.985641Z\u0026#34;,\u0026#34;username\u0026#34;:\u0026#34;admin\u0026#34;,\u0026#34;locked\u0026#34;:true,\u0026#34;language\u0026#34;:\u0026#34;en\u0026#34;,\u0026#34;uri\u0026#34;:\u0026#34;http://localhost:8080/users/admin\u0026#34;,\u0026#34;url\u0026#34;:\u0026#34;http://localhost:8080/@admin\u0026#34;,\u0026#34;inboxURI\u0026#34;:\u0026#34;http://localhost:8080/users/admin/inbox\u0026#34;,\u0026#34;outboxURI\u0026#34;:\u0026#34;http://localhost:8080/users/admin/outbox\u0026#34;,\u0026#34;followingUri\u0026#34;:\u0026#34;http://localhost:8080/users/admin/following\u0026#34;,\u0026#34;followersUri\u0026#34;:\u0026#34;http://localhost:8080/users/admin/followers\u0026#34;,\u0026#34;featuredCollectionUri\u0026#34;:\u0026#34;http://localhost:8080/users/admin/collections/featured\u0026#34;,\u0026#34;actorType\u0026#34;:\u0026#34;Person\u0026#34;,\u0026#34;privateKey\u0026#34;:\u0026#34;-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEAxr2e1pqfLwwUCwHUdx56Mxnq5Kzc2EBwqN6jIPjiqVaG5eVq\\nhujDhdqwMq0hnpBSPzLnvjiOtEh7Bwhx0MjuC/GRPTM9oNWPYD4PcjX5ofrubyLR\\nBI97qD0SbyzUWzeyBi6R5tpW8LK1MJXNbnYlz5WouEiC4mY77ulri0EN2hCq80wg\\nfvtEjEvELcKBqIytKH3rutIzfAyqXD7LSQ8UDoNh9GHyIfq8Zj32gWVk2MiPI3+G\\n8kQJDmD8CKEasnrGVdSJBQUg3xDAtOibPXLP+07AIsKYMon35hVNvQNQPS7ru/Bk\\nRhhGp2R44zqj6L9mxYbSrhFAaKDedu8oVe1aLQIDAQABAoIBAGK0aIADOU4ffJDe\\n7sveiih5Fc1PATwx/QIR2QkWM1SREdx6LYclcX44V8xDanAbE44p1SkHY/CsEtYy\\nXnyoXnn2FwFDQrdveY7+I6PApOPLAcKWkyLltC+hbVdj92/6YGNrm7EA/a77wruH\\nmwjiivLnTG2CLecNiXSl33DA9YU4Yz+2Tza3IpTdjt8c/dz/BKKaxaWV+i9ew5VR\\nioo5v51B+J8PrneCM/p8LGiLV148Njr0JqV6eFy1JuzItYMYdc3Fp+YnMzsuMZEA\\n1akMcoln/ucVJyOFnCn6jx47nIoPZLl1KxX3aRDRfvrejm6W4yAkkTmR5voSRqax\\njPL3rI0CgYEA9Acu4TO8xJ3uGaUad0N9JTYQVSmtAaE/g+df9LGMSzoj8X95S4xE\\nQsGPqNGDm2VWADJjK4P05twZ+LfsfSKQ86wbp4/gbgnXpqB1P5Lty/B7KxiTnNwt\\nwb1WGWTCukxfUSL3PRyf8uylkrg72RxKiBx4zKO3WVSLWOZWrFtn0qMCgYEA0H2p\\nJs9Nv20ADOOX5tQ7+ruS6/B/Fhyj5fhflSYCAtOW7aME7+zQKJyqSQZ4b2Aub3Tp\\nGIaUbRIGzjHyuTultFFWvjU3H5aI/0g1G9WKaBhNkyTIYVmMKtYyhXNvouWing8x\\noraWx8TTBP8Cdnnk+QgdR2fpug8cghKupp5wvO8CgYA1JFtRL7MsHjh73TimQExA\\njkWARlMmx7bNQtXis8eZmk+5h8kiaqly4DQoz3eZn7fa0x5Fm7b5j3UYdPVLSvvG\\nFPTwyKRXUk1kPA1MivK+NuCbwf5jao+MYW8emJLPf1JCmRq+dD1g6aglC3n9Dewt\\nOAYWipCjI4Y1FfRKFJ3HgQKBgEAb47+DTyzln3ZXJYZdDHR06SCTuwBZnixAy2NZ\\nZJTp6yb3UbVU5E0Yn2QFEVNuB9lN4b8g4tMHEACnazN6G+HugPXL9z9HUqjs0yfT\\n6dNIZdIxJUyJ9IfXhYFzlYhJhE+F7IVUD9kttJV8tI0pvja1QAuM8Fm9+84jYIDr\\nh08RAoGAMYbjKHbtejcHBwt1kIcSss0cDmlZbBleJo8tdmdg4ndf5GE9N4/EL7tq\\nm2zYSfr7OVdnOwRhoO+xF/6d1L7+TR1wz+k2fuMsI71aM5Ocp1nYTutjIkBTcldZ\\nZzvjOgZWng5icuRLQQiDSKG5uqazqL/xGXkijb4kp4WW6myWY3c=\\n-----END RSA PRIVATE KEY-----\\n\u0026#34;,\u0026#34;publicKey\u0026#34;:\u0026#34;-----BEGIN RSA PUBLIC KEY-----\\nMIIBCgKCAQEAxr2e1pqfLwwUCwHUdx56Mxnq5Kzc2EBwqN6jIPjiqVaG5eVqhujD\\nhdqwMq0hnpBSPzLnvjiOtEh7Bwhx0MjuC/GRPTM9oNWPYD4PcjX5ofrubyLRBI97\\nqD0SbyzUWzeyBi6R5tpW8LK1MJXNbnYlz5WouEiC4mY77ulri0EN2hCq80wgfvtE\\njEvELcKBqIytKH3rutIzfAyqXD7LSQ8UDoNh9GHyIfq8Zj32gWVk2MiPI3+G8kQJ\\nDmD8CKEasnrGVdSJBQUg3xDAtOibPXLP+07AIsKYMon35hVNvQNQPS7ru/BkRhhG\\np2R44zqj6L9mxYbSrhFAaKDedu8oVe1aLQIDAQAB\\n-----END RSA PUBLIC KEY-----\\n\u0026#34;,\u0026#34;publicKeyUri\u0026#34;:\u0026#34;http://localhost:8080/users/admin#main-key\u0026#34;} {\u0026#34;type\u0026#34;:\u0026#34;account\u0026#34;,\u0026#34;id\u0026#34;:\u0026#34;01F8MH1H7YV1Z7D2C8K2730QBF\u0026#34;,\u0026#34;createdAt\u0026#34;:\u0026#34;2021-09-06T10:00:53.985643Z\u0026#34;,\u0026#34;username\u0026#34;:\u0026#34;the_mighty_zork\u0026#34;,\u0026#34;locked\u0026#34;:true,\u0026#34;language\u0026#34;:\u0026#34;en\u0026#34;,\u0026#34;uri\u0026#34;:\u0026#34;http://localhost:8080/users/the_mighty_zork\u0026#34;,\u0026#34;url\u0026#34;:\u0026#34;http://localhost:8080/@the_mighty_zork\u0026#34;,\u0026#34;inboxURI\u0026#34;:\u0026#34;http://localhost:8080/users/the_mighty_zork/inbox\u0026#34;,\u0026#34;outboxURI\u0026#34;:\u0026#34;http://localhost:8080/users/the_mighty_zork/outbox\u0026#34;,\u0026#34;followingUri\u0026#34;:\u0026#34;http://localhost:8080/users/the_mighty_zork/following\u0026#34;,\u0026#34;followersUri\u0026#34;:\u0026#34;http://localhost:8080/users/the_mighty_zork/followers\u0026#34;,\u0026#34;featuredCollectionUri\u0026#34;:\u0026#34;http://localhost:8080/users/the_mighty_zork/collections/featured\u0026#34;,\u0026#34;actorType\u0026#34;:\u0026#34;Person\u0026#34;,\u0026#34;privateKey\u0026#34;:\u0026#34;-----BEGIN RSA PRIVATE KEY-----\\nMIIEowIBAAKCAQEApBmF8U+or+E0mgUMH3LE4uRIWzeV9rhYnvSMm9OpOsxwJiss\\n5mEA/NtPHvQlq2UwrqXX89Wvu94K9EzZ4VyWYQGdxaiPpt17vRqUfsHUnXkY0pvC\\nC9zt/aNlJtdt2xm+7PTC0YQd4+E1FX3aaoUPJL8MXzNlpJzaUtuwLZe1iBmFfatZ\\nFHptEgc4nlf6TNLTzj3Yw1/7zIGVS8Vi7VquHc0Xo8dRiL2RxCGzLWnwL6GlrxY1\\ntMhsUg467XeoiwegFCpcIhAhPFREKoTnCEksL/N0rpXl7m6CAy5uqBGs5mMXnXlq\\nefr58l0j2dU6zc60LCHH9TJC+roXsKJhy9sx/QIDAQABAoIBAFa+UypbFG1cW2Tr\\nNBxPm7ngOEtXl8MicV4dIVKh0TwOo13ZxtNFBbOj7jALmPn/9HrtmbkABPQHDL1U\\n/nt9aNSAeTjpwH3RaD5vFX3n0g8n2zJBOZLxxzAjNi4RBLYj5uP1AiKkdvRlsJza\\nuSFDkty2zMBqN9mLPHE+RePj5Qa6tjYfIQqQzu/+YnYMlXHoC2yHNKsvz6S5FhVj\\nv5zATv2JlJQH3RSmhuPOah73iQnKCLzYYEAHleawKrCg/rZ3ht37Guvabeq7MqQN\\nvi9pJdAA+RMxPsboHajskePjOTYJgKQSxEAMRTMfBR40aZxklxQL0EoBd1Y3CHXh\\nfMg0xWECgYEA0ORrpJ1A2WNQwKcDDeBBsaJqWF4EraoFzYrugKZrAYEeVyuGD0zq\\nARUaWkZTZ1f6wQ10i1WxAuKlBEds7QsLdZzLsA4um4JlBroCZiYfPnmTtb8op1LY\\nFqeYTByvAmnfWWTuOI67GX9ruLg8tEGuz38kuQVSxYs51its3tScNPUCgYEAyRst\\nwRbqpOqnwoRoS6pxv0Vpc3nUcfaVYwsg/qobJkiwAdlUYeE7alvEY926VW4cvU/X\\nhy3L1punAqnyLI7uuqCefXEbNxO0Cebyy4Kv2Ye1uzl0OHsJczSNdfpNqfAIKwtN\\nHLCYDGCsluQhz+I/5Pd0dT+JDPPW9hKS2HG7o+kCgYBqugn1VRLo/sEnbS02TbnC\\n1ESZWY/yWsgUOEObH2vUnO+vgeFAt/9nBi0sqnm6d0z6jbFZ7zI9UycUhJm2ksoM\\nEUxQay6M7ZZIVYkcP6X++YbqePyAYOdey8oYOR+BkC45MkQ0SVh2so+LFTaOsnBq\\nO3+7uGiN3ZBzSESbpO0acQKBgQCONrsXZeZO82XpB4tdns3LbgGRWKEkajTgEnml\\nvZNvck2NMSwb/5PttbFe0ei4CyMluPV4MamJPQ9Qse+BFR67OWR63uZY/4T8z6X4\\nxpUmZnLcUFfgrRlUr+AtgvEy8HxGPDquxC7x6deC6RcEFEIM3/UqCOEZGMJ1x1Ky\\n31LLKQKBgGCKwVgQ8+4JyHZFkie3YdHhxJDokgY+Opb0HNnoBY/lZ54UMCCJQPS2\\n0XPSu651j/3adr3RQneU04gF6U2/D5JzFEV0kUsqZ4Zy2EEU0LU4ibus0gyomSpK\\niWhU4QrC/M4ELxYZinlNu3ThPWNQ/PMNteVWfdgOcV7uUWl0ViFp\\n-----END RSA PRIVATE KEY-----\\n\u0026#34;,\u0026#34;publicKey\u0026#34;:\u0026#34;-----BEGIN RSA PUBLIC KEY-----\\nMIIBCgKCAQEApBmF8U+or+E0mgUMH3LE4uRIWzeV9rhYnvSMm9OpOsxwJiss5mEA\\n/NtPHvQlq2UwrqXX89Wvu94K9EzZ4VyWYQGdxaiPpt17vRqUfsHUnXkY0pvCC9zt\\n/aNlJtdt2xm+7PTC0YQd4+E1FX3aaoUPJL8MXzNlpJzaUtuwLZe1iBmFfatZFHpt\\nEgc4nlf6TNLTzj3Yw1/7zIGVS8Vi7VquHc0Xo8dRiL2RxCGzLWnwL6GlrxY1tMhs\\nUg467XeoiwegFCpcIhAhPFREKoTnCEksL/N0rpXl7m6CAy5uqBGs5mMXnXlqefr5\\n8l0j2dU6zc60LCHH9TJC+roXsKJhy9sx/QIDAQAB\\n-----END RSA PUBLIC KEY-----\\n\u0026#34;,\u0026#34;publicKeyUri\u0026#34;:\u0026#34;http://localhost:8080/users/the_mighty_zork#main-key\u0026#34;} {\u0026#34;type\u0026#34;:\u0026#34;block\u0026#34;,\u0026#34;id\u0026#34;:\u0026#34;01FEXXET6XXMF7G2V3ASZP3YQW\u0026#34;,\u0026#34;createdAt\u0026#34;:\u0026#34;2021-09-08T09:00:53.965362Z\u0026#34;,\u0026#34;uri\u0026#34;:\u0026#34;http://localhost:8080/users/1happyturtle/blocks/01FEXXET6XXMF7G2V3ASZP3YQW\u0026#34;,\u0026#34;accountId\u0026#34;:\u0026#34;01F8MH5NBDF2MV7CTC4Q5128HF\u0026#34;,\u0026#34;targetAccountId\u0026#34;:\u0026#34;01F8MH5ZK5VRH73AKHQM6Y9VNX\u0026#34;} {\u0026#34;type\u0026#34;:\u0026#34;account\u0026#34;,\u0026#34;id\u0026#34;:\u0026#34;01F8MH5ZK5VRH73AKHQM6Y9VNX\u0026#34;,\u0026#34;createdAt\u0026#34;:\u0026#34;2021-08-31T12:00:53.985646Z\u0026#34;,\u0026#34;username\u0026#34;:\u0026#34;foss_satan\u0026#34;,\u0026#34;domain\u0026#34;:\u0026#34;fossbros-anonymous.io\u0026#34;,\u0026#34;locked\u0026#34;:true,\u0026#34;language\u0026#34;:\u0026#34;en\u0026#34;,\u0026#34;uri\u0026#34;:\u0026#34;http://fossbros-anonymous.io/users/foss_satan\u0026#34;,\u0026#34;url\u0026#34;:\u0026#34;http://fossbros-anonymous.io/@foss_satan\u0026#34;,\u0026#34;inboxURI\u0026#34;:\u0026#34;http://fossbros-anonymous.io/users/foss_satan/inbox\u0026#34;,\u0026#34;outboxURI\u0026#34;:\u0026#34;http://fossbros-anonymous.io/users/foss_satan/outbox\u0026#34;,\u0026#34;followingUri\u0026#34;:\u0026#34;http://fossbros-anonymous.io/users/foss_satan/following\u0026#34;,\u0026#34;followersUri\u0026#34;:\u0026#34;http://fossbros-anonymous.io/users/foss_satan/followers\u0026#34;,\u0026#34;featuredCollectionUri\u0026#34;:\u0026#34;http://fossbros-anonymous.io/users/foss_satan/collections/featured\u0026#34;,\u0026#34;actorType\u0026#34;:\u0026#34;Person\u0026#34;,\u0026#34;publicKey\u0026#34;:\u0026#34;-----BEGIN RSA PUBLIC KEY-----\\nMIIBCgKCAQEA2OyVgkaIL9VohXKYTh319j4OouHRX/8QC7piXj71k7q5RDzEyvis\\nVZBc5/C1/crCpxt895i0Ai2CiXQx+dISV7s/JBhAGl8s7TQ8jLlMuptrI0+sdkBC\\nlu8pU0qQmoeXVnlquOzNmqGufUxIDtLXLZDN17qf/7vWA23q4d0tG5KQhGGGKiVM\\n61Ufvr9MmgPBSpyUvYMAulFlz1264L49aGWeVgOz3qUQzqtxjrP0kaIbeyt56miP\\nKr5AqkRgSsXci+FAo6suxR5gzo9NgleNkbZWF9MQyKlawukPwZUDSh396vtNQMee\\n/4mto7mAXw8iio0IacrYO3F7iyewXnmI/QIDAQAB\\n-----END RSA PUBLIC KEY-----\\n\u0026#34;,\u0026#34;publicKeyUri\u0026#34;:\u0026#34;http://fossbros-anonymous.io/users/foss_satan/main-key\u0026#34;} {\u0026#34;type\u0026#34;:\u0026#34;follow\u0026#34;,\u0026#34;id\u0026#34;:\u0026#34;01F8PYDCE8XE23GRE5DPZJDZDP\u0026#34;,\u0026#34;createdAt\u0026#34;:\u0026#34;2021-09-08T09:00:54.749465Z\u0026#34;,\u0026#34;uri\u0026#34;:\u0026#34;http://localhost:8080/users/the_mighty_zork/follow/01F8PYDCE8XE23GRE5DPZJDZDP\u0026#34;,\u0026#34;accountId\u0026#34;:\u0026#34;01F8MH1H7YV1Z7D2C8K2730QBF\u0026#34;,\u0026#34;targetAccountId\u0026#34;:\u0026#34;01F8MH5NBDF2MV7CTC4Q5128HF\u0026#34;} {\u0026#34;type\u0026#34;:\u0026#34;follow\u0026#34;,\u0026#34;id\u0026#34;:\u0026#34;01F8PY8RHWRQZV038T4E8T9YK8\u0026#34;,\u0026#34;createdAt\u0026#34;:\u0026#34;2021-09-06T12:00:54.749459Z\u0026#34;,\u0026#34;uri\u0026#34;:\u0026#34;http://localhost:8080/users/the_mighty_zork/follow/01F8PY8RHWRQZV038T4E8T9YK8\u0026#34;,\u0026#34;accountId\u0026#34;:\u0026#34;01F8MH1H7YV1Z7D2C8K2730QBF\u0026#34;,\u0026#34;targetAccountId\u0026#34;:\u0026#34;01F8MH17FWEB39HZJ76B6VXSKF\u0026#34;} {\u0026#34;type\u0026#34;:\u0026#34;domainBlock\u0026#34;,\u0026#34;id\u0026#34;:\u0026#34;01FF22EQM7X8E3RX1XGPN7S87D\u0026#34;,\u0026#34;createdAt\u0026#34;:\u0026#34;2021-09-08T10:00:53.968971Z\u0026#34;,\u0026#34;domain\u0026#34;:\u0026#34;replyguys.com\u0026#34;,\u0026#34;createdByAccountID\u0026#34;:\u0026#34;01F8MH17FWEB39HZJ76B6VXSKF\u0026#34;,\u0026#34;privateComment\u0026#34;:\u0026#34;i blocked this domain because they keep replying with pushy + unwarranted linux advice\u0026#34;,\u0026#34;publicComment\u0026#34;:\u0026#34;reply-guying to tech posts\u0026#34;,\u0026#34;obfuscate\u0026#34;:false} {\u0026#34;type\u0026#34;:\u0026#34;user\u0026#34;,\u0026#34;id\u0026#34;:\u0026#34;01F8MGYG9E893WRHW0TAEXR8GJ\u0026#34;,\u0026#34;createdAt\u0026#34;:\u0026#34;2021-09-08T10:00:53.97247Z\u0026#34;,\u0026#34;accountID\u0026#34;:\u0026#34;01F8MH0BBE4FHXPH513MBVFHB0\u0026#34;,\u0026#34;encryptedPassword\u0026#34;:\u0026#34;$2y$10$ggWz5QWwnx6kzb9g0tnIJurFtE0dhr5Zfeaqs9iFuUIXzafQlJVZS\u0026#34;,\u0026#34;locale\u0026#34;:\u0026#34;en\u0026#34;,\u0026#34;lastEmailedAt\u0026#34;:\u0026#34;0001-01-01T00:00:00Z\u0026#34;,\u0026#34;confirmationToken\u0026#34;:\u0026#34;a5a280bd-34be-44a3-8330-a57eaf61b8dd\u0026#34;,\u0026#34;confirmationTokenSentAt\u0026#34;:\u0026#34;2021-09-08T10:00:53.972472Z\u0026#34;,\u0026#34;unconfirmedEmail\u0026#34;:\u0026#34;weed_lord420@example.org\u0026#34;,\u0026#34;moderator\u0026#34;:false,\u0026#34;admin\u0026#34;:false,\u0026#34;disabled\u0026#34;:false,\u0026#34;approved\u0026#34;:false} {\u0026#34;type\u0026#34;:\u0026#34;user\u0026#34;,\u0026#34;id\u0026#34;:\u0026#34;01F8MGWYWKVKS3VS8DV1AMYPGE\u0026#34;,\u0026#34;createdAt\u0026#34;:\u0026#34;2021-09-05T10:00:53.972475Z\u0026#34;,\u0026#34;email\u0026#34;:\u0026#34;admin@example.org\u0026#34;,\u0026#34;accountID\u0026#34;:\u0026#34;01F8MH17FWEB39HZJ76B6VXSKF\u0026#34;,\u0026#34;encryptedPassword\u0026#34;:\u0026#34;$2y$10$ggWz5QWwnx6kzb9g0tnIJurFtE0dhr5Zfeaqs9iFuUIXzafQlJVZS\u0026#34;,\u0026#34;currentSignInAt\u0026#34;:\u0026#34;2021-09-08T09:50:53.972477Z\u0026#34;,\u0026#34;lastSignInAt\u0026#34;:\u0026#34;2021-09-08T08:00:53.972477Z\u0026#34;,\u0026#34;chosenLanguages\u0026#34;:[\u0026#34;en\u0026#34;],\u0026#34;locale\u0026#34;:\u0026#34;en\u0026#34;,\u0026#34;lastEmailedAt\u0026#34;:\u0026#34;2021-09-08T09:30:53.972478Z\u0026#34;,\u0026#34;confirmedAt\u0026#34;:\u0026#34;2021-09-05T10:00:53.972478Z\u0026#34;,\u0026#34;moderator\u0026#34;:true,\u0026#34;admin\u0026#34;:true,\u0026#34;disabled\u0026#34;:false,\u0026#34;approved\u0026#34;:true} {\u0026#34;type\u0026#34;:\u0026#34;user\u0026#34;,\u0026#34;id\u0026#34;:\u0026#34;01F8MGVGPHQ2D3P3X0454H54Z5\u0026#34;,\u0026#34;createdAt\u0026#34;:\u0026#34;2021-09-06T22:00:53.97248Z\u0026#34;,\u0026#34;email\u0026#34;:\u0026#34;zork@example.org\u0026#34;,\u0026#34;accountID\u0026#34;:\u0026#34;01F8MH1H7YV1Z7D2C8K2730QBF\u0026#34;,\u0026#34;encryptedPassword\u0026#34;:\u0026#34;$2y$10$ggWz5QWwnx6kzb9g0tnIJurFtE0dhr5Zfeaqs9iFuUIXzafQlJVZS\u0026#34;,\u0026#34;currentSignInAt\u0026#34;:\u0026#34;2021-09-08T09:30:53.972481Z\u0026#34;,\u0026#34;lastSignInAt\u0026#34;:\u0026#34;2021-09-08T08:00:53.972481Z\u0026#34;,\u0026#34;chosenLanguages\u0026#34;:[\u0026#34;en\u0026#34;],\u0026#34;locale\u0026#34;:\u0026#34;en\u0026#34;,\u0026#34;lastEmailedAt\u0026#34;:\u0026#34;2021-09-08T09:05:53.972482Z\u0026#34;,\u0026#34;confirmationTokenSentAt\u0026#34;:\u0026#34;2021-09-06T22:00:53.972483Z\u0026#34;,\u0026#34;confirmedAt\u0026#34;:\u0026#34;2021-09-07T00:00:53.972482Z\u0026#34;,\u0026#34;moderator\u0026#34;:false,\u0026#34;admin\u0026#34;:false,\u0026#34;disabled\u0026#34;:false,\u0026#34;approved\u0026#34;:true} {\u0026#34;type\u0026#34;:\u0026#34;user\u0026#34;,\u0026#34;id\u0026#34;:\u0026#34;01F8MH1VYJAE00TVVGMM5JNJ8X\u0026#34;,\u0026#34;createdAt\u0026#34;:\u0026#34;2021-09-06T22:00:53.972485Z\u0026#34;,\u0026#34;email\u0026#34;:\u0026#34;tortle.dude@example.org\u0026#34;,\u0026#34;accountID\u0026#34;:\u0026#34;01F8MH5NBDF2MV7CTC4Q5128HF\u0026#34;,\u0026#34;encryptedPassword\u0026#34;:\u0026#34;$2y$10$ggWz5QWwnx6kzb9g0tnIJurFtE0dhr5Zfeaqs9iFuUIXzafQlJVZS\u0026#34;,\u0026#34;currentSignInAt\u0026#34;:\u0026#34;2021-09-08T09:30:53.972485Z\u0026#34;,\u0026#34;lastSignInAt\u0026#34;:\u0026#34;2021-09-08T08:00:53.972486Z\u0026#34;,\u0026#34;chosenLanguages\u0026#34;:[\u0026#34;en\u0026#34;],\u0026#34;locale\u0026#34;:\u0026#34;en\u0026#34;,\u0026#34;lastEmailedAt\u0026#34;:\u0026#34;2021-09-08T09:05:53.972487Z\u0026#34;,\u0026#34;confirmationTokenSentAt\u0026#34;:\u0026#34;2021-09-06T22:00:53.972487Z\u0026#34;,\u0026#34;confirmedAt\u0026#34;:\u0026#34;2021-09-07T00:00:53.972487Z\u0026#34;,\u0026#34;moderator\u0026#34;:false,\u0026#34;admin\u0026#34;:false,\u0026#34;disabled\u0026#34;:false,\u0026#34;approved\u0026#34;:true} {\u0026#34;type\u0026#34;:\u0026#34;instance\u0026#34;,\u0026#34;id\u0026#34;:\u0026#34;01BZDDRPAB8J645ABY31HHF68Y\u0026#34;,\u0026#34;createdAt\u0026#34;:\u0026#34;2021-09-08T10:00:54.763912Z\u0026#34;,\u0026#34;domain\u0026#34;:\u0026#34;localhost:8080\u0026#34;,\u0026#34;title\u0026#34;:\u0026#34;localhost:8080\u0026#34;,\u0026#34;uri\u0026#34;:\u0026#34;http://localhost:8080\u0026#34;,\u0026#34;reputation\u0026#34;:0} gotosocial admin import # This command can be used to import data from a file into your GoToSocial database.\nIf GoToSocial tables don\u0026rsquo;t yet exist in the database, they will be created.\nIf any conflicts occur while importing (an already exists while attempting to import a specific account, for example), then the process will be aborted.\nThe file format should be a series of newline-separated JSON objects (see above).\ngotosocial admin import --help:\nimport data from a file into the database Usage: gotosocial admin import [flags] Flags: -h, --help help for import --path string the path of the file to import from/export to Example:\ngotosocial admin import --path example.json --config-path config.yaml gotosocial admin media list-local # This command can be used to list local media. Local media is media that belongs to posts by users with an account on the instance.\nThe output will be a list of files. The list can be used to drive your backups.\ngotosocial admin media list-remote # This is the corollary to list-local, but instead lists media from remote instances. Remote media belongs to other instances, but was attached to a post we received over federation and have potentially cached locally.\nThe output will be a list of URLs to retrieve the original content from. GoToSocial automatically retrieves remote media when it needs it, so you should never need to do so yourself.\ngotosocial admin media prune orphaned # This command can be used to prune orphaned media from your GoToSocial.\nOrphaned media is defined as media that is in storage under a key that matches the format used by GoToSocial, but which does not have a corresponding database entry. This is useful for excising files that may be remaining from a previous installation, or files that were placed in storage mistakenly.\nThis command only works when GoToSocial is not running, since it acquires an exclusive lock on storage. Stop GoToSocial first before running this command!\nprune orphaned media from storage Usage: gotosocial admin media prune orphaned [flags] Flags: --dry-run perform a dry run and only log number of items eligible for pruning (default true) -h, --help help for orphaned By default, this command performs a dry run, which will log how many items can be pruned. To do it for real, add --dry-run=false to the command.\nExample (dry run):\ngotosocial admin media prune orphaned Example (for real):\ngotosocial admin media prune orphaned --dry-run=false gotosocial admin media prune remote # This command can be used to prune unused/stale remote media from your GoToSocial.\nStale media means avatars/headers/status attachments from remote instances that are older than media-remote-cache-days.\nThese items will be refetched later on demand, if necessary.\nUnused media means avatars/headers/status attachments which are not currently in use by an account or status.\nThis command only works when GoToSocial is not running, since it acquires an exclusive lock on storage. Stop GoToSocial first before running this command!\nprune unused/stale remote media from storage, older than given number of days Usage: gotosocial admin media prune remote [flags] Flags: --dry-run perform a dry run and only log number of items eligible for pruning (default true) -h, --help help for remote By default, this command performs a dry run, which will log how many items can be pruned. To do it for real, add --dry-run=false to the command.\nExample (dry run):\ngotosocial admin media prune remote Example (for real):\ngotosocial admin media prune remote --dry-run=false "},{"id":11,"href":"/docs/advanced/host-account-domain/","title":"Split-domain deployments","section":"Advanced","content":" Split-domain deployments # This guide explains how to have usernames like @me@example.org but run the GoToSocial instance itself on a subdomain like social.example.org. Configuring this type of deployment layout must be done before starting GoToSocial for the first time.\nDanger\nYou cannot change your domain layout after you\u0026rsquo;ve federated with someone. Servers are going to get confused and you\u0026rsquo;ll need to convince the admin of every instance that\u0026rsquo;s federated with you before to mess with their database to resolve it. It also requires regenerating the database on your side to create a new instance account and pair of encryption keys.\nBackground # The way ActivityPub implementations discover how to map your account domain to your host domain is through a protocol called webfinger. This mapping is typically cached by servers and hence why you can\u0026rsquo;t change it after the fact.\nIt works by doing a request to https://\u0026lt;account domain\u0026gt;/.well-known/webfinger?resource=acct:@me@example.org. At this point, a server can return a redirect to where the actual webfinger endpoint is, https://\u0026lt;host domain\u0026gt;/.well-known/webfinger?resource=acct:@me@example.org or may respond directly. The JSON document that is returned informs you what the endpoint to query is for the user:\n{ \u0026#34;subject\u0026#34;: \u0026#34;acct:me@example.org\u0026#34;, \u0026#34;aliases\u0026#34;: [ \u0026#34;https://social.example.org/users/me\u0026#34;, \u0026#34;https://social.example.org/@me\u0026#34; ], \u0026#34;links\u0026#34;: [ { \u0026#34;rel\u0026#34;: \u0026#34;http://webfinger.net/rel/profile-page\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;text/html\u0026#34;, \u0026#34;href\u0026#34;: \u0026#34;https://social.example.org/@me\u0026#34; }, { \u0026#34;rel\u0026#34;: \u0026#34;self\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;application/activity+json\u0026#34;, \u0026#34;href\u0026#34;: \u0026#34;https://social.example.org/users/me\u0026#34; } ] } ActivityPub clients and servers will now use the entry from the links array with rel self and type application/activity+json to query for further information, like where the inbox is located to federated messages to.\nConfiguration # There are 2 configuration settings you\u0026rsquo;ll need to concern yourself with:\nhost, the domain the API will be served on and what clients and servers will end up using when talking to your instance account-domain, the domain user accounts will be created on In order to achieve the setup as described in the introduction, you\u0026rsquo;ll need to set these two configuration options accordingly:\nhost: social.example.org account-domain: example.org Info\nThe host must always be the DNS name that your GoToSocial instance runs on. It does not affect the IP address the GoToSocial instance binds to. That is controlled with bind-address.\nReverse proxy # When using a reverse proxy you\u0026rsquo;ll need to ensure you\u0026rsquo;re set up to handle traffic on both of those domains. You\u0026rsquo;ll need to redirect a few endpoints from the account domain to the host domain.\nRedirects are typically used so that the change of domain can be detected client side. The endpoints to redirect from the account domain to the host domain are:\n/.well-known/webfinger /.well-known/host-meta /.well-known/nodeinfo Tip\nDo not proxy or redirect requests to the API endpoints, /api/..., from the account domain to the host domain. This will confuse heuristics some clients use to detect a split-domain deployment resulting in broken login flows and other weird behaviour.\nnginx # In order to configure the redirect, you\u0026rsquo;ll need to configure it on the account domain. Assuming the account domain is example.org and the host domain is social.example.org, the following configuration snippet showcases how to do this:\nserver { server_name example.org; location /.well-known/webfinger { rewrite ^.*$ https://social.example.org/.well-known/webfinger permanent; } location /.well-known/host-meta { rewrite ^.*$ https://social.example.org/.well-known/host-meta permanent; } location /.well-known/nodeinfo { rewrite ^.*$ https://social.example.org/.well-known/nodeinfo permanent; } } Traefik # If example.org is running on Traefik, we could use labels similar to the following to setup the redirect.\nmyservice: image: foo # Other stuff labels: - \u0026#39;traefik.http.routers.myservice.rule=Host(`example.org`)\u0026#39; - \u0026#39;traefik.http.middlewares.myservice-gts.redirectregex.permanent=true\u0026#39; - \u0026#39;traefik.http.middlewares.myservice-gts.redirectregex.regex=^https://(.*)/.well-known/(webfinger|nodeinfo|host-meta)$$\u0026#39; - \u0026#39;traefik.http.middlewares.myservice-gts.redirectregex.replacement=https://social.$${1}/.well-known/$${2}\u0026#39; - \u0026#39;traefik.http.routers.myservice.middlewares=myservice-gts@docker\u0026#39; "},{"id":12,"href":"/docs/advanced/security/firewall/","title":"Firewall","section":"Security","content":" Firewall # You should deploy a firewall on your instance to close off any open ports and give you a mechanism to ban potentially misbehaving clients. Many firewall frontends will also automatically install some rules that block obvious malicious packets.\nIt can be helpful to deploy tools that monitor your log files for certain patterns and automatically ban clients exhibiting certain behaviour. This can be use to monitor your SSH and web server access logs for things like SSH brute-force attacks.\nPorts # For GoToSocial, you\u0026rsquo;ll want to ensure port 443 remains open. Without it, nobody will be able to reach your instance. Federation will fail and client apps won\u0026rsquo;t be able to work at all.\nIf you provision TLS certificates using ACME or GoToSocial\u0026rsquo;s built-in Lets Encrypt support, you\u0026rsquo;ll also need port 80 to be open.\nIn order to access your instance over SSH, you\u0026rsquo;ll need to keep the port your SSH daemon is bound on open too. By default this is port 22.\nICMP # Internet Control Message Protocol are exchanged between machines in order to detect certain network conditions or troubleshoot things. Many firewalls have a tendency of blocking ICMP entirely but this is undesirable. A few ICMP types should be allowed and you can use your firewall to configure rate limiting for them instead.\nIPv4 # In order for things to work reliably, your firewall must allow:\nICMP Type 3: \u0026ldquo;Destination Unreachable\u0026rdquo; and also aids in Path-MTU Discovery ICMP Type 4: \u0026ldquo;Source Quench\u0026rdquo; If you want to be able to ping things or be pinged, you should also allow:\nICMP Type 0: \u0026ldquo;Echo Reply\u0026rdquo; ICMP Type 8: \u0026ldquo;Echo Request\u0026rdquo; For traceroute to work, it can be helpful to also allow:\nICMP Type 11: \u0026ldquo;Time Exceeded\u0026rdquo; IPv6 # ICMP is heavily relied on by all parts of the IPv6 stack and things will break in exciting and hard to debug ways if you block it. RFC 4890 was specifically written to address this and is worthwhile to review.\nRoughly speaking, you must always allow:\nICMP Type 1: \u0026ldquo;Destination Unreachable\u0026rdquo; ICMP Type 2: \u0026ldquo;Packet Too Big\u0026rdquo; ICMP Type 3, code 0: \u0026ldquo;Time Exceeded\u0026rdquo; ICMP Type 4, code 1, 2: \u0026ldquo;Parameter Problem\u0026rdquo; For ping, you should allow:\nICMP Type 128: \u0026ldquo;Echo Request\u0026rdquo; ICMP Type 129: \u0026ldquo;Echo Response\u0026rdquo; Firewall configuration # On Linux, firewalling is typically done using either iptables or the more modern and faster nftables as the backend. Most distributions are switching to nftables and many firewall frontends can be configured to use nftables instead. You\u0026rsquo;ll need to refer to your distribution\u0026rsquo;s documentation on the matter, but typically there will be an iptables or nftables service your init-system can start with a predefined location to load firewall rules from.\nDoing this by hand using raw iptables or nftables rules offers the most control but can be challenging if you\u0026rsquo;re not familiar with these systems. In order to help with that, a number of configuration frontends exist that you can use.\nOn the Debian and Ubuntu as well as openSUSE family of distributions, UFW is commonly used. It\u0026rsquo;s a simple firewall front-end and many tutorials targeting those distributions will be using it.\nFor the Red Hat/CentOS family of distributions, firewalld is typically used. It\u0026rsquo;s a much more advanced firewall configuration utility which also has a desktop GUI and Cockpit integration.\nDespite distribution preferences, you can use UFW, firewalld or something else entirely with any Linux distribution.\nUbuntu Wiki on UFW ArchWiki on UFW Digital Ocean guide on using UFW with Ubuntu 22.04 firewalld project homepage and documentation ArchWiki on firewalld Using and configuring firewalld from Red Hat Linode guide on using firewalld Brute-force protection # fail2ban and SSHGuard can be set up to monitor your log files for attempts to brute-force logins and other malicious behaviour. They can be configured to automatically insert firewall rules to block malicious IP addresses, either for a specific period of time or even indefinitely.\nSSHGuard was initially designed just for SSH, but nowadays supports a variety of services. Fail2ban tends to support anything you can generate consistent log lines for, whereas SSHGuard\u0026rsquo;s signature approach can catch more sophisticated or stealthy attacks as it computes an attack score over time.\nBoth SSHGuard and fail2ban ship with \u0026ldquo;backends\u0026rdquo; that can target iptables and nftables directly, or work with your frontend of choice like UFW or firewalld on Linux or pf on *BSD. Make sure you review their documentation on how to correctly configure it.\nArchWiki on fail2ban DigitalOcean guide on how to protect SSH with fail2ban on Ubuntu Linode guide on how to secure your server with fail2ban ArchWiki on sshguard FreeBSD manual for sshguard SSHGuard setup manual for Ubuntu "},{"id":13,"href":"/docs/configuration/database/","title":"Database","section":"Configuration","content":" Database # GoToSocial stores statuses, accounts, etc, in a database. This can be either SQLite or Postgres.\nBy default, GoToSocial will use Postgres, but this is easy to change.\nSQLite # SQLite, as the name implies, is the lightest database type that GoToSocial can use. It stores entries in a simple file format, usually in the same directory as the GoToSocial binary itself. SQLite is great for small instances and lower-powered machines like Raspberry Pi, where a dedicated database would be overkill.\nTo configure GoToSocial to use SQLite, change db-type to sqlite. The address setting will then be a filename instead of an address, so you will want to change it to sqlite.db or something similar.\nNote that the :memory: setting will use an in-memory database which will be wiped when your GoToSocial instance stops running. This is for testing only and is absolutely not suitable for running a proper instance, so don\u0026rsquo;t do this.\nPostgres # Postgres is a heavier database format, which is useful for larger instances where you need to scale performance, or where you need to run your database on a dedicated machine separate from your GoToSocial instance (or do funky stuff like run a database cluster).\nYou can connect to Postgres using either a Unix socket connection, or via TCP, depending on what you\u0026rsquo;ve set as your db-address value.\nGoToSocial also supports connecting to Postgres using SSL/TLS over TCP. If you\u0026rsquo;re running Postgres on a different machine from GoToSocial, and connecting to it via an IP address or hostname (as opposed to just running on localhost), then SSL/TLS is CRUCIAL to avoid leaking data all over the place!\nWhen you\u0026rsquo;re using Postgres, GoToSocial expects whatever you\u0026rsquo;ve set for db-user to already be created in the database, and to have ownership of whatever you\u0026rsquo;ve set for db-database.\nFor example, if you set:\ndb: [...] user: \u0026#34;gotosocial\u0026#34; password: \u0026#34;some_really_good_password\u0026#34; database: \u0026#34;gotosocial\u0026#34; Then you should have already created database gotosocial in Postgres, and given ownership of it to the gotosocial user.\nThe psql commands to do this will look something like:\ncreate database gotosocial with locale C.UTF-8 template template0; create user gotosocial with password \u0026#39;some_really_good_password\u0026#39;; grant all privileges on database gotosocial to gotosocial; GoToSocial makes use of ULIDs (Universally Unique Lexicographically Sortable Identifiers) which will not work in non-English collate environments. For this reason it is important to create the database with C.UTF-8 locale. To do that on systems which were already initialized with non-C locale, template0 pristine database template must be used.\nSettings # ############################ ##### DATABASE CONFIG ###### ############################ # Config pertaining to the Gotosocial database connection # String. Database type. # Options: [\u0026#34;postgres\u0026#34;,\u0026#34;sqlite\u0026#34;] # Default: \u0026#34;postgres\u0026#34; db-type: \u0026#34;postgres\u0026#34; # String. Database address or parameters. # # For Postgres, this should be the address or socket at which the database can be reached. # # For Sqlite, this should be the path to your sqlite database file. Eg., /opt/gotosocial/sqlite.db. # If the file doesn\u0026#39;t exist at the specified path, it will be created. # If just a filename is provided (no directory) then the database will be created in the same directory # as the GoToSocial binary. # If address is set to :memory: then an in-memory database will be used (no file). # WARNING: :memory: should NOT BE USED except for testing purposes. # # Examples: [\u0026#34;localhost\u0026#34;,\u0026#34;my.db.host\u0026#34;,\u0026#34;127.0.0.1\u0026#34;,\u0026#34;192.111.39.110\u0026#34;,\u0026#34;:memory:\u0026#34;, \u0026#34;sqlite.db\u0026#34;] # Default: \u0026#34;\u0026#34; db-address: \u0026#34;\u0026#34; # Int. Port for database connection. # Examples: [5432, 1234, 6969] # Default: 5432 db-port: 5432 # String. Username for the database connection. # Examples: [\u0026#34;mydbuser\u0026#34;,\u0026#34;postgres\u0026#34;,\u0026#34;gotosocial\u0026#34;] # Default: \u0026#34;\u0026#34; db-user: \u0026#34;\u0026#34; # String. Password to use for the database connection # Examples: [\u0026#34;password123\u0026#34;,\u0026#34;verysafepassword\u0026#34;,\u0026#34;postgres\u0026#34;] # Default: \u0026#34;\u0026#34; db-password: \u0026#34;\u0026#34; # String. Name of the database to use within the provided database type. # Examples: [\u0026#34;mydb\u0026#34;,\u0026#34;postgres\u0026#34;,\u0026#34;gotosocial\u0026#34;] # Default: \u0026#34;gotosocial\u0026#34; db-database: \u0026#34;gotosocial\u0026#34; # String. Disable, enable, or require SSL/TLS connection to the database. # If \u0026#34;disable\u0026#34; then no TLS connection will be attempted. # If \u0026#34;enable\u0026#34; then TLS will be tried, but the database certificate won\u0026#39;t be checked (for self-signed certs). # If \u0026#34;require\u0026#34; then TLS will be required to make a connection, and a valid certificate must be presented. # Options: [\u0026#34;disable\u0026#34;, \u0026#34;enable\u0026#34;, \u0026#34;require\u0026#34;] # Default: \u0026#34;disable\u0026#34; db-tls-mode: \u0026#34;disable\u0026#34; # String. Path to a CA certificate on the host machine for db certificate validation. # If this is left empty, just the host certificates will be used. # If filled in, the certificate will be loaded and added to host certificates. # Examples: [\u0026#34;/path/to/some/cert.crt\u0026#34;] # Default: \u0026#34;\u0026#34; db-tls-ca-cert: \u0026#34;\u0026#34; # Int. Number to multiply by CPU count to set permitted total of open database connections (in-use and idle). # You can use this setting to tune your database connection behavior, though most admins won\u0026#39;t need to touch it. # # Example values for multiplier 8: # # 1 cpu = 08 open connections # 2 cpu = 16 open connections # 4 cpu = 32 open connections # # Example values for multiplier 4: # # 1 cpu = 04 open connections # 2 cpu = 08 open connections # 4 cpu = 16 open connections # # A multiplier of 8 is a sensible default, but you may wish to increase this for instances # running on very performant hardware, or decrease it for instances using v. slow CPUs. # # If you set the multiplier to less than 1, only one open connection will be used regardless of cpu count. # # PLEASE NOTE!!: This setting currently only applies for Postgres. SQLite will always use 1 connection regardless # of what is set here. This behavior will change in future when we implement better SQLITE_BUSY handling. # See https://github.com/superseriousbusiness/gotosocial/issues/1407 for more details. # # Examples: [16, 8, 10, 2] # Default: 8 db-max-open-conns-multiplier: 8 # String. SQLite journaling mode. # SQLite only -- unused otherwise. # If set to empty string, the sqlite default will be used. # See: https://www.sqlite.org/pragma.html#pragma_journal_mode # Examples: [\u0026#34;DELETE\u0026#34;, \u0026#34;TRUNCATE\u0026#34;, \u0026#34;PERSIST\u0026#34;, \u0026#34;MEMORY\u0026#34;, \u0026#34;WAL\u0026#34;, \u0026#34;OFF\u0026#34;] # Default: \u0026#34;WAL\u0026#34; db-sqlite-journal-mode: \u0026#34;WAL\u0026#34; # String. SQLite synchronous mode. # SQLite only -- unused otherwise. # If set to empty string, the sqlite default will be used. # See: https://www.sqlite.org/pragma.html#pragma_synchronous # Examples: [\u0026#34;OFF\u0026#34;, \u0026#34;NORMAL\u0026#34;, \u0026#34;FULL\u0026#34;, \u0026#34;EXTRA\u0026#34;] # Default: \u0026#34;NORMAL\u0026#34; db-sqlite-synchronous: \u0026#34;NORMAL\u0026#34; # Byte size. SQlite cache size. # SQLite only -- unused otherwise. # If set to empty string or zero, the sqlite default (2MiB) will be used. # See: https://www.sqlite.org/pragma.html#pragma_cache_size # Examples: [\u0026#34;0\u0026#34;, \u0026#34;2MiB\u0026#34;, \u0026#34;8MiB\u0026#34;, \u0026#34;64MiB\u0026#34;] # Default: \u0026#34;8MiB\u0026#34; db-sqlite-cache-size: \u0026#34;8MiB\u0026#34; # Duration. SQlite busy timeout. # SQLite only -- unused otherwise. # If set to empty string or zero, the sqlite default will be used. # See: https://www.sqlite.org/pragma.html#pragma_busy_timeout # Examples: [\u0026#34;0s\u0026#34;, \u0026#34;1s\u0026#34;, \u0026#34;30s\u0026#34;, \u0026#34;1m\u0026#34;, \u0026#34;5m\u0026#34;] # Default: \u0026#34;5s\u0026#34; db-sqlite-busy-timeout: \u0026#34;5m\u0026#34; "},{"id":14,"href":"/docs/federation/federating_with_gotosocial/","title":"Federating With Gotosocial","section":"Federation","content":" Federating with GoToSocial # Information on the various (ActivityPub) elements needed to federate with GoToSocial.\nHTTP Signatures # GoToSocial requires all GET and POST requests to ActivityPub s2s endpoints to be accompanied by a valid http signature.\nGoToSocial will also sign all outgoing GET and POST requests that it makes to other servers.\nThis behavior is the equivalent of Mastodon\u0026rsquo;s AUTHORIZED_FETCH / \u0026ldquo;secure mode\u0026rdquo;.\nGoToSocial uses the go-fed/httpsig library for signing outgoing requests, and for parsing and validating the signatures of incoming requests. This library strictly follows the Cavage http signature RFC, which is the same RFC used by other implementations like Mastodon, Pixelfed, Akkoma/Pleroma, etc. (This RFC has since been superceded by the httpbis http signature RFC, but this is not yet widely implemented.)\nIncoming Requests # GoToSocial request signature validation is implemented in internal/federation.\nGoToSocial will attempt to parse the signature using the following algorithms (in order), stopping at the first success:\nRSA_SHA256 RSA_SHA512 ED25519 Outgoing Requests # GoToSocial request signing is implemented in internal/transport.\nWhen assembling signatures:\noutgoing GET requests use (request-target) host date outgoing POST requests use (request-target) host date digest GoToSocial uses the RSA_SHA256 algorithm for signing requests, which is in line with other ActivityPub implementations.\nQuirks # The keyId used by GoToSocial in the Signature header will look something like the following:\nhttps://example.org/users/example_user/main-key This is different from most other implementations, which usually use a fragment (#) in the keyId uri. For example, on Mastodon the user\u0026rsquo;s key would instead be found at:\nhttps://example.org/users/example_user#main-key For Mastodon, the public key of a user is served as part of that user\u0026rsquo;s Actor representation. GoToSocial mimics this behavior when serving the public key of a user, but instead of returning the entire Actor at the main-key endpoint (which may contain sensitive fields), will return only a partial stub of the actor. This looks like the following:\n{ \u0026#34;@context\u0026#34;: [ \u0026#34;https://w3id.org/security/v1\u0026#34;, \u0026#34;https://www.w3.org/ns/activitystreams\u0026#34; ], \u0026#34;id\u0026#34;: \u0026#34;https://example.org/users/example_user\u0026#34;, \u0026#34;preferredUsername\u0026#34;: \u0026#34;example_user\u0026#34;, \u0026#34;publicKey\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;https://example.org/users/example_user/main-key\u0026#34;, \u0026#34;owner\u0026#34;: \u0026#34;https://example.org/users/example_user\u0026#34;, \u0026#34;publicKeyPem\u0026#34;: \u0026#34;-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAzGB3yDvMl+8p+ViutVRG\\nVDl9FO7ZURYXnwB3TedSfG13jyskoiMDNvsbLoUQM9ajZPB0zxJPZUlB/W3BWHRC\\nNFQglE5DkB30GjTClNZoOrx64vLRT5wAEwIOjklKVNk9GJi1hFFxrgj931WtxyML\\nBvo+TdEblBcoru6MKAov8IU4JjQj5KUmjnW12Rox8dj/rfGtdaH8uJ14vLgvlrAb\\neQbN5Ghaxh9DGTo1337O9a9qOsir8YQqazl8ahzS2gvYleV+ou09RDhS75q9hdF2\\nLI+1IvFEQ2ZO2tLk3umUP1ioa+5CWKsWD0GAXbQu9uunAV0VoExP4+/9WYOuP0ei\\nKwIDAQAB\\n-----END PUBLIC KEY-----\\n\u0026#34; }, \u0026#34;type\u0026#34;: \u0026#34;Person\u0026#34; } Remote servers federating with GoToSocial should extract the public key from the publicKey field. Then, they should use the owner field of the public key to further dereference the full version of the Actor, using a signed GET request.\nThis behavior was introduced as a way of avoiding having remote servers make unsigned GET requests to the full Actor endpoint. However, this may change in future as it is not compliant and causes issues. Tracked in this issue.\nAccess Control # GoToSocial uses access control restrictions to protect users and resources from unwanted interactions with remote accounts and instances.\nAs shown in the HTTP Signatures section, GoToSocial requires all incoming GET and POST requests from remote servers to be signed. Unsigned requests will be denied with http code 401 Unauthorized.\nAccess control restrictions are implemented by checking the keyId of the signature (who owns the public/private key pair making the request).\nFirst, the host value of the keyId uri is checked against the GoToSocial instance\u0026rsquo;s list of blocked (defederated) domains. If the host is recognized as a blocked domain, then the http request will immediately be aborted with http code 403 Forbidden.\nNext, GoToSocial will check for the existence of a block (in either direction) between the owner of the public key making the http request, and the owner of the resource that the request is targeting. If the GoToSocial user blocks the remote account making the request, then the request will be aborted with http code 403 Forbidden.\nRequest Throttling \u0026amp; Rate Limiting # GoToSocial applies http request throttling and rate limiting to the ActivityPub API endpoints (inboxes, user endpoints, emojis, etc).\nThis ensures that remote servers cannot flood a GoToSocial instance with spurious requests. Instead, remote servers making GET or POST requests to the ActivityPub API endpoints should respect 429 and 503 http codes, and take account of the retry-after http response header.\nFor more details on request throttling and rate limiting behavior, please see the throttling and rate limiting documents.\nOutbox # GoToSocial implements Outboxes for Actors (ie., instance accounts) following the ActivityPub specification here.\nTo get an OrderedCollection of Activities that an Actor has published recently, remote servers can do a GET request to a user\u0026rsquo;s outbox. The address of this will be something like https://example.org/users/whatever/outbox.\nThe server will return an OrderedCollection of the following structure:\n{ \u0026#34;@context\u0026#34;: \u0026#34;https://www.w3.org/ns/activitystreams\u0026#34;, \u0026#34;id\u0026#34;: \u0026#34;https://example.org/users/whatever/outbox\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;OrderedCollection\u0026#34;, \u0026#34;first\u0026#34;: \u0026#34;https://example.org/users/whatever/outbox?page=true\u0026#34; } Note that the OrderedCollection itself contains no items. Callers must dereference the first page to start getting items. For example, a GET to https://example.org/users/whatever/outbox?page=true will produce something like the following:\n{ \u0026#34;id\u0026#34;: \u0026#34;https://example.org/users/whatever/outbox?page=true\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;OrderedCollectionPage\u0026#34;, \u0026#34;next\u0026#34;: \u0026#34;https://example.org/users/whatever/outbox?max_id=01FJC1Q0E3SSQR59TD2M1KP4V8\u0026amp;page=true\u0026#34;, \u0026#34;prev\u0026#34;: \u0026#34;https://example.org/users/whatever/outbox?min_id=01FJC1Q0E3SSQR59TD2M1KP4V8\u0026amp;page=true\u0026#34;, \u0026#34;partOf\u0026#34;: \u0026#34;https://example.org/users/whatever/outbox\u0026#34;, \u0026#34;orderedItems\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;https://example.org/users/whatever/statuses/01FJC1MKPVX2VMWP2ST93Q90K7/activity\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Create\u0026#34;, \u0026#34;actor\u0026#34;: \u0026#34;https://example.org/users/whatever\u0026#34;, \u0026#34;published\u0026#34;: \u0026#34;2021-10-18T20:06:18Z\u0026#34;, \u0026#34;to\u0026#34;: [ \u0026#34;https://www.w3.org/ns/activitystreams#Public\u0026#34; ], \u0026#34;cc\u0026#34;: [ \u0026#34;https://example.org/users/whatever/followers\u0026#34; ], \u0026#34;object\u0026#34;: \u0026#34;https://example.org/users/whatever/statuses/01FJC1MKPVX2VMWP2ST93Q90K7\u0026#34; } ] } The orderedItems array will contain up to 30 entries. To get more entries beyond that, the caller can use the next link provided in the response.\nNote that in the returned orderedItems, all activity types will be Create. On each activity, the object field will be the AP URI of an original public status created by the Actor who owns the Outbox (ie., a Note with https://www.w3.org/ns/activitystreams#Public in the to field, which is not a reply to another status). Callers can use the returned AP URIs to dereference the content of the notes.\nConversation Threads # Due to the nature of decentralization and federation, it is practically impossible for any one server on the fediverse to be aware of every post in a given conversation thread.\nWith that said, it is possible to do \u0026lsquo;best effort\u0026rsquo; dereferencing of threads, whereby remote replies are fetched from one server onto another, to try to more fully flesh out a conversation.\nGoToSocial does this by iterating up and down the thread of a conversation, pulling in remote statuses where possible.\nLet\u0026rsquo;s say we have two accounts: local_account on our.server, and remote_1 on remote.1.\nIn this scenario, local_account follows remote_1, so posts from remote_1 show up in the home timeline of local_account.\nNow, remote_1 boosts/reblogs a post from a third account, remote_2, residing on server remote.2.\nlocal_account does not follow remote_2, and neither does anybody else on our.server, which means that our.server has not seen this post by remote_2 before.\nWhat GoToSocial will do now, is \u0026lsquo;dereference\u0026rsquo; the post by remote_2 to check if it is part of a thread and, if so, whether any other parts of the thread can be obtained.\nGtS begins by checking the inReplyTo property of the post, which is set when a post is a reply to another post. See here. If inReplyTo is set, GoToSocial derefences the replied-to post. If this post also has an inReplyTo set, then GoToSocial dereferences that too, and so on.\nOnce all of these ancestors of a status have been retrieved, GtS will begin working down through the descendants of posts.\nIt does this by checking the replies property of a derefenced post, and working through replies, and replies of replies. See here.\nThis process of thread dereferencing will likely involve making multiple HTTP calls to different servers, especially if the thread is long and complicated.\nThe end result of this dereferencing is that, assuming the reblogged post by remote_2 was part of a thread, then local_account should now be able to see posts in the thread when they open the status on their home timeline. In other words, they will see replies from accounts on other servers (who they may not have come across yet), in addition to any previous and next posts in the thread as posted by remote_2.\nThis gives local_account a more complete view on the conversation, as opposed to just seeing the reblogged post in isolation and out of context. It also gives local_account the opportunity to discover new accounts to follow, based on replies to remote_2.\nReports / Flags # Like other microblogging ActivityPub implementations, GoToSocial uses the Flag Activity type to communicate user moderation reports to other servers.\nOutgoing # The json of an outgoing GoToSocial Flag looks like the following:\n{ \u0026#34;@context\u0026#34;: \u0026#34;https://www.w3.org/ns/activitystreams\u0026#34;, \u0026#34;actor\u0026#34;: \u0026#34;http://example.org/users/example.org\u0026#34;, \u0026#34;content\u0026#34;: \u0026#34;dark souls sucks, please yeet this nerd\u0026#34;, \u0026#34;id\u0026#34;: \u0026#34;http://example.org/reports/01GP3AWY4CRDVRNZKW0TEAMB5R\u0026#34;, \u0026#34;object\u0026#34;: [ \u0026#34;http://fossbros-anonymous.io/users/foss_satan\u0026#34;, \u0026#34;http://fossbros-anonymous.io/users/foss_satan/statuses/01FVW7JHQFSFK166WWKR8CBA6M\u0026#34; ], \u0026#34;type\u0026#34;: \u0026#34;Flag\u0026#34; } The actor of the Flag will always be the instance actor of the GoToSocial instance on which the Flag was created. This is done to preserve partial anonymity of the user who created the report, in order to prevent them becoming a target for harassment.\nThe content of the Flag is a piece of text submitted by the user who created the Flag, which should give remote instance admins a reason why the report was created. This may be an empty string, or may not be present on the json, if no reason was submitted by the user.\nThe value of the object field of the Flag will either be a string (the ActivityPub id of the user being reported), or it will be an array of strings, where the first entry in the array is the id of the reported user, and subsequent entries are the ids of one or more reported Notes / statuses.\nThe Flag activity is delivered as-is to the inbox (or shared inbox) of the reported user. It is not wrapped in a Create activity.\nIncoming # GoToSocial assumes incoming reports will be delivered as a Flag Activity to the inbox of the account being reported. It will parse the incoming Flag following the same formula that it uses for creating outgoing Flags, with one difference: it will attempt to parse status URLs from both the object field, and from a Misskey/Calckey-formatted content value, which includes in-line status URLs.\nGoToSocial will not assume that the to field will be set on an incoming Flag activity. Instead, it assumes that remote instances use bto to direct the Flag to its recipient.\nA valid incoming Flag Activity will be made available as a report to the admin(s) of the GoToSocial instance that received the report, so that they can take any necessary moderation action against the reported user.\nThe reported user themself will not see the report, or be notified that they have been reported, unless the GtS admin chooses to share this information with them via some other channel.\nFeatured (aka pinned) Posts # GoToSocial allows users to feature (or \u0026lsquo;pin\u0026rsquo;) posts on their profile.\nIn ActivityPub terms, GoToSocial serves these pinned posts as an OrderedCollection at the endpoint indicated in an Actor\u0026rsquo;s featured field. The value of this field will be set to something like https://example.org/users/some_user/collections/featured.\nBy making a signed GET request to this endpoint, remote instances can dereference the featured posts collection, which will return an OrderedCollection with a list of post URIs in the orderedItems field.\nExample of a featured collection of a user who has pinned multiple Notes:\n{ \u0026#34;@context\u0026#34;: \u0026#34;https://www.w3.org/ns/activitystreams\u0026#34;, \u0026#34;id\u0026#34;: \u0026#34;https://example.org/users/some_user/collections/featured\u0026#34;, \u0026#34;orderedItems\u0026#34;: [ \u0026#34;https://example.org/users/some_user/statuses/01GS7VTYH0S77NNXTP6W4G9EAG\u0026#34;, \u0026#34;https://example.org/users/some_user/statuses/01GSFY2SZK9TPCJFQ1WCCPGDRT\u0026#34;, \u0026#34;https://example.org/users/some_user/statuses/01GSCXY70MZCBFMH5EKJW9ENC8\u0026#34; ], \u0026#34;totalItems\u0026#34;: 3, \u0026#34;type\u0026#34;: \u0026#34;OrderedCollection\u0026#34; } Example of a user who has pinned one Note:\n{ \u0026#34;@context\u0026#34;: \u0026#34;https://www.w3.org/ns/activitystreams\u0026#34;, \u0026#34;id\u0026#34;: \u0026#34;https://example.org/users/some_user/collections/featured\u0026#34;, \u0026#34;orderedItems\u0026#34;: [ \u0026#34;https://example.org/users/some_user/statuses/01GS7VTYH0S77NNXTP6W4G9EAG\u0026#34; ], \u0026#34;totalItems\u0026#34;: 1, \u0026#34;type\u0026#34;: \u0026#34;OrderedCollection\u0026#34; } Example with no pinned Notes:\n{ \u0026#34;@context\u0026#34;: \u0026#34;https://www.w3.org/ns/activitystreams\u0026#34;, \u0026#34;id\u0026#34;: \u0026#34;https://example.org/users/some_user/collections/featured\u0026#34;, \u0026#34;orderedItems\u0026#34;: [], \u0026#34;totalItems\u0026#34;: 0, \u0026#34;type\u0026#34;: \u0026#34;OrderedCollection\u0026#34; } Unlike Mastodon and some other implementations, GoToSocial does not serve full Note representations as orderedItems values. Instead, it provides just the URI of each Note, which the remote server can then dereference (or not, if they already have the Note cached locally).\nSome of the URIs served as part of the collection may point to followers-only posts which the requesting Actor won\u0026rsquo;t necessarily have permission to view. Remote servers should make sure to do their own filtering (as with any other post type) to ensure that these posts are only shown to users who are permitted to view them.\nAnother difference between GoToSocial and other server implementations is that GoToSocial does not send updates to remote servers when a post is pinned or unpinned by a user. Mastodon does this by sending Add and Remove Activity types where the object is the post being pinned or unpinned, and the target is the sending Actor\u0026rsquo;s featured collection. While this conceptually makes sense, it is not in line with what the ActivityPub protocol recommends, since the target of the Activity \u0026ldquo;is not owned by the receiving server, and thus they can\u0026rsquo;t update it\u0026rdquo;.\nInstead, to build a view of a GoToSocial user\u0026rsquo;s pinned posts, it is recommended that remote instances simply poll a GoToSocial Actor\u0026rsquo;s featured collection every so often, and add/remove posts in their cached representation as appropriate.\nPost Deletes # GoToSocial allows users to delete posts that they have created. These deletes will be federated out to other instances, which are expected to also delete their local cache of the post.\nOutgoing # When a post is deleted by a GoToSocial user, the server will send a Delete activity out to other instances.\nThe Delete will have the ActivityPub URI of the post set as the value of the Object entry.\nto and cc will be set according to the visibility of the original post, and any users mentioned/replied to by the original post.\nIf the original post was not a direct message, the ActivityPub Public URI will be addressed in to. Otherwise, only mentioned and replied to users will be addressed.\nIn the following example, the \u0026lsquo;admin\u0026rsquo; user deletes a public post of theirs in which the \u0026lsquo;foss_satan\u0026rsquo; user was mentioned:\n{ \u0026#34;@context\u0026#34;: \u0026#34;https://www.w3.org/ns/activitystreams\u0026#34;, \u0026#34;actor\u0026#34;: \u0026#34;http://example.org/users/admin\u0026#34;, \u0026#34;cc\u0026#34;: [ \u0026#34;http://example.org/users/admin/followers\u0026#34;, \u0026#34;http://fossbros-anonymous.io/users/foss_satan\u0026#34; ], \u0026#34;object\u0026#34;: \u0026#34;http://example.org/users/admin/statuses/01FF25D5Q0DH7CHD57CTRS6WK0\u0026#34;, \u0026#34;to\u0026#34;: \u0026#34;https://www.w3.org/ns/activitystreams#Public\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Delete\u0026#34; } In the next example, the \u0026lsquo;1happyturtle\u0026rsquo; user deletes a direct message which was originally addressed to the \u0026rsquo;the_mighty_zork\u0026rsquo; user.\n{ \u0026#34;@context\u0026#34;: \u0026#34;https://www.w3.org/ns/activitystreams\u0026#34;, \u0026#34;actor\u0026#34;: \u0026#34;http://example.org/users/1happyturtle\u0026#34;, \u0026#34;cc\u0026#34;: [], \u0026#34;object\u0026#34;: \u0026#34;http://example.org/users/1happyturtle/statuses/01FN3VJGFH10KR7S2PB0GFJZYG\u0026#34;, \u0026#34;to\u0026#34;: \u0026#34;http://somewhere.com/users/the_mighty_zork\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Delete\u0026#34; } To process a Delete activity coming from a GoToSocial instance, remote instances should check if they have the Object stored according to the provided URI. If they do, they should remove it from their local cache. If not, then no action is required, since they never had the now-deleted post stored in the first place.\nIncoming # GoToSocial processes Delete activities coming in from remote instances as thoroughly as possible in order to respect the privacy of other users.\nWhen a GoToSocial instance receives a Delete, it will attempt to derive the deleted post URI from the Object field. If the Object is just a URI, then this URI will be taken. If the Object is a Note or another type commonly used to represent a post, then the URI will be extracted from it.\nThen, GoToSocial will check if it has a post stored with the given URI. If it does, it will be completely deleted from the database and all user timelines.\nGoToSocial will only delete a post if it can be sure that the original post was owned by the actor that the Delete is attributed to.\nProfile Fields # Like Mastodon and other fediverse softwares, GoToSocial lets users set key/value pairs on their profile; useful for conveying short pieces of information like links, pronouns, age, etc.\nFor the sake of compatibility with other implementations, GoToSocial uses the same schema.org PropertyValue extension that Mastodon uses, present as an attachment array value on actors that have fields set. For example, the below JSON shows an account with two PropertyValue fields:\n{ \u0026#34;@context\u0026#34;: [ \u0026#34;http://joinmastodon.org/ns\u0026#34;, \u0026#34;https://w3id.org/security/v1\u0026#34;, \u0026#34;https://www.w3.org/ns/activitystreams\u0026#34;, \u0026#34;http://schema.org\u0026#34; ], \u0026#34;attachment\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;should you follow me?\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;PropertyValue\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;maybe!\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;age\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;PropertyValue\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;120\u0026#34; } ], \u0026#34;discoverable\u0026#34;: false, \u0026#34;featured\u0026#34;: \u0026#34;http://example.org/users/1happyturtle/collections/featured\u0026#34;, \u0026#34;followers\u0026#34;: \u0026#34;http://example.org/users/1happyturtle/followers\u0026#34;, \u0026#34;following\u0026#34;: \u0026#34;http://example.org/users/1happyturtle/following\u0026#34;, \u0026#34;id\u0026#34;: \u0026#34;http://example.org/users/1happyturtle\u0026#34;, \u0026#34;inbox\u0026#34;: \u0026#34;http://example.org/users/1happyturtle/inbox\u0026#34;, \u0026#34;manuallyApprovesFollowers\u0026#34;: true, \u0026#34;name\u0026#34;: \u0026#34;happy little turtle :3\u0026#34;, \u0026#34;outbox\u0026#34;: \u0026#34;http://example.org/users/1happyturtle/outbox\u0026#34;, \u0026#34;preferredUsername\u0026#34;: \u0026#34;1happyturtle\u0026#34;, \u0026#34;publicKey\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;http://example.org/users/1happyturtle#main-key\u0026#34;, \u0026#34;owner\u0026#34;: \u0026#34;http://example.org/users/1happyturtle\u0026#34;, \u0026#34;publicKeyPem\u0026#34;: \u0026#34;-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtTc6Jpg6LrRPhVQG4KLz\\n2+YqEUUtZPd4YR+TKXuCnwEG9ZNGhgP046xa9h3EWzrZXaOhXvkUQgJuRqPrAcfN\\nvc8jBHV2xrUeD8pu/MWKEabAsA/tgCv3nUC47HQ3/c12aHfYoPz3ufWsGGnrkhci\\nv8PaveJ3LohO5vjCn1yZ00v6osMJMViEZvZQaazyE9A8FwraIexXabDpoy7tkHRg\\nA1fvSkg4FeSG1XMcIz2NN7xyUuFACD+XkuOk7UqzRd4cjPUPLxiDwIsTlcgGOd3E\\nUFMWVlPxSGjY2hIKa3lEHytaYK9IMYdSuyCsJshd3/yYC9LqxZY2KdlKJ80VOVyh\\nyQIDAQAB\\n-----END PUBLIC KEY-----\\n\u0026#34; }, \u0026#34;summary\u0026#34;: \u0026#34;\\u003cp\\u003ei post about things that concern me\\u003c/p\\u003e\u0026#34;, \u0026#34;tag\u0026#34;: [], \u0026#34;type\u0026#34;: \u0026#34;Person\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;http://example.org/@1happyturtle\u0026#34; } For actors that have no PropertyValue fields set, the attachment property will not be set at all. That is, the attachment key value will not be present on the actor (not even as an empty array or null value).\nWhile attachment is not technically an ordered collection, GoToSocial\u0026ndash;again, in line with what other implementations do\u0026ndash;does present attachment PropertyValue fields in the order in which they should to be displayed.\nGoToSocial will also parse PropertyValue fields from remote actors discovered by the GoToSocial instance, to allow them to be displayed to users on the GoToSocial instance.\nGoToSocial allows up to 6 PropertyValue fields by default, as opposed to Mastodon\u0026rsquo;s default 4.\n"},{"id":15,"href":"/docs/getting_started/installation/container/","title":"Container","section":"Installation","content":" Container # This guide walks you through getting GoToSocial up and running using the official container images we publish. In this case we\u0026rsquo;ll be using the Docker runtime directly through Docker Compose together with SQLite as the database.\nYou can also run GoToSocial using a container orchestration system such as Kubernetes or Nomad, but that is beyond the scope of this guide.\nCreate a Working Directory # You need a working directory in which your docker-compose file will be located, and a directory for GoToSocial to store data in, so create these directories with the following command:\nmkdir -p ~/gotosocial/data Now change to the working directory you created:\ncd ~/gotosocial Get the latest docker-compose.yaml # Use wget to download the latest docker-compose.yaml example, which we\u0026rsquo;ll customize for our needs:\nwget https://raw.githubusercontent.com/superseriousbusiness/gotosocial/main/example/docker-compose/docker-compose.yaml Edit the docker-compose.yaml # Because GoToSocial can be configured using Environment Variables, we can skip mounting a config.yaml file into the container, to make our configuration simpler. We just need to edit the docker-compose.yaml file to change a few things.\nFirst open the docker-compose.yaml file in your editor of choice. For example:\nnano docker-compose.yaml Version # If desired, update the GoToSocial Docker image tag to the version of GtS you want to use.\nlatest - the default. This points to the latest stable release of GoToSocial.\nsnapshot - points to whatever code is currently on the main branch. Not guaranteed to be stable, and may often be broken. Use with caution.\nTip\nYou can also replace latest with a specific GoToSocial version number. This is recommended when you want to make sure that you don\u0026rsquo;t update your GoToSocial version by accident, which can cause problems. The list of releases can be found right here, with the newest release at the top. Replace latest in the docker-compose.yaml with the number of the desired release (without the leading v or trailing version name).\nHost # Change the GTS_HOST environment variable to the domain you are running GoToSocial on.\nUser (optional / probably not necessary) # By default, Dockerized GoToSocial runs with Linux user/group 1000:1000, which is fine in most cases. If you want to run as a different user/group, you should change the user field in the docker-compose.yaml accordingly.\nFor example, let\u0026rsquo;s say you created the ~/gotosocial/data directory for a user with id 1001, and group id 1001. If you now try to run GoToSocial without changing the user field, it will get a permissions error trying to open its database file in the directory. In this case, you would have to change the user field of the docker compose file to 1001:1001.\nLetsEncrypt (optional) # If you want to use LetsEncrypt for TLS certificates (https), you should also:\nChange the value of GTS_LETSENCRYPT_ENABLED to \u0026quot;true\u0026quot;. Remove the # before - \u0026quot;80:80\u0026quot; in the ports section. (Optional) Set GTS_LETSENCRYPT_EMAIL_ADDRESS to a valid email address to receive certificate expiry warnings etc. Start GoToSocial # With those small changes out of the way, you can now start GoToSocial with the following command:\ndocker-compose up -d After running this command, you should get an output like:\nCreating network \u0026#34;gotosocial_gotosocial\u0026#34; with the default driver Creating gotosocial ... done If you want to follow the logs of GoToSocial, you can use:\ndocker logs -f gotosocial If everything is OK, you should see something similar to the following:\ntime=2022-04-19T09:48:35Z level=info msg=connected to SQLITE database time=2022-04-19T09:48:35Z level=info msg=MIGRATED DATABASE TO group #1 (20211113114307, 20220214175650, 20220305130328, 20220315160814) func=doMigration time=2022-04-19T09:48:36Z level=info msg=instance account example.org CREATED with id 01EXX0TJ9PPPXF2C4N2MMMVK50 time=2022-04-19T09:48:36Z level=info msg=created instance instance example.org with id 01PQT31C7BZJ1Q2Z4BMEV90ZCV time=2022-04-19T09:48:36Z level=info msg=media manager cron logger: start[] time=2022-04-19T09:48:36Z level=info msg=media manager cron logger: schedule[now 2022-04-19 09:48:36.096127852 +0000 UTC entry 1 next 2022-04-20 00:00:00 +0000 UTC] time=2022-04-19T09:48:36Z level=info msg=started media manager remote cache cleanup job: will run next at 2022-04-20 00:00:00 +0000 UTC time=2022-04-19T09:48:36Z level=info msg=listening on 0.0.0.0:8080 Create your first User # Now that GoToSocial is running, you should create at least a user for yourself. How to do so is documented in our Creating users guide.\nDone # GoToSocial should now be running on your machine! To verify this, open your browser navigate to whatever you set as your GTS_HOST value. You should see the GoToSocial landing page. Well done!\n(Optional) Reverse Proxy # If you want to run other webservers on port 443 or want to add an additional layer of security you might want to use a reverse proxy. We have guides available for a couple of popular open source options and will gladly take pull requests to add more.\n"},{"id":16,"href":"/docs/getting_started/releases/","title":"Releases","section":"Getting Started","content":" Releases # GoToSocial can be installed in a number of different ways. We publish official binary releases as well as container images. A number of third-party packages are maintained by different distributions and some people have created additional deployment tooling to make it easy to deploy GoToSocial yourself.\nBinary releases # We publish binary builds for Linux to our GitHub project:\n32-bit Intel/AMD (i386/x86) 64-bit Intel/AMD (amd64/x86_64) 32-bit ARM (v6 and v7) 64-bit ARM64 For FreeBSD we publish:\n64-bit Intel/AMD (amd64/x86_64) Containers # We also publish container images on the Docker Hub.\nContainers are released for the same Linux platforms as our binary releases, with the exception of 32-bit Intel/AMD.\nThird-party # Some folks have created distribution packages for GoToSocial or additional tooling to aid in installing GoToSocial.\nDistribution packages # These packages are not maintained by GoToSocial, so please direct questions and issues to the repository maintainers (and donate to them!).\nDeployment tools # You can deploy your own instance of GoToSocial with the help of:\nYunoHost GoToSocial Packaging by OniriCorpe. Ansible Playbook (MASH): The playbook supports a many services, including GoToSocial. Documentation GoToSocial Helm Charts: GoToSocial Helm Chart by 0hlov3. "},{"id":17,"href":"/docs/getting_started/reverse_proxy/apache-httpd/","title":"Apache Httpd","section":"Reverse Proxy","content":" Apache HTTP Server # In order to use Apache as a reverse proxy for GoToSocial you\u0026rsquo;ll need to have it installed on your server. If you intend for the Apache instance to also handle TLS, you\u0026rsquo;ll need to provision TLS certificates too.\nApache is packaged for many distributions. It\u0026rsquo;s very likely you can install it with your distribution\u0026rsquo;s package manager. You can also run Apache using a container runtime with the official Apache image that\u0026rsquo;s published to the Docker Hub.\nIn this guide we\u0026rsquo;ll also show how to use certbot to provision the TLS certificates. It too is packaged in many distributions but many distributions tend to ship fairly old versions of certbot. If you run into trouble it may be worth considering using the container image instead.\nConfigure GoToSocial # We\u0026rsquo;re going to have Apache handle LetsEncrypt certificates, so you need to turn off built-in LetsEncrypt support in your GoToSocial config.\nFirst open the file in your text editor:\nsudoedit /gotosocial/config.yaml Then set letsencrypt-enabled: false.\nIf the reverse proxy will be running on the same machine, set the bind-address to \u0026quot;localhost\u0026quot; so that the GoToSocial server is only accessible via loopback. Otherwise it may be possible to bypass your proxy by connecting to GoToSocial directly, which might be undesirable.\nIf GoToSocial is already running, restart it.\nsudo systemctl restart gotosocial.service Or if you don\u0026rsquo;t have a systemd service just restart it manually.\nSet up Apache # Required Apache modules # You need to ensure you have a number of Apache modules installed and enabled. All these modules should ship with your distribution\u0026rsquo;s Apache package, but they may have been split out into separate packages.\nYou can check which modules you have installed with apachectl -M.\nYou\u0026rsquo;ll need to have the following modules loaded:\nproxy_http to proxy HTTP requests to GoToSocial ssl to handle SSL/TLS headers to manipulate HTTP request and response headers rewrite to rewrite HTTP requests md for Lets Encrypt, available since 2.4.30 On Debian, Ubuntu and openSUSE, you can use the a2enmod utility to load any additional modules. For the Red Hat/CentOS family of distributions, you\u0026rsquo;ll need to add a LoadModule directive to your Apache configuration instead.\nTLS with mod_md # Note\nmod_md is only available since Apache 2.4.30 and still considered experimental. It works well enough in practice and is the most convenient method.\nNow we\u0026rsquo;ll configure Apache HTTP Server to serve GoToSocial requests.\nFirst we\u0026rsquo;ll write a configuration for Apache HTTP Server and put it in /etc/apache2/sites-available:\nsudo mkdir -p /etc/apache2/sites-available/ sudoedit /etc/apache2/sites-available/example.com.conf In the above sudoedit command, replace example.com with the hostname of your GoToSocial server.\nThe file you\u0026rsquo;re about to create should look a bit like this:\nMDomain example.com auto MDCertificateAgreement accepted \u0026lt;VirtualHost *:80 \u0026gt; ServerName example.com \u0026lt;/VirtualHost\u0026gt; \u0026lt;VirtualHost *:443\u0026gt; ServerName example.com RewriteEngine On RewriteCond %{HTTP:Upgrade} websocket [NC] RewriteCond %{HTTP:Connection} upgrade [NC] # set to 127.0.0.1 instead of localhost to work around https://stackoverflow.com/a/52550758 RewriteRule ^/?(.*) \u0026#34;ws://127.0.0.1:8080/$1\u0026#34; [P,L] SSLEngine On ProxyPreserveHost On # set to 127.0.0.1 instead of localhost to work around https://stackoverflow.com/a/52550758 ProxyPass / http://127.0.0.1:8080/ ProxyPassReverse / http://127.0.0.1:8080/ RequestHeader set \u0026#34;X-Forwarded-Proto\u0026#34; expr=https \u0026lt;/VirtualHost\u0026gt; or, if you have Apache httpd 2.4.47+, you can get rid of both mod_rewrite and mod_proxy_wstunnel and simplify the whole config to:\nMDomain example.com auto MDCertificateAgreement accepted \u0026lt;VirtualHost *:80 \u0026gt; ServerName example.com \u0026lt;/VirtualHost\u0026gt; \u0026lt;VirtualHost *:443\u0026gt; ServerName example.com SSLEngine On ProxyPreserveHost On # set to 127.0.0.1 instead of localhost to work around https://stackoverflow.com/a/52550758 ProxyPass / http://127.0.0.1:8080/ upgrade=websocket ProxyPassReverse / http://127.0.0.1:8080/ RequestHeader set \u0026#34;X-Forwarded-Proto\u0026#34; expr=https \u0026lt;/VirtualHost\u0026gt; Again, replace occurrences of example.com in the above config file with the hostname of your GtS server. If your domain name is gotosocial.example.com, then gotosocial.example.com would be the correct value.\nYou should also change http://127.0.0.1:8080 to the correct address and port (if it\u0026rsquo;s not on 127.0.0.1:8080) of your GtS server. For example, if you\u0026rsquo;re running GoToSocial on another machine with the local ip of 192.168.178.69 and on port 8080 then http://192.168.178.69:8080/ would be the correct value.\nRewrite* directives are needed to ensure that Websocket streaming connections also work. See the websocket document for more information on this.\nProxyPreserveHost On is essential: It guarantees that the proxy and the GoToSocial speak of the same Server name. If not, GoToSocial will build the wrong authentication headers, and all attempts at federation will be rejected with 401 Unauthorized.\nBy default, apache sets X-Forwarded-For in forwarded requests. To make this and rate limiting work, set the trusted-proxies configuration variable. See the rate limiting and general configuration docs\nSave and close the config file.\nNow we\u0026rsquo;ll need to link the file we just created to the folder that Apache HTTP Server reads configurations for active sites from.\nsudo mkdir /etc/apache2/sites-enabled sudo ln -s /etc/apache2/sites-available/example.com.conf /etc/apache2/sites-enabled/ In the above ln command, replace example.com with the hostname of your GoToSocial server.\nNow check for configuration errors.\nsudo apachectl -t If everything is fine you should get this as output:\nSyntax OK Everything working? Great! Then restart Apache HTTP Server to load your new config file.\nsudo systemctl restart apache2 Now, monitor the logs to see when the new LetsEncrypt certificate arrives (tail -F /var/log/apache2/error.log), and then reload Apache one last time with the above systemctl restart command. After that you should be good to go!\nApache HTTP Server needs to be restart (or reloaded), every time mod_md gets a new certificate; see the module\u0026rsquo;s docs for more information.\nDepending on your version of Apache HTTP Server, you may see the following error: error (specific information not available): acme problem urn:ietf:params:acme:error:invalidEmail: Error creating new account :: contact email \u0026quot;webmaster@localhost\u0026quot; has invalid domain : Domain name needs at least one dot\nIf this happens, you\u0026rsquo;ll need to do one (or all) of the below:\nUpdate /etc/apache2/sites-enabled/000-default.conf and change the ServerAdmin value to a valid email address (then reload Apache HTTP Server). Add the line MDContactEmail your.email.address@whatever.com below the MDomain line in /etc/apache2/sites-available/example.com.conf, replacing your.email.address@whatever.com with a valid email address, and example.com with your GtS host name. TLS with externally managed certificates # Note\nWe have additional documentation on how to provision TLS certificates that also provides links to additional content and tutorials for different distributions that may be good to review.\nIf you prefer to have a manual setup or setting SSL using a different service to manage it (Certbot, etc), then you can use a simpler setup for your Apache HTTP Server.\nFirst we\u0026rsquo;ll write a configuration for Apache HTTP Server and put it in /etc/apache2/sites-available:\nsudo mkdir -p /etc/apache2/sites-available/ sudoedit /etc/apache2/sites-available/example.com.conf In the above sudoedit command, replace example.com with the hostname of your GoToSocial server.\nThe file you\u0026rsquo;re about to create should look initially for both 80 (required) and 443 ports (optional) a bit like this:\n\u0026lt;VirtualHost *:80\u0026gt; ServerName example.com RewriteEngine On RewriteCond %{HTTP:Upgrade} websocket [NC] RewriteCond %{HTTP:Connection} upgrade [NC] # set to 127.0.0.1 instead of localhost to work around https://stackoverflow.com/a/52550758 RewriteRule ^/?(.*) \u0026#34;ws://127.0.0.1:8080/$1\u0026#34; [P,L] ProxyPreserveHost On # set to 127.0.0.1 instead of localhost to work around https://stackoverflow.com/a/52550758 ProxyPass / http://127.0.0.1:8080/ ProxyPassReverse / http://127.0.0.1:8080/ \u0026lt;/VirtualHost\u0026gt; Again, replace occurrences of example.com in the above config file with the hostname of your GtS server. If your domain name is gotosocial.example.com, then gotosocial.example.com would be the correct value.\nYou should also change http://127.0.0.1:8080 to the correct address and port (if it\u0026rsquo;s not on 127.0.0.1:8080) of your GtS server. For example, if you\u0026rsquo;re running GoToSocial on another machine with the local ip of 192.168.178.69 and on port 8080 then http://192.168.178.69:8080/ would be the correct value.\nRewrite* directives are needed to ensure that Websocket streaming connections also work. See the websocket document for more information on this.\nProxyPreserveHost On is essential: It guarantees that the proxy and the GoToSocial speak of the same Server name. If not, GoToSocial will build the wrong authentication headers, and all attempts at federation will be rejected with 401 Unauthorized.\nIn the case of providing an initial setup for the 443 port looking for additional managing by an external tool, you could use default certificates provided by the server which you can find referenced in the default-ssl.conf file at /etc/apache2/sites-available/.\nSave and close the config file.\nNow we\u0026rsquo;ll need to link the file we just created to the folder that Apache HTTP Server reads configurations for active sites from.\nsudo mkdir /etc/apache2/sites-enabled sudo ln -s /etc/apache2/sites-available/example.com.conf /etc/apache2/sites-enabled/ In the above ln command, replace example.com with the hostname of your GoToSocial server.\nNow check for configuration errors.\nsudo apachectl -t If everything is fine you should get this as output:\nSyntax OK Everything working? Great! Then restart Apache HTTP Server to load your new config file.\nsudo systemctl restart apache2 Troubleshooting # If you cannot connect to the site in your browser, the reverse proxy setup doesn\u0026rsquo;t work. Compare the Apache log file (tail -F /var/log/apache2/access.log) with the GoToSocial log file. Requests made must show up in both places. Double check the ProxyPass setting.\nIf you can connect but your posts don\u0026rsquo;t federate and your account cannot be found from elsewhere, check your logs. Federation is broken if you see messages attempting to read your profile (something like level=INFO … method=GET statusCode=401 path=/users/your_username msg=\u0026quot;Unauthorized: …\u0026quot;) or post to your inbox (something like level=INFO … method=POST statusCode=404 path=/your_username/inbox msg=\u0026quot;Not Found: …\u0026quot;). Double check the ProxyPreserveHost setting.\nIf you can connect but you cannot authorize your account in a Mastodon client app, check your headers. Use curl -I https://example.com and look for the Content-Security-Policy header. If your webserver sets it, you might have to unset it. One way to do that is to use Header unset Content-Security-Policy in the Apache site config file (something like example.com.conf).\n"},{"id":18,"href":"/docs/user_guide/settings/","title":"Settings","section":"User Guide","content":" Settings # GoToSocial provides a settings interface where you can update your post settings, add an avatar and header image, write a bio for your account, and so on.\nYou can access the Settings at https://my-instance.example.com/settings with your own GoToSocial instance. It uses the same OAUTH mechanism as normal clients (with scope: admin), and as such can be accessed from anywhere, separately from your own instance, or ran locally. A public installation is available here: https://gts.superseriousbusiness.org/settings.\nYou will be prompted to log in with your email address and password after providing the instance url (auto-filled when using the page that comes with your instance).\nProfile # In the profile section you can change your display name, avatar and header images. You can also choose to enable manually approving follow requests, and opt-in to providing a public RSS feed of your posts.\nSet Avatar / Header # To set an avatar or header image, click on the Browse button in the appropriate section, and use the file browser to select an image.\nCurrently, supported image formats are gif, png, and jpeg/jpg.\nA preview of the image as it will appear on your profile will be shown. If you\u0026rsquo;re happy with your choices, click on the Save profile info button at the bottom of the Profile Info section. If you navigate to your profile and refresh the page, your new avatar / header will be shown. It might take a bit longer for the update to federate out to remote instances.\nSet Displayname and Bio # Your display name is a short handle shown alongside your username on your profile. While your username cannot be changed once it\u0026rsquo;s created, your display name can. Your display name can also contain spaces, capital letters, emojis, and so on. It\u0026rsquo;s a great place to put a nickname, full name, and/or pronouns. For example, if your username is @miranda, your display name could be something like Miranda Priestly (she/her).\nYour bio is a longer text that introduces your account and your self. Your bio is a good place to:\nGive an indication of the sort of things you post about Mention your approximate age / location Link to any of your other accounts or profiles elsewhere Describe your boundaries and preferences when it comes to other people interacting with you Link hashtags that you often use when you post The bio accepts either plain or markdown formatting. This is set by the default post format setting described in User Settings.\nAfter updating your display name and bio, click on the Save profile info button at the bottom of the Profile Info section to save your changes.\nManually Approve Followe Requests / Lock Your Account # At the bottom of the Profile Info section, there\u0026rsquo;s a checkbox to manually approve follow requests.\nWhen this is not checked, new follow requests are approved automatically without your intervention. This is useful for more public-facing accounts or cases where you don\u0026rsquo;t really post anything sensitive or private.\nWhen it is checked, you must manually approve new follow requests, and you can deny follow requests from accounts you don\u0026rsquo;t want to follow you. This is useful for private accounts where you post personal things to followers only.\nThis option is often referred to on the fediverse as \u0026ldquo;locking\u0026rdquo; your account.\nAfter ticking or unticking the checkbox, be sure to click on the Save profile info button at the bottom to save your new settings.\nEnable RSS feed of Public posts # RSS feeds for users are disabled by default, but can be opted into with this checkbox. For more information see RSS. It\u0026rsquo;s important to note that this by-passes follow requests, allowing anyone to get updates on your public posts. This feed only includes posts set as \u0026lsquo;Public\u0026rsquo; (see Privacy Settings.\nCustom CSS # If enabled on your instance, Custom CSS allows you to theme the way your profile looks when visited through a browser. When this setting is not enabled, the field is hidden.\nSettings # In the \u0026lsquo;Settings\u0026rsquo; section, you can set various defaults for new posts.\nThe default post language setting allows you to indicate to other fediverse users which language your posts are usually written in. This is helpful for fediverse users who speak (for example) Korean, and would prefer to filter out posts written in other languages.\nThe default post privacy setting allows you to set the default privacy for new posts. This is useful when you generally prefer to post public or followers-only, but you don\u0026rsquo;t want to have to remember to set the privacy every time you post. Remember, this is only the default: no matter what you set here, you can still set the privacy individually for new posts if desired. For more information on post privacy settings, see the page on Posts.\nThe default post format setting allows you to set which text interpreter should be used when parsing your posts.\nThe plain (default) setting provides standard post formatting, similar to what many other fediverse servers use. This is great for general purpose posting: you can write short, twitter-style posts, or multi-paragraph essays, insert links, and mention other accounts using their username.\nThe markdown setting indicates that your posts should be parsed as Markdown, which is a markup language that gives you more options for customizing the layout and appearance of your posts. For more information on the differences between plain and markdown post formats, see the posts page.\nWhen you are finished updating your post settings, remember to click the Save post settings button at the bottom of the section to save your changes.\nPassword Change # You can use the Password Change section of the User Settings Panel to set a new password for your account.\nFor more information on the way GoToSocial manages passwords, please see the Password management document.\nAdmins # If your account has been promoted to admin, this interface will also show sections related to admin actions, see Admin Settings.\n"},{"id":19,"href":"/docs/advanced/outgoing-proxy/","title":"Outgoing HTTP proxy","section":"Advanced","content":" Outgoing HTTP proxy # GoToSocial supports canonical environment variables for configuring the use of an HTTP proxy for outgoing requets:\nHTTP_PROXY HTTPS_PROXY NO_PROXY The lowercase versions of these environment variables are also recognised. HTTPS_PROXY takes precedence over HTTP_PROXY for https requests.\nThe environment values may be either a complete URL or a host[:port], in which case the \u0026ldquo;http\u0026rdquo; scheme is assumed. The schemes \u0026ldquo;http\u0026rdquo;, \u0026ldquo;https\u0026rdquo;, and \u0026ldquo;socks5\u0026rdquo; are supported.\nsystemd # When running with systemd, you can add the necessary environment variables using the Environment option in the Service section.\nHow to do so is documented in the systemd.exec manual.\nContainer runtime # Environment variables can be set in the compose file under the environment key. You can also pass them on the CLI to Docker or Podman\u0026rsquo;s run command with -e KEY=VALUE or --env KEY=VALUE.\n"},{"id":20,"href":"/docs/api/ratelimiting/","title":"Request Rate Limiting","section":"API","content":" Request Rate Limiting # To mitigate abuse + scraping of your instance, IP-based HTTP rate limiting is in place.\nThere are separate rate limiters configured for different groupings of endpoints. In other words, being rate limited for one part of the API doesn\u0026rsquo;t necessarily mean you will be rate limited for other parts. Each entry in the following list has a separate rate limiter:\n/users/* and /emoji/* - ActivityPub (s2s) endpoints. /auth/* and /oauth/* - Sign in + OAUTH token requests. /fileserver/* - Media attachments, emojis, etc. /nodeinfo/* - NodeInfo endpoint(s). /.well-known/* - webfinger + nodeinfo requests. By default, each rate limiter allows a maximum of 300 requests in a 5 minute time window: 1 request per second per client IP address.\nEvery response will include the current status of the rate limit with the following headers:\nX-Ratelimit-Limit: maximum number of requests allowed per time period. X-Ratelimit-Remaining: number of remaining requests that can still be performed within. X-Ratelimit-Reset: unix timestamp indicating when the rate limit will reset. In case the rate limit is exceeded, an HTTP 429 Too Many Requests error is returned to the caller.\nRate Limiting FAQs # My rate limit keeps being exceeded! Why? # If you find that your rate limit is regularly being exceeded (both for yourself and other callers) during normal use of your instance, it may be that GoToSocial can\u0026rsquo;t tell the clients apart by IP address. You can investigate this by viewing the logs of your instance. If (almost) all logged IP addresses appear to be the same IP address (something like 172.x.x.x), then the rate limiting will cause problems.\nThis happens when your server is running inside NAT (port forwarding), or behind an HTTP proxy without the correct configuration, causing your instance to see all incoming IP addresses as the same address: namely, the IP address of your reverse proxy or gateway. This means that all incoming requests are sharing the same rate limit, rather than being split correctly per IP.\nIf you are using an HTTP proxy then it\u0026rsquo;s likely that your trusted-proxies is not correctly configured. If this is the case, try adding the IP address of your reverse proxy to the list of trusted-proxies, and restarting your instance.\nIf you don\u0026rsquo;t have an HTTP proxy, then it\u0026rsquo;s likely caused by NAT. In this case you should disable rate limiting altogether.\nCan I configure the rate limit? Can I just turn it off? # Yes! Set advanced-rate-limit-requests: 0 in the config.\n"},{"id":21,"href":"/docs/admin/backup_and_restore/","title":"Backup and Restore","section":"Admin","content":" Backup and Restore # As the GoToSocial database contains the instance as well as all user signing keys it is vital to back it up. If you lose these keys you\u0026rsquo;ll never be able to federate from this domain again. Don\u0026rsquo;t forget to also encrypt your backups in order to keep the data safe at rest.\nAside from disaster recovery, there are other good reasons to keep backups. Some potential scenarios for you to consider:\nYou want to close down your instance but you might create it again later and you don\u0026rsquo;t want to break federation. You need to migrate to a different database for some reason (Postgres =\u0026gt; SQLite or vice versa). You\u0026rsquo;re about to hack around on your instance and you want to make a quick backup so you don\u0026rsquo;t lose everything if you mess up. What to backup # Database # Most backup tools have built-in support for common databases like PostgreSQL and SQLite. Ensure you review their documentation first as they often spell out certain considerations and conditions that need to be met for backups to complete and restore successfully.\nMedia # Local media should be backed up. You can use the GoToSocial CLI to list all media files that belong to your instance and its users.\nRemote media does not have to be backed up. This can be a good way to keep the size of your backups down. Remote media will be fetched from the origin instance, much like how it\u0026rsquo;ll be fetched again if it got pruned due to media retention.\nHow to backup # You can go about this a few different ways:\nImaging the VMs/machines your instance and database runs on Dumping GoToSocial\u0026rsquo;s state with the CLI Backing up database and media files Backup software Though setting up backup software can be a bit more work, it\u0026rsquo;s by far the best option. It ensures consistent and encrypted backups and can protect you against filesystem corruption in a way that taking disk snapshots and copying the raw database and media files won\u0026rsquo;t.\nImage your disk # If you\u0026rsquo;re running GoToSocial on a VPS (a remote machine in the cloud), arguably the easiest way to preserve all of your database entries and media is to image the disk attached to the VPS. This will preserve the whole disk. Many VPS providers offer the option of automatically creating backups on a timer, so you\u0026rsquo;ll always be able to restore if your data is lost.\nAdvantages:\nRelatively easy to do. Easy to automate (depending on your vps). Keep complete media + database entries. Disadvantages:\nCan cost extra depending on your VPS. Will probably also preserve stuff you don\u0026rsquo;t need, from other programs running on the same machine. Vendor lock-in, difficult to move the data around. Use the GoToSocial CLI # The GoToSocial CLI tool also provides commands for backing up and restoring data from your instance, which will preserve the bare-minimum necessary data to backup and restore your instance, without breaking federation with other instances.\nWhat will be kept:\nAll local account entries, including private and public keys. Followed/following remote accounts, including public keys. Follows/follow requests. Domain blocks. Account blocks. Account suspensions. User + password entries, email addresses. What will be dropped:\nAll statuses. Media. Faves. Bookmarks. Pins. Applications. Tokens. The backup file produced will be in the form of a line-separated series of JSON objects (not a JSON array!). For example:\n{\u0026#34;type\u0026#34;:\u0026#34;account\u0026#34;,\u0026#34;id\u0026#34;:\u0026#34;01F8MH5NBDF2MV7CTC4Q5128HF\u0026#34;,\u0026#34;createdAt\u0026#34;:\u0026#34;2021-08-31T12:00:53.985645Z\u0026#34;,\u0026#34;username\u0026#34;:\u0026#34;1happyturtle\u0026#34;,\u0026#34;locked\u0026#34;:true,\u0026#34;language\u0026#34;:\u0026#34;en\u0026#34;,\u0026#34;uri\u0026#34;:\u0026#34;http://localhost:8080/users/1happyturtle\u0026#34;,\u0026#34;url\u0026#34;:\u0026#34;http://localhost:8080/@1happyturtle\u0026#34;,\u0026#34;inboxURI\u0026#34;:\u0026#34;http://localhost:8080/users/1happyturtle/inbox\u0026#34;,\u0026#34;outboxURI\u0026#34;:\u0026#34;http://localhost:8080/users/1happyturtle/outbox\u0026#34;,\u0026#34;followingUri\u0026#34;:\u0026#34;http://localhost:8080/users/1happyturtle/following\u0026#34;,\u0026#34;followersUri\u0026#34;:\u0026#34;http://localhost:8080/users/1happyturtle/followers\u0026#34;,\u0026#34;featuredCollectionUri\u0026#34;:\u0026#34;http://localhost:8080/users/1happyturtle/collections/featured\u0026#34;,\u0026#34;actorType\u0026#34;:\u0026#34;Person\u0026#34;,\u0026#34;privateKey\u0026#34;:\u0026#34;-----BEGIN RSA PRIVATE KEY-----\\nMIIEowIBAAKCAQEAzLP7oyyR+BU9ejn0CN9K+WpX3L37pxUcCgZAGH5lf3cGPZjz\\nausfsFME94OjVyzw3K5M2beDkZ4E+Fak46NLtakLB1yovy9jKtj4Y4txHoMvRJLz\\neUPxdfeXtpx2d3FDj++Uq4DEE0BhbePXhTGJWaNdC9MQmWKghJnCS5mrnFkdpEFx\\njUz9l0UHl2Z4wppxPdpt7FyevcdfKqzGsAA3BxTM0dg47ZJWjtcvfCiSYpAKFNJY\\nfKhKn9T3ezZgrLsF+o0IpD23KxWe1X4d5lgJRU9T4FmLmbvyJKUnfgYXbSEvLUcq\\n79WbhgRcWwxWubjmWXgPGwzULVhhpYlwd2Cv3wIDAQABAoIBAGF+MxHjD15VV2NY\\nKKb1GjMx98i1Xx6TijgoA+zmfha4LGu35e79Lql+0LXFp0zEpa6lAQsMQQhgd0OD\\nmKKmSk+pxAvskJ4FxrhIf/yBFA4RMrj5OCaAOocRtdsOJ8n5UtFBrNAF0tzMY9q/\\nkgzoq97aVF1mV9iFxaeBx6zT8ozSdqBq1PK/3w1dVg89S5tfKYc7Q0lQ00SfsTnd\\niTDClKyqurebo9Pt6M7gXavgg3tvBlmwwr6XHs34Leng3oiN9mW8DVzaBMPzn+rE\\nxF2eqs3v9vVpj8es88OwCh5P+ff8vJYvhu7Fcr/bJ8BItBQwfb8QBDATg/MXU2BI\\n2ssW6AECgYEA4wmIyYGeu9+hzDa/J3Vh8GnlVNUCohHcChQdOsWsFXUgpVlUIHrX\\neKHn42vD4Rzy52/YzJts4NkZTM9sL+kEXIEcpMG/S9xIIud7U0m/hMSAlmnJK/9j\\niEXws3o4jo0E77jnRcBdIjpG4K5Eekm0DSR3SFhtZfEdN2DWPvu7K98CgYEA5tER\\n/qJwFMc51AobMU87ZjXON7hI2U1WY/pVF62jSl0IcSsnj2riEKWLrs+GRG+HUg+U\\naFSqAHcxaVHA0h0AYR8RopAhDdVKh0kvB8biLo+IEzNjPv2vyn0yRN5YSfXdGzyJ\\nUjVU6kWdQOwmzy86nHgFaqEx7eofHIaGZzJK/AECgYEAu2VNQHX63TuzQuoVUa5z\\nzoq5vhGsALYZF0CO98ndRkDNV22qIL0ESQ/qZS64GYFZhWouWoQXlGfdmCbFN65v\\n6SKwz9UT3rvN1vGWO6Ltr9q6AG0EnYpJT1vbV2kUcaU4Y94NFue2d9/+TMnKv91B\\n/m8Q/efvNGuWH/WQIaCKV6UCgYBz89WhYMMDfS4M2mLcu5vwddk53qciGxrqMMjs\\nkzsz0Va7W12NS7lzeWaZlAE0gf6t98urOdUJVNeKvBoss4sMP0phqxwf0eWV3ur0\\ncjIQB+TpGGikLVdRVuGY/UXHKe9AjoHBva8B3aTpB3lbnbNJBXZbIc1uYq3sa5w7\\nXWWUAQKBgH3yW73RRpQNcc9hTUssomUsnQQgHxpfWx5tNxqod36Ytd9EKBh3NqUZ\\nvPcH6gdh7mcnNaVNTtQOHLHsbPfBK/pqvb3MAsdlokJcQz8MQJ9SGBBPY6PaGw8z\\nq/ambaQykER6dwlXTIlU20uXY0bttOL/iYjKmgo3vA66qfzS6nsg\\n-----END RSA PRIVATE KEY-----\\n\u0026#34;,\u0026#34;publicKey\u0026#34;:\u0026#34;-----BEGIN RSA PUBLIC KEY-----\\nMIIBCgKCAQEAzLP7oyyR+BU9ejn0CN9K+WpX3L37pxUcCgZAGH5lf3cGPZjzausf\\nsFME94OjVyzw3K5M2beDkZ4E+Fak46NLtakLB1yovy9jKtj4Y4txHoMvRJLzeUPx\\ndfeXtpx2d3FDj++Uq4DEE0BhbePXhTGJWaNdC9MQmWKghJnCS5mrnFkdpEFxjUz9\\nl0UHl2Z4wppxPdpt7FyevcdfKqzGsAA3BxTM0dg47ZJWjtcvfCiSYpAKFNJYfKhK\\nn9T3ezZgrLsF+o0IpD23KxWe1X4d5lgJRU9T4FmLmbvyJKUnfgYXbSEvLUcq79Wb\\nhgRcWwxWubjmWXgPGwzULVhhpYlwd2Cv3wIDAQAB\\n-----END RSA PUBLIC KEY-----\\n\u0026#34;,\u0026#34;publicKeyUri\u0026#34;:\u0026#34;http://localhost:8080/users/1happyturtle#main-key\u0026#34;} {\u0026#34;type\u0026#34;:\u0026#34;account\u0026#34;,\u0026#34;id\u0026#34;:\u0026#34;01F8MH0BBE4FHXPH513MBVFHB0\u0026#34;,\u0026#34;createdAt\u0026#34;:\u0026#34;2021-09-08T10:00:53.985634Z\u0026#34;,\u0026#34;username\u0026#34;:\u0026#34;weed_lord420\u0026#34;,\u0026#34;locked\u0026#34;:true,\u0026#34;language\u0026#34;:\u0026#34;en\u0026#34;,\u0026#34;uri\u0026#34;:\u0026#34;http://localhost:8080/users/weed_lord420\u0026#34;,\u0026#34;url\u0026#34;:\u0026#34;http://localhost:8080/@weed_lord420\u0026#34;,\u0026#34;inboxURI\u0026#34;:\u0026#34;http://localhost:8080/users/weed_lord420/inbox\u0026#34;,\u0026#34;outboxURI\u0026#34;:\u0026#34;http://localhost:8080/users/weed_lord420/outbox\u0026#34;,\u0026#34;followingUri\u0026#34;:\u0026#34;http://localhost:8080/users/weed_lord420/following\u0026#34;,\u0026#34;followersUri\u0026#34;:\u0026#34;http://localhost:8080/users/weed_lord420/followers\u0026#34;,\u0026#34;featuredCollectionUri\u0026#34;:\u0026#34;http://localhost:8080/users/weed_lord420/collections/featured\u0026#34;,\u0026#34;actorType\u0026#34;:\u0026#34;Person\u0026#34;,\u0026#34;privateKey\u0026#34;:\u0026#34;-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEAzsCcTHzwIgpWKVvut0Q/t1bFwnbj9hO6Ic6k0KXCXbf6qi0b\\nMIyLRZr8DS61mD+SPSO2QKEL647xxyW2D8YGtwN6Cc6MpWETsWJkNtS8t7tDL//P\\nceYpo5LiqKgn0TXj0Pq8Lvb7rqpH8QJ2EVm14SK+elhKZW/Bi5ZOEwfL8pw6EHI4\\nus6VxCNQ099dksu++kbdD7zxqEKnk/4zOttYt0whlVrxzkibTjlKdlSlTYpIstU+\\nfNyYVE0xWvrn+yF7jVlEwZYOFGfZbpELadrdOr2k1hvAk7upkrpKmLqYfwqD/xPc\\nqwtx0iS6AEnmkSiTcAvju5vLkoLFRU7Of4AZ2wIDAQABAoIBAEAA4GHNS4k+Ke4j\\nx4J0XkUjV5UbuPY0pSpSDjOJHOJmUfLcg85Ds9mYYO6zxwOaqmrC42ieclI5rh84\\nTWQUqX9+VAk1J9UKeE4xZ1SSBtnZ3rK9PjrERZ+dmQ0dATaCuEO5Wwgu7Trk++Bg\\nIqy8WNGZL94v9tfwALp1jTXW9AvmQoNdCFBP62vcmYW4YLjnggxLCFTA8YKfdePa\\nTuxxY6uLkeBbxzWpbRU2+bmlxd5OnCkiRSMHIX+6JdtCu2JdWpUTCnWrFi2n1TZz\\nZQx9z5rvowK1O785jGMFum5vBWpjIU8sJcXmPjGMU25zzmrhzfmkJsTXER3CXoUo\\nSqSPqgECgYEA78OR7bY5KKQQ7Lyz6dru4Fct5P/OXTQoOg5aS7TKb95LVWj+TANn\\n5djwIbLmAUV30z0Id9VgiZOL0Hny8+3VV9eU088Z408pAy5WQrL3dB8tZLUJSq5c\\n5k6X15/VjWOOZKppDxShzoV3mcohrnwVwkv4fhPFQQOJJBYz6xurWs0CgYEA3MDE\\nsDMd9ahzO0dl62ynojkkA8ZTcn2UdyvLpGj9UxT5j9vWF3CfqitXgcpNiVSIbxqQ\\nbo/pBch7c/2Xakv5zkdcrJj5/6gyr+m1/tK2o7+CjDaSE4SYwufXx+qkl03Zpyzt\\nKdOi7Hz/b2tdjump7ECEDE45mG2ea8oSnPgXl0cCgYBkGGFzu/9g2B24t47ksmHH\\nhp3CXIjqoDurARLxSCi7SzJoFc0ULtfRPSAC8YzUOwwrQ++lF4+V3+MexcqHy2Kl\\nqXqYcn18SC/3BAE/Fzf3Yoyw3mNiqihefbEmc7PTsxxfKkVx5ksmzNGBgsFM9sCe\\nvNigyeAvpCo8xogmPwbqgQKBgE34mIBTzcUzFmBdu5YH7r3RyPK8XkUWLhZZlbgg\\njTmHMw6o61mkIgENBf+F4RUckoQLsfAbTIcKZPB3JcAZzcYaVpVwAv1V/3E671lu\\nO6xivE2iCL50GzDcis7GBhSbHsF5kNsxMV6uV9qW5ZjQ13/m2b0u9BDuxwHzgdeH\\nmW2JAoGAIUOYniuEwdygxWVnYatpr3NPjT3BOKoV5i9zkeJRu1hFpwQM6vQ4Ds5p\\nGC5vbMKAv9Cwuw62e2HvqTun3+U2Y5Uived3XCpgM/50BFrFHCfuqXEnu1bEzk5z\\n9mIhp8uXPxzC5N7tRQfb3/eU1IUcb6T6ksbr2P81z0j03J55erg=\\n-----END RSA PRIVATE KEY-----\\n\u0026#34;,\u0026#34;publicKey\u0026#34;:\u0026#34;-----BEGIN RSA PUBLIC KEY-----\\nMIIBCgKCAQEAzsCcTHzwIgpWKVvut0Q/t1bFwnbj9hO6Ic6k0KXCXbf6qi0bMIyL\\nRZr8DS61mD+SPSO2QKEL647xxyW2D8YGtwN6Cc6MpWETsWJkNtS8t7tDL//PceYp\\no5LiqKgn0TXj0Pq8Lvb7rqpH8QJ2EVm14SK+elhKZW/Bi5ZOEwfL8pw6EHI4us6V\\nxCNQ099dksu++kbdD7zxqEKnk/4zOttYt0whlVrxzkibTjlKdlSlTYpIstU+fNyY\\nVE0xWvrn+yF7jVlEwZYOFGfZbpELadrdOr2k1hvAk7upkrpKmLqYfwqD/xPcqwtx\\n0iS6AEnmkSiTcAvju5vLkoLFRU7Of4AZ2wIDAQAB\\n-----END RSA PUBLIC KEY-----\\n\u0026#34;,\u0026#34;publicKeyUri\u0026#34;:\u0026#34;http://localhost:8080/users/weed_lord420#main-key\u0026#34;} {\u0026#34;type\u0026#34;:\u0026#34;account\u0026#34;,\u0026#34;id\u0026#34;:\u0026#34;01F8MH17FWEB39HZJ76B6VXSKF\u0026#34;,\u0026#34;createdAt\u0026#34;:\u0026#34;2021-09-05T10:00:53.985641Z\u0026#34;,\u0026#34;username\u0026#34;:\u0026#34;admin\u0026#34;,\u0026#34;locked\u0026#34;:true,\u0026#34;language\u0026#34;:\u0026#34;en\u0026#34;,\u0026#34;uri\u0026#34;:\u0026#34;http://localhost:8080/users/admin\u0026#34;,\u0026#34;url\u0026#34;:\u0026#34;http://localhost:8080/@admin\u0026#34;,\u0026#34;inboxURI\u0026#34;:\u0026#34;http://localhost:8080/users/admin/inbox\u0026#34;,\u0026#34;outboxURI\u0026#34;:\u0026#34;http://localhost:8080/users/admin/outbox\u0026#34;,\u0026#34;followingUri\u0026#34;:\u0026#34;http://localhost:8080/users/admin/following\u0026#34;,\u0026#34;followersUri\u0026#34;:\u0026#34;http://localhost:8080/users/admin/followers\u0026#34;,\u0026#34;featuredCollectionUri\u0026#34;:\u0026#34;http://localhost:8080/users/admin/collections/featured\u0026#34;,\u0026#34;actorType\u0026#34;:\u0026#34;Person\u0026#34;,\u0026#34;privateKey\u0026#34;:\u0026#34;-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEAxr2e1pqfLwwUCwHUdx56Mxnq5Kzc2EBwqN6jIPjiqVaG5eVq\\nhujDhdqwMq0hnpBSPzLnvjiOtEh7Bwhx0MjuC/GRPTM9oNWPYD4PcjX5ofrubyLR\\nBI97qD0SbyzUWzeyBi6R5tpW8LK1MJXNbnYlz5WouEiC4mY77ulri0EN2hCq80wg\\nfvtEjEvELcKBqIytKH3rutIzfAyqXD7LSQ8UDoNh9GHyIfq8Zj32gWVk2MiPI3+G\\n8kQJDmD8CKEasnrGVdSJBQUg3xDAtOibPXLP+07AIsKYMon35hVNvQNQPS7ru/Bk\\nRhhGp2R44zqj6L9mxYbSrhFAaKDedu8oVe1aLQIDAQABAoIBAGK0aIADOU4ffJDe\\n7sveiih5Fc1PATwx/QIR2QkWM1SREdx6LYclcX44V8xDanAbE44p1SkHY/CsEtYy\\nXnyoXnn2FwFDQrdveY7+I6PApOPLAcKWkyLltC+hbVdj92/6YGNrm7EA/a77wruH\\nmwjiivLnTG2CLecNiXSl33DA9YU4Yz+2Tza3IpTdjt8c/dz/BKKaxaWV+i9ew5VR\\nioo5v51B+J8PrneCM/p8LGiLV148Njr0JqV6eFy1JuzItYMYdc3Fp+YnMzsuMZEA\\n1akMcoln/ucVJyOFnCn6jx47nIoPZLl1KxX3aRDRfvrejm6W4yAkkTmR5voSRqax\\njPL3rI0CgYEA9Acu4TO8xJ3uGaUad0N9JTYQVSmtAaE/g+df9LGMSzoj8X95S4xE\\nQsGPqNGDm2VWADJjK4P05twZ+LfsfSKQ86wbp4/gbgnXpqB1P5Lty/B7KxiTnNwt\\nwb1WGWTCukxfUSL3PRyf8uylkrg72RxKiBx4zKO3WVSLWOZWrFtn0qMCgYEA0H2p\\nJs9Nv20ADOOX5tQ7+ruS6/B/Fhyj5fhflSYCAtOW7aME7+zQKJyqSQZ4b2Aub3Tp\\nGIaUbRIGzjHyuTultFFWvjU3H5aI/0g1G9WKaBhNkyTIYVmMKtYyhXNvouWing8x\\noraWx8TTBP8Cdnnk+QgdR2fpug8cghKupp5wvO8CgYA1JFtRL7MsHjh73TimQExA\\njkWARlMmx7bNQtXis8eZmk+5h8kiaqly4DQoz3eZn7fa0x5Fm7b5j3UYdPVLSvvG\\nFPTwyKRXUk1kPA1MivK+NuCbwf5jao+MYW8emJLPf1JCmRq+dD1g6aglC3n9Dewt\\nOAYWipCjI4Y1FfRKFJ3HgQKBgEAb47+DTyzln3ZXJYZdDHR06SCTuwBZnixAy2NZ\\nZJTp6yb3UbVU5E0Yn2QFEVNuB9lN4b8g4tMHEACnazN6G+HugPXL9z9HUqjs0yfT\\n6dNIZdIxJUyJ9IfXhYFzlYhJhE+F7IVUD9kttJV8tI0pvja1QAuM8Fm9+84jYIDr\\nh08RAoGAMYbjKHbtejcHBwt1kIcSss0cDmlZbBleJo8tdmdg4ndf5GE9N4/EL7tq\\nm2zYSfr7OVdnOwRhoO+xF/6d1L7+TR1wz+k2fuMsI71aM5Ocp1nYTutjIkBTcldZ\\nZzvjOgZWng5icuRLQQiDSKG5uqazqL/xGXkijb4kp4WW6myWY3c=\\n-----END RSA PRIVATE KEY-----\\n\u0026#34;,\u0026#34;publicKey\u0026#34;:\u0026#34;-----BEGIN RSA PUBLIC KEY-----\\nMIIBCgKCAQEAxr2e1pqfLwwUCwHUdx56Mxnq5Kzc2EBwqN6jIPjiqVaG5eVqhujD\\nhdqwMq0hnpBSPzLnvjiOtEh7Bwhx0MjuC/GRPTM9oNWPYD4PcjX5ofrubyLRBI97\\nqD0SbyzUWzeyBi6R5tpW8LK1MJXNbnYlz5WouEiC4mY77ulri0EN2hCq80wgfvtE\\njEvELcKBqIytKH3rutIzfAyqXD7LSQ8UDoNh9GHyIfq8Zj32gWVk2MiPI3+G8kQJ\\nDmD8CKEasnrGVdSJBQUg3xDAtOibPXLP+07AIsKYMon35hVNvQNQPS7ru/BkRhhG\\np2R44zqj6L9mxYbSrhFAaKDedu8oVe1aLQIDAQAB\\n-----END RSA PUBLIC KEY-----\\n\u0026#34;,\u0026#34;publicKeyUri\u0026#34;:\u0026#34;http://localhost:8080/users/admin#main-key\u0026#34;} {\u0026#34;type\u0026#34;:\u0026#34;account\u0026#34;,\u0026#34;id\u0026#34;:\u0026#34;01F8MH1H7YV1Z7D2C8K2730QBF\u0026#34;,\u0026#34;createdAt\u0026#34;:\u0026#34;2021-09-06T10:00:53.985643Z\u0026#34;,\u0026#34;username\u0026#34;:\u0026#34;the_mighty_zork\u0026#34;,\u0026#34;locked\u0026#34;:true,\u0026#34;language\u0026#34;:\u0026#34;en\u0026#34;,\u0026#34;uri\u0026#34;:\u0026#34;http://localhost:8080/users/the_mighty_zork\u0026#34;,\u0026#34;url\u0026#34;:\u0026#34;http://localhost:8080/@the_mighty_zork\u0026#34;,\u0026#34;inboxURI\u0026#34;:\u0026#34;http://localhost:8080/users/the_mighty_zork/inbox\u0026#34;,\u0026#34;outboxURI\u0026#34;:\u0026#34;http://localhost:8080/users/the_mighty_zork/outbox\u0026#34;,\u0026#34;followingUri\u0026#34;:\u0026#34;http://localhost:8080/users/the_mighty_zork/following\u0026#34;,\u0026#34;followersUri\u0026#34;:\u0026#34;http://localhost:8080/users/the_mighty_zork/followers\u0026#34;,\u0026#34;featuredCollectionUri\u0026#34;:\u0026#34;http://localhost:8080/users/the_mighty_zork/collections/featured\u0026#34;,\u0026#34;actorType\u0026#34;:\u0026#34;Person\u0026#34;,\u0026#34;privateKey\u0026#34;:\u0026#34;-----BEGIN RSA PRIVATE KEY-----\\nMIIEowIBAAKCAQEApBmF8U+or+E0mgUMH3LE4uRIWzeV9rhYnvSMm9OpOsxwJiss\\n5mEA/NtPHvQlq2UwrqXX89Wvu94K9EzZ4VyWYQGdxaiPpt17vRqUfsHUnXkY0pvC\\nC9zt/aNlJtdt2xm+7PTC0YQd4+E1FX3aaoUPJL8MXzNlpJzaUtuwLZe1iBmFfatZ\\nFHptEgc4nlf6TNLTzj3Yw1/7zIGVS8Vi7VquHc0Xo8dRiL2RxCGzLWnwL6GlrxY1\\ntMhsUg467XeoiwegFCpcIhAhPFREKoTnCEksL/N0rpXl7m6CAy5uqBGs5mMXnXlq\\nefr58l0j2dU6zc60LCHH9TJC+roXsKJhy9sx/QIDAQABAoIBAFa+UypbFG1cW2Tr\\nNBxPm7ngOEtXl8MicV4dIVKh0TwOo13ZxtNFBbOj7jALmPn/9HrtmbkABPQHDL1U\\n/nt9aNSAeTjpwH3RaD5vFX3n0g8n2zJBOZLxxzAjNi4RBLYj5uP1AiKkdvRlsJza\\nuSFDkty2zMBqN9mLPHE+RePj5Qa6tjYfIQqQzu/+YnYMlXHoC2yHNKsvz6S5FhVj\\nv5zATv2JlJQH3RSmhuPOah73iQnKCLzYYEAHleawKrCg/rZ3ht37Guvabeq7MqQN\\nvi9pJdAA+RMxPsboHajskePjOTYJgKQSxEAMRTMfBR40aZxklxQL0EoBd1Y3CHXh\\nfMg0xWECgYEA0ORrpJ1A2WNQwKcDDeBBsaJqWF4EraoFzYrugKZrAYEeVyuGD0zq\\nARUaWkZTZ1f6wQ10i1WxAuKlBEds7QsLdZzLsA4um4JlBroCZiYfPnmTtb8op1LY\\nFqeYTByvAmnfWWTuOI67GX9ruLg8tEGuz38kuQVSxYs51its3tScNPUCgYEAyRst\\nwRbqpOqnwoRoS6pxv0Vpc3nUcfaVYwsg/qobJkiwAdlUYeE7alvEY926VW4cvU/X\\nhy3L1punAqnyLI7uuqCefXEbNxO0Cebyy4Kv2Ye1uzl0OHsJczSNdfpNqfAIKwtN\\nHLCYDGCsluQhz+I/5Pd0dT+JDPPW9hKS2HG7o+kCgYBqugn1VRLo/sEnbS02TbnC\\n1ESZWY/yWsgUOEObH2vUnO+vgeFAt/9nBi0sqnm6d0z6jbFZ7zI9UycUhJm2ksoM\\nEUxQay6M7ZZIVYkcP6X++YbqePyAYOdey8oYOR+BkC45MkQ0SVh2so+LFTaOsnBq\\nO3+7uGiN3ZBzSESbpO0acQKBgQCONrsXZeZO82XpB4tdns3LbgGRWKEkajTgEnml\\nvZNvck2NMSwb/5PttbFe0ei4CyMluPV4MamJPQ9Qse+BFR67OWR63uZY/4T8z6X4\\nxpUmZnLcUFfgrRlUr+AtgvEy8HxGPDquxC7x6deC6RcEFEIM3/UqCOEZGMJ1x1Ky\\n31LLKQKBgGCKwVgQ8+4JyHZFkie3YdHhxJDokgY+Opb0HNnoBY/lZ54UMCCJQPS2\\n0XPSu651j/3adr3RQneU04gF6U2/D5JzFEV0kUsqZ4Zy2EEU0LU4ibus0gyomSpK\\niWhU4QrC/M4ELxYZinlNu3ThPWNQ/PMNteVWfdgOcV7uUWl0ViFp\\n-----END RSA PRIVATE KEY-----\\n\u0026#34;,\u0026#34;publicKey\u0026#34;:\u0026#34;-----BEGIN RSA PUBLIC KEY-----\\nMIIBCgKCAQEApBmF8U+or+E0mgUMH3LE4uRIWzeV9rhYnvSMm9OpOsxwJiss5mEA\\n/NtPHvQlq2UwrqXX89Wvu94K9EzZ4VyWYQGdxaiPpt17vRqUfsHUnXkY0pvCC9zt\\n/aNlJtdt2xm+7PTC0YQd4+E1FX3aaoUPJL8MXzNlpJzaUtuwLZe1iBmFfatZFHpt\\nEgc4nlf6TNLTzj3Yw1/7zIGVS8Vi7VquHc0Xo8dRiL2RxCGzLWnwL6GlrxY1tMhs\\nUg467XeoiwegFCpcIhAhPFREKoTnCEksL/N0rpXl7m6CAy5uqBGs5mMXnXlqefr5\\n8l0j2dU6zc60LCHH9TJC+roXsKJhy9sx/QIDAQAB\\n-----END RSA PUBLIC KEY-----\\n\u0026#34;,\u0026#34;publicKeyUri\u0026#34;:\u0026#34;http://localhost:8080/users/the_mighty_zork#main-key\u0026#34;} {\u0026#34;type\u0026#34;:\u0026#34;block\u0026#34;,\u0026#34;id\u0026#34;:\u0026#34;01FEXXET6XXMF7G2V3ASZP3YQW\u0026#34;,\u0026#34;createdAt\u0026#34;:\u0026#34;2021-09-08T09:00:53.965362Z\u0026#34;,\u0026#34;uri\u0026#34;:\u0026#34;http://localhost:8080/users/1happyturtle/blocks/01FEXXET6XXMF7G2V3ASZP3YQW\u0026#34;,\u0026#34;accountId\u0026#34;:\u0026#34;01F8MH5NBDF2MV7CTC4Q5128HF\u0026#34;,\u0026#34;targetAccountId\u0026#34;:\u0026#34;01F8MH5ZK5VRH73AKHQM6Y9VNX\u0026#34;} {\u0026#34;type\u0026#34;:\u0026#34;account\u0026#34;,\u0026#34;id\u0026#34;:\u0026#34;01F8MH5ZK5VRH73AKHQM6Y9VNX\u0026#34;,\u0026#34;createdAt\u0026#34;:\u0026#34;2021-08-31T12:00:53.985646Z\u0026#34;,\u0026#34;username\u0026#34;:\u0026#34;foss_satan\u0026#34;,\u0026#34;domain\u0026#34;:\u0026#34;fossbros-anonymous.io\u0026#34;,\u0026#34;locked\u0026#34;:true,\u0026#34;language\u0026#34;:\u0026#34;en\u0026#34;,\u0026#34;uri\u0026#34;:\u0026#34;http://fossbros-anonymous.io/users/foss_satan\u0026#34;,\u0026#34;url\u0026#34;:\u0026#34;http://fossbros-anonymous.io/@foss_satan\u0026#34;,\u0026#34;inboxURI\u0026#34;:\u0026#34;http://fossbros-anonymous.io/users/foss_satan/inbox\u0026#34;,\u0026#34;outboxURI\u0026#34;:\u0026#34;http://fossbros-anonymous.io/users/foss_satan/outbox\u0026#34;,\u0026#34;followingUri\u0026#34;:\u0026#34;http://fossbros-anonymous.io/users/foss_satan/following\u0026#34;,\u0026#34;followersUri\u0026#34;:\u0026#34;http://fossbros-anonymous.io/users/foss_satan/followers\u0026#34;,\u0026#34;featuredCollectionUri\u0026#34;:\u0026#34;http://fossbros-anonymous.io/users/foss_satan/collections/featured\u0026#34;,\u0026#34;actorType\u0026#34;:\u0026#34;Person\u0026#34;,\u0026#34;publicKey\u0026#34;:\u0026#34;-----BEGIN RSA PUBLIC KEY-----\\nMIIBCgKCAQEA2OyVgkaIL9VohXKYTh319j4OouHRX/8QC7piXj71k7q5RDzEyvis\\nVZBc5/C1/crCpxt895i0Ai2CiXQx+dISV7s/JBhAGl8s7TQ8jLlMuptrI0+sdkBC\\nlu8pU0qQmoeXVnlquOzNmqGufUxIDtLXLZDN17qf/7vWA23q4d0tG5KQhGGGKiVM\\n61Ufvr9MmgPBSpyUvYMAulFlz1264L49aGWeVgOz3qUQzqtxjrP0kaIbeyt56miP\\nKr5AqkRgSsXci+FAo6suxR5gzo9NgleNkbZWF9MQyKlawukPwZUDSh396vtNQMee\\n/4mto7mAXw8iio0IacrYO3F7iyewXnmI/QIDAQAB\\n-----END RSA PUBLIC KEY-----\\n\u0026#34;,\u0026#34;publicKeyUri\u0026#34;:\u0026#34;http://fossbros-anonymous.io/users/foss_satan/main-key\u0026#34;} {\u0026#34;type\u0026#34;:\u0026#34;follow\u0026#34;,\u0026#34;id\u0026#34;:\u0026#34;01F8PYDCE8XE23GRE5DPZJDZDP\u0026#34;,\u0026#34;createdAt\u0026#34;:\u0026#34;2021-09-08T09:00:54.749465Z\u0026#34;,\u0026#34;uri\u0026#34;:\u0026#34;http://localhost:8080/users/the_mighty_zork/follow/01F8PYDCE8XE23GRE5DPZJDZDP\u0026#34;,\u0026#34;accountId\u0026#34;:\u0026#34;01F8MH1H7YV1Z7D2C8K2730QBF\u0026#34;,\u0026#34;targetAccountId\u0026#34;:\u0026#34;01F8MH5NBDF2MV7CTC4Q5128HF\u0026#34;} {\u0026#34;type\u0026#34;:\u0026#34;follow\u0026#34;,\u0026#34;id\u0026#34;:\u0026#34;01F8PY8RHWRQZV038T4E8T9YK8\u0026#34;,\u0026#34;createdAt\u0026#34;:\u0026#34;2021-09-06T12:00:54.749459Z\u0026#34;,\u0026#34;uri\u0026#34;:\u0026#34;http://localhost:8080/users/the_mighty_zork/follow/01F8PY8RHWRQZV038T4E8T9YK8\u0026#34;,\u0026#34;accountId\u0026#34;:\u0026#34;01F8MH1H7YV1Z7D2C8K2730QBF\u0026#34;,\u0026#34;targetAccountId\u0026#34;:\u0026#34;01F8MH17FWEB39HZJ76B6VXSKF\u0026#34;} {\u0026#34;type\u0026#34;:\u0026#34;domainBlock\u0026#34;,\u0026#34;id\u0026#34;:\u0026#34;01FF22EQM7X8E3RX1XGPN7S87D\u0026#34;,\u0026#34;createdAt\u0026#34;:\u0026#34;2021-09-08T10:00:53.968971Z\u0026#34;,\u0026#34;domain\u0026#34;:\u0026#34;replyguys.com\u0026#34;,\u0026#34;createdByAccountID\u0026#34;:\u0026#34;01F8MH17FWEB39HZJ76B6VXSKF\u0026#34;,\u0026#34;privateComment\u0026#34;:\u0026#34;i blocked this domain because they keep replying with pushy + unwarranted linux advice\u0026#34;,\u0026#34;publicComment\u0026#34;:\u0026#34;reply-guying to tech posts\u0026#34;,\u0026#34;obfuscate\u0026#34;:false} {\u0026#34;type\u0026#34;:\u0026#34;user\u0026#34;,\u0026#34;id\u0026#34;:\u0026#34;01F8MGYG9E893WRHW0TAEXR8GJ\u0026#34;,\u0026#34;createdAt\u0026#34;:\u0026#34;2021-09-08T10:00:53.97247Z\u0026#34;,\u0026#34;accountID\u0026#34;:\u0026#34;01F8MH0BBE4FHXPH513MBVFHB0\u0026#34;,\u0026#34;encryptedPassword\u0026#34;:\u0026#34;$2y$10$ggWz5QWwnx6kzb9g0tnIJurFtE0dhr5Zfeaqs9iFuUIXzafQlJVZS\u0026#34;,\u0026#34;locale\u0026#34;:\u0026#34;en\u0026#34;,\u0026#34;lastEmailedAt\u0026#34;:\u0026#34;0001-01-01T00:00:00Z\u0026#34;,\u0026#34;confirmationToken\u0026#34;:\u0026#34;a5a280bd-34be-44a3-8330-a57eaf61b8dd\u0026#34;,\u0026#34;confirmationTokenSentAt\u0026#34;:\u0026#34;2021-09-08T10:00:53.972472Z\u0026#34;,\u0026#34;unconfirmedEmail\u0026#34;:\u0026#34;weed_lord420@example.org\u0026#34;,\u0026#34;moderator\u0026#34;:false,\u0026#34;admin\u0026#34;:false,\u0026#34;disabled\u0026#34;:false,\u0026#34;approved\u0026#34;:false} {\u0026#34;type\u0026#34;:\u0026#34;user\u0026#34;,\u0026#34;id\u0026#34;:\u0026#34;01F8MGWYWKVKS3VS8DV1AMYPGE\u0026#34;,\u0026#34;createdAt\u0026#34;:\u0026#34;2021-09-05T10:00:53.972475Z\u0026#34;,\u0026#34;email\u0026#34;:\u0026#34;admin@example.org\u0026#34;,\u0026#34;accountID\u0026#34;:\u0026#34;01F8MH17FWEB39HZJ76B6VXSKF\u0026#34;,\u0026#34;encryptedPassword\u0026#34;:\u0026#34;$2y$10$ggWz5QWwnx6kzb9g0tnIJurFtE0dhr5Zfeaqs9iFuUIXzafQlJVZS\u0026#34;,\u0026#34;currentSignInAt\u0026#34;:\u0026#34;2021-09-08T09:50:53.972477Z\u0026#34;,\u0026#34;lastSignInAt\u0026#34;:\u0026#34;2021-09-08T08:00:53.972477Z\u0026#34;,\u0026#34;chosenLanguages\u0026#34;:[\u0026#34;en\u0026#34;],\u0026#34;locale\u0026#34;:\u0026#34;en\u0026#34;,\u0026#34;lastEmailedAt\u0026#34;:\u0026#34;2021-09-08T09:30:53.972478Z\u0026#34;,\u0026#34;confirmedAt\u0026#34;:\u0026#34;2021-09-05T10:00:53.972478Z\u0026#34;,\u0026#34;moderator\u0026#34;:true,\u0026#34;admin\u0026#34;:true,\u0026#34;disabled\u0026#34;:false,\u0026#34;approved\u0026#34;:true} {\u0026#34;type\u0026#34;:\u0026#34;user\u0026#34;,\u0026#34;id\u0026#34;:\u0026#34;01F8MGVGPHQ2D3P3X0454H54Z5\u0026#34;,\u0026#34;createdAt\u0026#34;:\u0026#34;2021-09-06T22:00:53.97248Z\u0026#34;,\u0026#34;email\u0026#34;:\u0026#34;zork@example.org\u0026#34;,\u0026#34;accountID\u0026#34;:\u0026#34;01F8MH1H7YV1Z7D2C8K2730QBF\u0026#34;,\u0026#34;encryptedPassword\u0026#34;:\u0026#34;$2y$10$ggWz5QWwnx6kzb9g0tnIJurFtE0dhr5Zfeaqs9iFuUIXzafQlJVZS\u0026#34;,\u0026#34;currentSignInAt\u0026#34;:\u0026#34;2021-09-08T09:30:53.972481Z\u0026#34;,\u0026#34;lastSignInAt\u0026#34;:\u0026#34;2021-09-08T08:00:53.972481Z\u0026#34;,\u0026#34;chosenLanguages\u0026#34;:[\u0026#34;en\u0026#34;],\u0026#34;locale\u0026#34;:\u0026#34;en\u0026#34;,\u0026#34;lastEmailedAt\u0026#34;:\u0026#34;2021-09-08T09:05:53.972482Z\u0026#34;,\u0026#34;confirmationTokenSentAt\u0026#34;:\u0026#34;2021-09-06T22:00:53.972483Z\u0026#34;,\u0026#34;confirmedAt\u0026#34;:\u0026#34;2021-09-07T00:00:53.972482Z\u0026#34;,\u0026#34;moderator\u0026#34;:false,\u0026#34;admin\u0026#34;:false,\u0026#34;disabled\u0026#34;:false,\u0026#34;approved\u0026#34;:true} {\u0026#34;type\u0026#34;:\u0026#34;user\u0026#34;,\u0026#34;id\u0026#34;:\u0026#34;01F8MH1VYJAE00TVVGMM5JNJ8X\u0026#34;,\u0026#34;createdAt\u0026#34;:\u0026#34;2021-09-06T22:00:53.972485Z\u0026#34;,\u0026#34;email\u0026#34;:\u0026#34;tortle.dude@example.org\u0026#34;,\u0026#34;accountID\u0026#34;:\u0026#34;01F8MH5NBDF2MV7CTC4Q5128HF\u0026#34;,\u0026#34;encryptedPassword\u0026#34;:\u0026#34;$2y$10$ggWz5QWwnx6kzb9g0tnIJurFtE0dhr5Zfeaqs9iFuUIXzafQlJVZS\u0026#34;,\u0026#34;currentSignInAt\u0026#34;:\u0026#34;2021-09-08T09:30:53.972485Z\u0026#34;,\u0026#34;lastSignInAt\u0026#34;:\u0026#34;2021-09-08T08:00:53.972486Z\u0026#34;,\u0026#34;chosenLanguages\u0026#34;:[\u0026#34;en\u0026#34;],\u0026#34;locale\u0026#34;:\u0026#34;en\u0026#34;,\u0026#34;lastEmailedAt\u0026#34;:\u0026#34;2021-09-08T09:05:53.972487Z\u0026#34;,\u0026#34;confirmationTokenSentAt\u0026#34;:\u0026#34;2021-09-06T22:00:53.972487Z\u0026#34;,\u0026#34;confirmedAt\u0026#34;:\u0026#34;2021-09-07T00:00:53.972487Z\u0026#34;,\u0026#34;moderator\u0026#34;:false,\u0026#34;admin\u0026#34;:false,\u0026#34;disabled\u0026#34;:false,\u0026#34;approved\u0026#34;:true} {\u0026#34;type\u0026#34;:\u0026#34;instance\u0026#34;,\u0026#34;id\u0026#34;:\u0026#34;01BZDDRPAB8J645ABY31HHF68Y\u0026#34;,\u0026#34;createdAt\u0026#34;:\u0026#34;2021-09-08T10:00:54.763912Z\u0026#34;,\u0026#34;domain\u0026#34;:\u0026#34;localhost:8080\u0026#34;,\u0026#34;title\u0026#34;:\u0026#34;localhost:8080\u0026#34;,\u0026#34;uri\u0026#34;:\u0026#34;http://localhost:8080\u0026#34;,\u0026#34;reputation\u0026#34;:0} For information on how to use the commands to import/export, see here. Though the export command won\u0026rsquo;t backup media, you can use the media list-local command to figure out which media files you should keep.\nAdvantages:\nDatabase agnostic: exported data is in a somewhat generic format, and the import command can be used to insert this data into either a Postgres or an SQLite database. Lightweight: only what is needed is preserved, so backup files can be quite small (even small enough to send in an email). Backup/import commands just take a few seconds to run. Easily readable format: the output is just JSON. Disadvantages:\nLoss of statuses/faves/etc: don\u0026rsquo;t do a backup/restore this way unless you\u0026rsquo;re willing to drop stuff. You need to use the GtS CLI tool to insert data back into a database, unless you write custom tooling for it. Back up your database files and media # Regardless of whether you\u0026rsquo;re using PostgreSQL or SQLite as your GoToSocial database, it\u0026rsquo;s possible to simply back up the database files directly by using something like rclone, or following best practices for backing up Postgres data or SQLite data.\nUse the GoToSocial CLI to get a list of media files you need to safeguard.\nAdvantages:\nBackups are relatively portable - you can move data from one machine to another. Well-documented procedure with a lot of guides and tooling available. Lots of different ways of doing your backups, depending on what you need. Disadvantages:\nCan be a bit fiddly to set up initially. You need to figure out where to keep your backups. Restoring from backups can be a pain. Unless you back up media as well, references to media attachments in your db will be broken. Backup software # Backup software is created with the specific purpose of helping you create, manage and restore your backups. It typically knows how to safely backup your database so you don\u0026rsquo;t have to be an expert on how to do PostgreSQL or SQLite backups. It can backup from the filesystem too.\nThough the same advantages and disadvantages roughly apply as with backing up the database files directly, this approach does have some nice extras:\nBackups are highly portable and can be used to restore the database from 0 Backups happen on a regular schedule and with configurable retention policies Backups are incremental and compressed to save on storage and bandwidth Backups are encrypted Built-in tooling to list your snapshots and restore from them Tip\nRsync.net, BorgBase and Hetzner Storage provide affordable storage that you can use as a backup target. Rsync.net has a special Borg-only backup product that is much cheaper than their regular storage product. If you only want to use them for backups managed with Borg, sign up here instead.\nBorgmatic # Borgmatic is a utility to help perform backups using Borg. It\u0026rsquo;s driven by a declarative configuration file using YAML. BorgBase, Rsync.net and Hetzner all support Borg.\nWarning\nWhen initialising the Borg repository, ensure you set it up with a strong encryption key and store that key somewhere safely. Without it you won\u0026rsquo;t be able to decrypt your backups in the future. The ArchWiki entry on Borgmatic explains how to safely pass your encryption key to Borgmatic without storing it plain text in its configuration file.\nHow to backup databases with Borgmatic has its own documentation page that you should review. A simple config.yaml for Borgmatic with GoToSocial using SQLite looks like this:\nlocation: repositories: - path: ssh://\u0026lt;find it in your provider control panel\u0026gt; label: \u0026lt;anything but typically the provider, for example borgbase\u0026gt; patterns_from: - /etc/borgmatic/gotosocial_patterns storage: compression: auto,zstd archive_name_format: \u0026#39;{hostname}-{now:%Y-%m-%d-%H%M%S}\u0026#39; retries: 5 retry_wait: 30 retention: keep_daily: 7 keep_weekly: 6 keep_monthly: 12 hooks: before_backup: - /usr/bin/systemctl stop gotosocial after_backup: - /usr/bin/systemctl start gotosocial sqlite_databases: - name: gotosocial path: /path/to/sqlite.db For PostgreSQL, you\u0026rsquo;ll want to use postgresql_databases instead.\nThe file mentioned in patterns_from can be created by transforming the output from the GoToSocial CLI. In order to generate the right patterns you can use the media-to-borg-patterns.py script. How Borg patterns work is explained in their documentation.\nYou\u0026rsquo;ll need to put that file on your GoToSocial instance and make sure the file is executable. It requires Python 3 which you will already have if you have Borg and Borgmatic installed. It only depends on the Python standard library.\nNote\nFor this to work reliably, you should ensure that the storage-local-base-path in your GoToSocial configuration uses an absolute path. Otherwise you\u0026rsquo;ll have to tweak the paths yourself.\n$ gotosocial admin media list-local | \\ /path/to/media-to-borg-patterns.py \\ \u0026lt;storage-local-base-path\u0026gt; This will output a pattern set looking roughly like this to your console:\nR \u0026lt;storage-local-base-path\u0026gt; + pp:\u0026lt;storage-local-base-path\u0026gt;/\u0026lt;account ID\u0026gt; - \u0026lt;storage-local-base-path\u0026gt;/* Tip\nYou can view the help by passing --help to media-to-borg-patterns.py. It can write the output to a file directly by passing the location of a file as the last argument to the script.\nGiven this set of patterns, Borg will start looking for files starting from \u0026lt;storage-local-base-path\u0026gt;. Anything that matches the path prefix, pp: will be included. Everything else will match the last pattern, excluding it from the archive.\nOn a single-user instance, you can run this command once and inline the patterns directly in your Borgmatic configuration using the patterns key. On multi-user instances you should run this after a user signs up. Alternatively, you can run it every time before you do a backup.\nIf you\u0026rsquo;re running Borgmatic as a systemd service, you can create a drop-in for borgmatic.service and run the pattern generation before the backup is started with:\n[Service] ExecStartPre=/path/to/gotosocial admin media list-local | /path/to/media-to-borg-patterns.py \u0026lt;storage-local-base-path\u0026gt; /etc/borgmatic/gotosocial_patterns Documentation that\u0026rsquo;s good to review:\nBorgmatic configuration reference ArchWiki entry on Borgmatic ArchWiki entry on Borg BorgBase documentation Hetzner community guide on setting up Borgmatic "},{"id":22,"href":"/docs/advanced/caching/","title":"Caching","section":"Advanced","content":" Caching # This section covers a number of different caching techniques that can be used to make GoToSocial more robust in the face of higher traffic and offload the GoToSocial instance from some work.\n!!! note These guides are only relevant if you\u0026rsquo;re running a reverse proxy.\nGuides # Caching API responses Assets and media serving and caching "},{"id":23,"href":"/docs/configuration/web/","title":"Web","section":"Configuration","content":" Web # Settings # ###################### ##### WEB CONFIG ##### ###################### # Config pertaining to templating and serving of web pages/email notifications and the like # String. Directory from which gotosocial will attempt to load html templates (.tmpl files). # Examples: [\u0026#34;/some/absolute/path/\u0026#34;, \u0026#34;./relative/path/\u0026#34;, \u0026#34;../../some/weird/path/\u0026#34;] # Default: \u0026#34;./web/template/\u0026#34; web-template-base-dir: \u0026#34;./web/template/\u0026#34; # String. Directory from which gotosocial will attempt to serve static web assets (images, scripts). # Examples: [\u0026#34;/some/absolute/path/\u0026#34;, \u0026#34;./relative/path/\u0026#34;, \u0026#34;../../some/weird/path/\u0026#34;] # Default: \u0026#34;./web/assets/\u0026#34; web-asset-base-dir: \u0026#34;./web/assets/\u0026#34; "},{"id":24,"href":"/docs/getting_started/installation/","title":"Installation","section":"Getting Started","content":" Installation # As we noted in Releases, we publish official binary release as well as containers. We have a number of guides available on how to deploy your own GoToSocial instance this way.\nBefore proceeding with your installation, please ensure you\u0026rsquo;ve read through the Deployment considerations first and have a domain and server ready to go.\nAlso take a minute to familiarise yourself with how to configure GoToSocial.\nGuides # For third-party releases we don\u0026rsquo;t provide guides on how to use them. You need to refer to their own documentation instead. Our guides might still be useful to review in order to familiarise yourself with which configuration options you likely want to set and tweak.\nBare metal Container "},{"id":25,"href":"/docs/getting_started/reverse_proxy/caddy/","title":"Caddy 2","section":"Reverse Proxy","content":" Caddy 2 # Requirements # For this guide you will need Caddy 2, there are no other dependencies. Caddy manages Lets Encrypt certificates and renewal for them.\nCaddy is in the most popular package managers, or you can get a static binary. For all latest installation guides, refer to their manual.\nDebian, Ubuntu, Raspbian # # Add the keyring for their custom repository. sudo apt install -y debian-keyring debian-archive-keyring apt-transport-https curl -1sLf \u0026#39;https://dl.cloudsmith.io/public/caddy/stable/gpg.key\u0026#39; | sudo gpg --dearmor -o /usr/share/keyrings/caddy-stable-archive-keyring.gpg curl -1sLf \u0026#39;https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt\u0026#39; | sudo tee /etc/apt/sources.list.d/caddy-stable.list # Update packages and install it sudo apt update sudo apt install caddy Fedora, Redhat, Centos # dnf install \u0026#39;dnf-command(copr)\u0026#39; dnf copr enable @caddy/caddy dnf install caddy Arch # pacman -Syu caddy FreeBSD # sudo pkg install caddy Configure GoToSocial # If GoToSocial is already running, stop it.\nsudo systemctl stop gotosocial In your GoToSocial config turn off Lets Encrypt by setting letsencrypt-enabled to false.\nIf you we running GoToSocial on port 443, change the port value back to the default 8080.\nIf the reverse proxy will be running on the same machine, set the bind-address to \u0026quot;localhost\u0026quot; so that the GoToSocial server is only accessible via loopback. Otherwise it may be possible to bypass your proxy by connecting to GoToSocial directly, which might be undesirable.\nSet up Caddy # We will configure Caddy 2 to use GoToSocial on our main domain example.org. Since Caddy takes care of obtaining the Lets Encrypt certificate, we only need to configure it properly once.\nIn most simple use cases Caddy defaults to a file called Caddyfile. It can reload on changes, or can be configured through an HTTP API for zero downtime, but this is out of our current scope.\nsudo mkdir -p /etc/caddy sudo vim /etc/caddy/Caddyfile While editing the file above, you should replace \u0026rsquo;example.org\u0026rsquo; with your domain. Your domain should occur twice in the current configuration. If you have chosen another port number for GoToSocial other than port 8080, change the port number on the reverse proxy line to match that.\nThe file you\u0026rsquo;re about to create should look like this:\nexample.org { # Optional, but recommended, compress the traffic using proper protocols encode zstd gzip # The actual proxy configuration to port 8080 (unless you\u0026#39;ve chosen another port number) reverse_proxy * http://127.0.0.1:8080 { # Flush immediatly, to prevent buffered response to the client flush_interval -1 } } By default, caddy sets X-Forwarded-For in forwarded requests. To make this and rate limiting work, set the trusted-proxies configuration variable. See the rate limiting and general configuration docs.\nFor advanced configuration check the reverse_proxy directive at the Caddy documentation.\nNow check for configuration errors.\nsudo caddy validate If everything is fine, you should get some info lines as output. Unless there are lines marked with [err] in front of them, you are all set.\nEverything working? Great! Then restart caddy to load your new config file.\nsudo systemctl restart caddy If everything went right, you\u0026rsquo;re now all set to enjoy your GoToSocial instance, so we are going to start it again.\nsudo systemctl start gotosocial Results # You should now be able to open the splash page for your instance in your web browser, and will see that it runs under HTTPS!\n"},{"id":26,"href":"/docs/user_guide/custom_css/","title":"Custom CSS (Advanced)","section":"User Guide","content":" Custom CSS (Advanced) # CSS (Cascading Style Sheets) is a coding language used alongside HTML, which determines how a web page looks in a web browser:\nWhile HTML is used to define the structure and semantics of your content, CSS is used to style it and lay it out. For example, you can use CSS to alter the font, color, size, and spacing of your content, split it into multiple columns, or add animations and other decorative features.\n\u0026ndash; Learn CSS (Mozilla)\nDepending on the settings configured by the admin of your GoToSocial instance, you may be able to upload custom CSS for your account via the User Settings Panel.\nThis allows you to customize the appearance of your GoToSocial profile for users visiting it using a web browser.\nExample - Changing Background Color # Here\u0026rsquo;s a standard GoToSocial profile page:\nLet\u0026rsquo;s say we want the background color to be black instead of grey.\nIn the User Settings Panel, we enter the following CSS code in the Custom CSS field:\n.page { background: black; } We then click on Save Profile Info.\nIf we go back to our profile page and refresh the page, it now looks like this:\nIf we want to get really fancy, we can add an ombre effect to the background, by using the following CSS code instead:\n.page { background: linear-gradient(crimson, purple); } After saving the css and refreshing the profile page, the profile now looks like this:\nAccessibility # The importance of accessible HTML and CSS cannot be overstated. From W3:\nThe Web is fundamentally designed to work for all people, whatever their hardware, software, language, location, or ability. When the Web meets this goal, it is accessible to people with a diverse range of hearing, movement, sight, and cognitive ability.\nThus the impact of disability is radically changed on the Web because the Web removes barriers to communication and interaction that many people face in the physical world. However, when websites, applications, technologies, or tools are badly designed, they can create barriers that exclude people from using the Web.\nAccessibility is essential for developers and organizations that want to create high-quality websites and web tools, and not exclude people from using their products and services.\n\u0026ndash; Introduction To Web Accessibility\nThe standard GoToSocial theme is designed with web accessibility in mind, especially when it comes to layout, color contrasts, font sizes, and so on.\nIf you write custom CSS for your profile, it is very important that you make sure that it remains legible and that it behaves as expected. Buttons should look like buttons, links should look like links, text should be presented in a readable font, elements should not jump around the page, etc. Web pages can be pretty and exciting without sacrificing readability, or making things overcomplicated.\nIf you change your color scheme, it\u0026rsquo;s a good idea to validate the new colors to make sure that they have sufficient contrast to be readable by people with visual impairments like color blindness. Once you\u0026rsquo;ve updated your CSS, try entering your profile URL in a contrast checking tool, like the Color Contrast Accessibility Validator. You can also use the \u0026lsquo;Accessibility\u0026rsquo; tab in the developer tools of your web browser to check for any issues.\nStyling with accessibility in mind makes the web better for everyone! Have a look at the links below for more information.\nUseful Links # Learn CSS (Mozilla) CSS Tutorial (W3 Schools) CSS and JavaScript Accessibility Best Practices (Mozilla) WAVE Web Accessibility Evaluation Tool Color Contrast Accessibility Validator "},{"id":27,"href":"/docs/api/throttling/","title":"Request Throttling","section":"API","content":" Request Throttling # GoToSocial uses request throttling to limit the number of open connections to the API of your instance. This is designed to prevent your instance from accidentally being DDOS\u0026rsquo;d (aka the hug of death) if a post gets boosted or replied to by an account with many thousands of followers.\nThrottling means that only a limited number of HTTP requests to the API will be handled concurrently, in order to provide a snappy response to each request and move on quickly. The rationale is that it\u0026rsquo;s better to handle fewer requests quickly, than to try to handle all incoming requests at once and take multiple seconds per request.\nThrottling limits are applied across router groups, similar to the way that rate limiting is organized, so if one part of the API is currently being throttled, that doesn\u0026rsquo;t mean they all are.\nThrottling limits are calculated based on the number of CPUs available to GoToSocial, and the configuration value advanced-throttling-multiplier. The calculation is performed as follows:\nIn-process queue limit = number of CPUs * CPU multiplier. Backlog queue limit = in-process queue limit * CPU multiplier. This leads to the following values for the default multiplier (8):\n1 cpu = 08 in-process, 064 backlog 2 cpu = 16 in-process, 128 backlog 4 cpu = 32 in-process, 256 backlog 8 cpu = 64 in-process, 512 backlog New requests that overflow the in-process limit are held in the backlog queue, and processed as soon as a spot is freed up (ie., when a currently in-process request is finished). Requests that cannot be processed, and cannot fit in the backlog queue will be responded to with http code 503 - Service Unavailable, and the Retry-After header will be set to 30 (seconds), to indicate that the caller should try again later.\nRequests are not held in the backlog queue indefinitely: if requests in the backlog cannot be processed within 30 seconds of being received, they will also receive a code 503 and a 30s retry-after.\nThrottling FAQs # Can I tune the request throttling? # Yes, just change the value of advanced-throttling-multiplier higher (if you have very powerful CPUs) or lower (if you have relatively less powerful CPUs).\nCan I disable the request throttling? # Yes. To do so, just set advanced-throttling-multiplier to 0 or less. This will disable HTTP request throttling entirely, and instead attempt to process all incoming requests at once. This is useful in cases where you want to do request throttling using an external service or a reverse-proxy, and you don\u0026rsquo;t want GoToSocial to interfere with your setup.\n"},{"id":28,"href":"/docs/configuration/","title":"Configuration","section":"Docs","content":" Configuration Overview # GoToSocial aims to be as configurable as possible, to fit lots of different use cases.\nWe try to provide sensible defaults wherever possible, but you can\u0026rsquo;t run a GoToSocial instance without managing some configuration.\nConfiguration Methods # There are three different methods for configuring a GoToSocial instance, which can be combined depending on your setup.\nConfiguration File # The easiest way to configure GoToSocial is to pass a configuration file to to the gotosocial server start command, for example:\ngotosocial --config-path ./config.yaml server start The command expects a file in YAML or JSON format.\nAn example configuration file, with an explanation of each of the config fields, with default and example values, can be found here.\nThis example file is included with release downloads, so you can just copy it and edit it to your needs without having to worry too much about what the hell YAML or JSON is.\nEnvironment Variables # You can also configure GoToSocial by setting environment variables. These environment variables follow the format:\nPrepend GTS_ to the config flag. Uppercase-all. Replace dash (-) with underscore (_). So for example, instead of setting media-image-max-size to 2097152 in your config.yaml, you could set the environment variable:\nGTS_MEDIA_IMAGE_MAX_SIZE=2097152 If you\u0026rsquo;re in doubt about any of the names of these environment variables, just check the --help for the subcommand you\u0026rsquo;re using.\nCommand Line Flags # Finally, you can set configuration values using command-line flags, which you pass directly when you\u0026rsquo;re running a gotosocial command. For example, instead of setting media-image-max-size in your config.yaml, or with an environment variable, you can pass the value directly through the command line:\ngotosocial server start --media-image-max-size 2097152 If you\u0026rsquo;re in doubt about which flags are available, check gotosocial --help.\nPriority # The above configuration methods override each other in the order in which they were listed.\ncommand line flags \u0026gt; environment variables \u0026gt; config file That is, if you set media-image-max-size to 2097152 in your config file, but then ALSO set the environment variable GTS_MEDIA_MAX_IMAGE_SIZE=9999999, then the final value will be 9999999, because environment variables have a higher priority than values set in config.yaml.\nCommand line flags have the highest priority, so if you set --media-image-max-size 13121312, then the final value will be 13121312 regardless of what you\u0026rsquo;ve set elsewhere.\nThis means in cases where you want to just try changing one thing, but don\u0026rsquo;t want to edit your config file, you can temporarily use an environment variable or a command line flag to set that one thing.\nDefault Values # Reasonable default values are provided for most of the configuration parameters, except in cases where a custom value is absolutely required.\nSee the example config file for the default values, or run gotosocial --help.\n"},{"id":29,"href":"/docs/configuration/instance/","title":"Instance","section":"Configuration","content":" Instance # Settings # ########################### ##### INSTANCE CONFIG ##### ########################### # Config pertaining to instance federation settings, pages to hide/expose, etc. # Bool. Allow unauthenticated users to make queries to /api/v1/instance/peers?filter=open in order # to see a list of instances that this instance \u0026#39;peers\u0026#39; with. Even if set to \u0026#39;false\u0026#39;, then authenticated # users (members of the instance) will still be able to query the endpoint. # Options: [true, false] # Default: false instance-expose-peers: false # Bool. Allow unauthenticated users to make queries to /api/v1/instance/peers?filter=suspended in order # to see a list of instances that this instance blocks/suspends. This will also allow unauthenticated # users to see the list through the web UI. Even if set to \u0026#39;false\u0026#39;, then authenticated users (members # of the instance) will still be able to query the endpoint. # Options: [true, false] # Default: false instance-expose-suspended: false # Bool. Allow unauthenticated users to view /about/suspended, # showing the HTML rendered list of instances that this instance blocks/suspends. # Options: [true, false] # Default: false instance-expose-suspended-web: false # Bool. Allow unauthenticated users to make queries to /api/v1/timelines/public in order # to see a list of public posts on this server. Even if set to \u0026#39;false\u0026#39;, then authenticated # users (members of the instance) will still be able to query the endpoint. # Options: [true, false] # Default: false instance-expose-public-timeline: false # Bool. This flag tweaks whether GoToSocial will deliver ActivityPub messages # to the shared inbox of a recipient, if one is available, instead of delivering # each message to each actor who should receive a message individually. # # Shared inbox delivery can significantly reduce network load when delivering # to multiple recipients share an inbox (eg., on large Mastodon instances). # # See: https://www.w3.org/TR/activitypub/#shared-inbox-delivery # # Options: [true, false] # Default: true instance-deliver-to-shared-inboxes: true "},{"id":30,"href":"/docs/getting_started/reverse_proxy/","title":"Reverse Proxy","section":"Getting Started","content":" Reverse proxy # GoToSocial can be exposed directly to the internet. However, many folks prefer to have a reverse proxy handle connections from the outside instead. This can also give greater control over TLS configurations and enables some more advanced scenario\u0026rsquo;s like asset caching.\nGeneral procedure # In order to use a reverse-proxy, you\u0026rsquo;ll typically want to do a few things:\nConfigure some way to get TLS certificates for the host domain Bind GoToSocial to a local IP instead of a public IP and a non-priviledged port. Adjust the bind-address and port configuration options Disable Lets Encrypt in GoToSocial if you were using it. Set letsencrypt-enabled to false Configure the reverse proxy to handle TLS and proxy requests to GoToSocial Warning\nDo not change the value of the host configuration option. This needs to remain the actual domain name the instance is running on as seen by other instances on the internet. Instead, change the bind-address and update the port and trusted-proxies.\nContainer # When you deploy GoToSocial using our example Docker Compose guide, it will bind to port 443 by default as it assumes you want to directly expose it to the internet. In order to run it behind a reverse proxy, you need to change that.\nIn the compose file:\nComment out the - \u0026quot;443:8080\u0026quot; line in the ports definition If you had enabled Lets Encrypt support: Comment out the - \u0026quot;80:80\u0026quot; line in the ports definition Set GTS_LETSENCRYPT_ENABLED back to \u0026quot;false\u0026quot; or comment it out Uncomment the - \u0026quot;127.0.0.1:8080:8080\u0026quot; line instead This now causes Docker to only forward connections on 127.0.0.1 on port 8080 to the container, effectively isolating it from the outside world. You can now tell your reverse-proxy to send requests there instead.\nGuides # We have guides available for the following servers:\nnginx Apache httpd Caddy 2 WebSockets # When using a reverse-proxy, special care must be taken to allow WebSockets to work too. This is necessary as many client applications use WebSockets to stream your timeline. WebSockets is not used as part of federation.\nMake sure you read the WebSocket documentation and configure your reverse proxy accordingly.\n"},{"id":31,"href":"/docs/getting_started/reverse_proxy/websocket/","title":"Websocket","section":"Reverse Proxy","content":" WebSocket # GoToSocial uses the secure WebSocket protocol (aka wss) to allow for streaming updates of statuses and notifications via client apps like Semaphore.\nIn order to use this functionality, you need to ensure that whatever proxy you\u0026rsquo;ve configured GoToSocial to run behind allows WebSocket connections through.\nThe WebSocket endpoint is located at wss://example.org/api/v1/streaming where example.org is the hostname of your GoToSocial instance.\nThe WebSocket endpoint uses the same port as configured in the port section of your general config.\nTypical WebSocket request headers as sent by Pinafore look like the following:\nHost: example.org User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:99.0) Gecko/20100101 Firefox/99.0 Accept: */* Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate, br Sec-WebSocket-Version: 13 Origin: https://pinafore.social Sec-WebSocket-Protocol: null Sec-WebSocket-Extensions: permessage-deflate Sec-WebSocket-Key: YWFhYWFhYm9vYmllcwo= DNT: 1 Connection: keep-alive, Upgrade Sec-Fetch-Dest: websocket Sec-Fetch-Mode: websocket Sec-Fetch-Site: cross-site Pragma: no-cache Cache-Control: no-cache Upgrade: websocket Typical WebSocket response headers as returned by GoToSocial look like the following:\nHTTP/1.1 101 Switching Protocols Upgrade: websocket Connection: Upgrade Sec-WebSocket-Accept: WVdGaFlXRmhZbTl2WW1sbGN3bz0K Whatever your setup, you need to ensure that these headers are allowed through your proxy, which may require extra configuration depending on the exact proxy being used.\n"},{"id":32,"href":"/docs/user_guide/password_management/","title":"Password Management","section":"User Guide","content":" Password Management # Change Your Password # You can use the User Settings Panel to change your password. Just log in to the user panel, scroll to the bottom of the page, and input your old password and desired new password.\nIf the new password you provide is not long/complicated enough, you will see an error and be prompted to try again with a different password.\nIf your instance uses OIDC (ie., you log in via Google or some other external provider), you will have to change your password via your OIDC provider, not through the user settings panel.\nPassword Storage # GoToSocial stores hashes of user passwords in its database using the secure bcrypt function in the Go standard libraries.\nThis means that the plaintext value of your password is safe even if the database of your GoToSocial instance is compromised. It also means that your instance admin does not have access to your password.\nTo check whether a password is sufficiently secure before accepting it, GoToSocial uses this library with entropy set to 60. This means that passwords like password are rejected, but something like verylongandsecurepasswordhahaha would be accepted, even without special characters/upper+lowercase etc.\nWe recommend following the EFF\u0026rsquo;s guidelines on creating strong passwords.\n"},{"id":33,"href":"/docs/advanced/certificates/","title":"Provisioning TLS certificates","section":"Advanced","content":" Provisioning TLS certificates # As explained in the deployment considerations, federation requires the use of TLS as most instances refuse to federate over unencrypted transports.\nGoToSocial comes with built-in support for provisioning and renewing its own TLS certificates through Lets Encrypt. This guide looks at how you can provision your own certificates independently from GoToSocial. This can be useful if you want full control over how the certificates are provisioned, or because you\u0026rsquo;re using a reverse proxy which is doing TLS termination.\nThere are a few different ways you can get TLS certificates:\nBuy them from a vendor, typically valid for 2 years Get them from your cloud provider, validity depends on their product constraints Get them from an ACME-compatible provider like Lets Encrypt, typically valid for 3 months at a time In this guide we\u0026rsquo;ll only look at option 3, an ACME-compatible vendor.\nGeneral approach # The way you\u0026rsquo;ll provision certificates through Lets Encrypt is:\nInstall an ACME client on your server Configure the ACME client to provision your certificates Configure a piece of software to use those certificates Enable a timer/cron to regularly renew the certificates Signal to the necessary applications they need to reload or restart to pick up the new certificates Certificates are provisioned using a challenge, a way to verify that you\u0026rsquo;re requesting a certificate for a domain you control. You\u0026rsquo;ll typically use one of:\nHTTP challenge DNS challenge The HTTP challenge requires serving certain files on port 80 on the domains you\u0026rsquo;re requesting a certificate for under the /.well-known/acme/ path. This is the default challenge type.\nThe DNS challenge happens entirely out of band but requires you to update a DNS TXT record. This approach is only feasible if your DNS registrar provides an API through which you can modify DNS records so that your ACME client can complete this challenge.\nClients # The official Lets Encrypt client is certbot and it\u0026rsquo;s usually packaged in your (Linux) distribution of choice. Certain reverse proxies like Caddy and Traefik have built-in support for provisioning certificates using the ACME protocol.\nA couple of other clients of note that you can consider using:\nacme-client for OpenBSD using the privilege separation features of the platform lacme, which is built with process isolation and minimal privileges in mind in the same vein as acme-client but for Linux Lego, an ACME client and library written in Go mod_md, when using Apache 2.4.30+ DNS challenge # For the DNS challenge, the API of your registrar needs to be supported by your ACME client. Though certbot has a few plugins for popular providers, you probably want to look at the dns-multi plugin instead. It leverages Lego under the hood which supports a much wider array of providers.\nConfiguration # There are 3 configuration options that are important:\nletsencrypt-enabled controls if GoToSocial will try to provision its own certificates tls-certificate-chain filesystem path where GoToSocial can find the TLS certificate chain + the public key tls-certificate-key filesystem path where GoToSocial can find the associated TLS private key Without reverse proxy # When running GoToSocial directly exposed to the internet, but you still want to use your own certificates you can set the following options:\nletsencrypt-enabled: false tls-certificate-chain: \u0026#34;/path/to/combined-certificate-chain-public.key\u0026#34; tls-certificate-key: \u0026#34;/path/to/private.key\u0026#34; This disables the built-in provisioning of certificates through Lets Encrypt and tells GoToSocial where to find the certificates on disk.\nTip\nRestart GoToSocial after renewing your certificates. It won\u0026rsquo;t pick up on certificate rotation by itself when they are provided like this.\nWith reverse proxy # When running GoToSocial behind a reverse proxy which you also use for TLS termination, you\u0026rsquo;ll need the following instead:\nletsencrypt-enabled: false tls-certificate-chain: \u0026#34;\u0026#34; tls-certificate-key: \u0026#34;\u0026#34; It\u0026rsquo;s important to ensure the tls-certificate-* options are unset or set to the empty string. Otherwise GoToSocial will attempt to handle TLS itself.\nProtocol configuration option\nDo not change the protocol configuration option to http. This should only ever by set to http for development purposes. It needs to be set to https even when running behind a TLS-terminating reverse proxy.\nYou\u0026rsquo;ll also want to change the port GoToSocial binds on, so it no longer tries to use port 443.\nTo configure TLS in your reverse proxy, please refer to their documentation:\nnginx apache Traefik Caddy Tip\nWhen configuring TLS in your reverse proxy, ensure you configure a reasonably modern set of compatible versions and ciphers. You can use the \u0026ldquo;Intermediate\u0026rdquo; configuration from the Mozilla SSL Configuration Generator.\nCheck the documentation of your reverse proxy on whether you have to reload or restart it after certificates have changed. Not all reverse proxies detect this.\nGuides # There are a number of good resources on the internet explaining how to set all of this up.\nArchWiki entry on certbot Gentoo wiki entry on Lets Encrypt Linode guide on certbot for Fedora, RHEL/CentOS, Debian and Ubuntu Digital Ocean guides on Lets Encrypt on Ubuntu 22.04 with nginx or apache "},{"id":34,"href":"/docs/advanced/","title":"Advanced","section":"Docs","content":" Advanced # In this section we touch on a number of more advanced topics, primarily related around deploying, operating and tuning GoToSocial.\nWe consider these topics advanced because applying them incorrectly does have the possibility of causing client and federation issues. Applying any of these configuration changes may also make it harder for you to debug an issue with your GoToSocial instance if you don\u0026rsquo;t understand the changes that you\u0026rsquo;re making.\nGuides # Split-domain deployment (API vs. account domain) Using an HTTP proxy for client/outgoing requests Provisioning TLS certificates Caching API responses Serving and caching assets and media from local storage Process sandboxing Firewall configuration Tracing "},{"id":35,"href":"/docs/advanced/security/","title":"Security","section":"Advanced","content":" Enhanced security # These guides cover improving the security posture of your GoToSocial deployment. They don\u0026rsquo;t involve tweaking settings in GoToSocial, but rather additional things you can do to better lock down your instance.\nNote\nAnything in these guides is meant to enhance the security of your GoToSocial deployment; they are not a replacement for good security practices like keeping your systems patched and up to date.\nGuides # Sandboxing the GoToSocial binary Firewall configuration "},{"id":36,"href":"/docs/configuration/accounts/","title":"Accounts","section":"Configuration","content":" Accounts # Settings # ########################### ##### ACCOUNTS CONFIG ##### ########################### # Config pertaining to creation and maintenance of accounts on the server, as well as defaults for new accounts. # Bool. Do we want people to be able to just submit sign up requests, or do we want invite only? # Options: [true, false] # Default: true accounts-registration-open: true # Bool. Do sign up requests require approval from an admin/moderator before an account can sign in/use the server? # Options: [true, false] # Default: true accounts-approval-required: true # Bool. Are sign up requests required to submit a reason for the request (eg., an explanation of why they want to join the instance)? # Options: [true, false] # Default: true accounts-reason-required: true # Bool. Allow accounts on this instance to set custom CSS for their profile pages and statuses. # Enabling this setting will allow accounts to upload custom CSS via the /user settings page, # which will then be rendered on the web view of the account\u0026#39;s profile and statuses. # # For instances with public sign ups, it is **HIGHLY RECOMMENDED** to leave this setting on \u0026#39;false\u0026#39;, # since setting it to true allows malicious accounts to make their profile pages misleading, unusable # or even dangerous to visitors. In other words, you should only enable this setting if you trust # the users on your instance not to produce harmful CSS. # # Regardless of what this value is set to, any uploaded CSS will not be federated to other instances, # it will only be shown on profiles and statuses on *this* instance. # # Options: [true, false] # Default: false accounts-allow-custom-css: false # Int. If accounts-allow-custom-css is true, this is the permitted length in characters for # CSS uploaded by accounts on this instance. No effect if accounts-allow-custom-css is false. # # Examples: [500, 5000, 9999] # Default: 10000 accounts-custom-css-length: 10000 "},{"id":37,"href":"/docs/user_guide/rss/","title":"RSS","section":"User Guide","content":" RSS # RSS stands for Really Simple Syndication. It\u0026rsquo;s a very well established standard for sharing content on the web. You might recognize the jolly orange RSS logo from your favorite news websites and blogs:\nIf you like, you can configure your GoToSocial account to expose an RSS feed of your posts to the web. This allows people to get regular updates about your posts even when they don\u0026rsquo;t have a Fediverse account. This is great when you\u0026rsquo;re using GoToSocial to create longer-form, blog style posts, and you want anyone to be able to read them easily.\nThe RSS feed for GoToSocial profiles is turned off by default. You can enable it via the User Settings at https://[your-instance-domain]/settings.\nWhen enabled, the RSS feed for your account will be available at https://[your-instance-domain]/@[your_username]/feed.rss. If you use an RSS reader, you can point it at this address to check that RSS is working.\nWhich posts are shared via RSS? # Only your latest 20 Public posts are shared via RSS. Replies and reblogs/boosts are not included. Unlisted posts are not included. In other words, the only posts visible via RSS will be the same ones that are visible when you open your profile in a browser.\n"},{"id":38,"href":"/docs/advanced/tracing/","title":"Tracing","section":"Advanced","content":" Tracing # GoToSocial comes with OpenTelemetry based tracing built-in. It\u0026rsquo;s not wired through every function, but our HTTP handlers and database library will create spans. How to configure tracing is explained in the Observability configuration reference.\nIn order to receive the traces, you need something to ingest them and then visualise them. There are many options available including self-hosted and commercial options.\nWe provide an example of how to do this using Grafana Tempo to ingest the spans and Grafana to explore them. Please beware that the configuration we provide is not suitable for a production setup. It can be used safely for local development and can provide a good starting point for setting up your own tracing infrastructure.\nYou\u0026rsquo;ll need the files in example/tracing. Once you have those you can run docker-compose up -d to get Tempo and Grafana running. With both services running, you can add the following to your GoToSocial configuration and restart your instance:\ntracing-enabled: true tracing-transport: \u0026#34;grpc\u0026#34; tracing-endpoint: \u0026#34;localhost:4317\u0026#34; tracing-insecure: true Querying and visualising traces # Once you execute a few queries against your instance, you\u0026rsquo;ll be able to find them in Grafana. You can use the Explore tab and pick Tempo as the datasource. Because our example configuration for Grafana enables TraceQL, the Explore tab will have the TraceQL query type selected by default. You can switch to \u0026ldquo;Search\u0026rdquo; instead and find all traces emitted by GoToSocial under the \u0026ldquo;GoToSocial\u0026rdquo; service name.\nUsing TraceQL, a simple query to find all traces related to requests to /api/v1/instance would look like this:\n{.http.route = \u0026#34;/api/v1/instance\u0026#34;} If you wanted to see all GoToSocial traces, you could instead run:\n{.service.name = \u0026#34;GoToSocial\u0026#34;} Once you select a trace, a second panel will open up visualising the span. You can drill down from there, by clicking into every sub-span to see what it was doing.\n"},{"id":39,"href":"/docs/configuration/media/","title":"Media","section":"Configuration","content":" Media # Settings # ######################## ##### MEDIA CONFIG ##### ######################## # Config pertaining to user media uploads (videos, image, image descriptions). # Int. Maximum allowed image upload size in bytes. # Examples: [2097152, 10485760] # Default: 10485760 -- aka 10MB media-image-max-size: 10485760 # Int. Maximum allowed video upload size in bytes. # Examples: [2097152, 10485760] # Default: 41943040 -- aka 40MB media-video-max-size: 41943040 # Int. Minimum amount of characters required as an image or video description. # Examples: [500, 1000, 1500] # Default: 0 (not required) media-description-min-chars: 0 # Int. Maximum amount of characters permitted in an image or video description. # Examples: [500, 1000, 1500] # Default: 500 media-description-max-chars: 500 # Int. Number of days to cache media from remote instances before they are removed from the cache. # A job will run every day at midnight to clean up any remote media older than the given amount of days. # # When remote media is removed from the cache, it is deleted from storage but the database entries for the media # are kept so that it can be fetched again if requested by a user. # # If this is set to 0, then media from remote instances will be cached indefinitely. # Examples: [30, 60, 7, 0] # Default: 30 media-remote-cache-days: 30 # Int. Max size in bytes of emojis uploaded to this instance via the admin API. # The default is the same as the Mastodon size limit for emojis (50kb), which allows # for good interoperability. Raising this limit may cause issues with federation # of your emojis to other instances, so beware. # Examples: [51200, 102400] # Default: 51200 media-emoji-local-max-size: 51200 # Int. Max size in bytes of emojis to download from other instances. # By default this is 100kb, or twice the size of the default for media-emoji-local-max-size. # This strikes a good balance between decent interoperability with instances that have # higher emoji size limits, and not taking up too much space in storage. # Examples: [51200, 102400] # Default: 51200 media-emoji-remote-max-size: 102400 "},{"id":40,"href":"/docs/configuration/storage/","title":"Storage","section":"Configuration","content":" Storage # Settings # ########################## ##### STORAGE CONFIG ##### ########################## # Config pertaining to storage of user-created uploads (videos, images, etc). # String. Type of storage backend to use. # Examples: [\u0026#34;local\u0026#34;, \u0026#34;s3\u0026#34;] # Default: \u0026#34;local\u0026#34; (storage on local disk) storage-backend: \u0026#34;local\u0026#34; # String. Directory to use as a base path for storing files. # Make sure whatever user/group gotosocial is running as has permission to access # this directory, and create new subdirectories and files within it. # Only required when running with the local storage backend. # Examples: [\u0026#34;/home/gotosocial/storage\u0026#34;, \u0026#34;/opt/gotosocial/datastorage\u0026#34;] # Default: \u0026#34;/gotosocial/storage\u0026#34; storage-local-base-path: \u0026#34;/gotosocial/storage\u0026#34; # String. API endpoint of the S3 compatible service. # Only required when running with the s3 storage backend. # # If your endpoint contains the bucket name, all files will be put into a # subdirectory with the name of `storage-s3-bucket` # # Examples: [\u0026#34;minio:9000\u0026#34;, \u0026#34;s3.nl-ams.scw.cloud\u0026#34;, \u0026#34;s3.us-west-002.backblazeb2.com\u0026#34;] # Default: \u0026#34;\u0026#34; storage-s3-endpoint: \u0026#34;\u0026#34; # Bool. If data stored in S3 should be proxied through GoToSocial instead of redirecting to a presigned URL. # # Default: false storage-s3-proxy: false # Bool. Use SSL for S3 connections. # # Only set this to \u0026#39;false\u0026#39; when testing locally. # # Default: true storage-s3-use-ssl: true # String. Access key part of the S3 credentials. # Consider setting this value using environment variables to avoid leaking it via the config file # Only required when running with the s3 storage backend. # Examples: [\u0026#34;AKIAJSIE27KKMHXI3BJQ\u0026#34;,\u0026#34;miniouser\u0026#34;] # Default: \u0026#34;\u0026#34; storage-s3-access-key: \u0026#34;\u0026#34; # String. Secret key part of the S3 credentials. # Consider setting this value using environment variables to avoid leaking it via the config file # Only required when running with the s3 storage backend. # Examples: [\u0026#34;5bEYu26084qjSFyclM/f2pz4gviSfoOg+mFwBH39\u0026#34;,\u0026#34;miniopassword\u0026#34;] # Default: \u0026#34;\u0026#34; storage-s3-secret-key: \u0026#34;\u0026#34; # String. Name of the storage bucket. # # If you have already encoded your bucket name in the storage-s3-endpoint, this # value will be used as a directory containing your data. # # The bucket must exist prior to starting GoToSocial # # Only required when running with the s3 storage backend. # Examples: [\u0026#34;gts\u0026#34;,\u0026#34;cool-instance\u0026#34;] # Default: \u0026#34;\u0026#34; storage-s3-bucket: \u0026#34;\u0026#34; AWS S3 Bucket Configuration # Bucket Created # GoToSocial by default creates signed URL\u0026rsquo;s which means we dont need to change anything major on the policies of the bucket. Here are the steps to follow for bucket creation\nLogin to AWS -\u0026gt; select S3 as service. click Create Bucket Provide a unique name and avoid adding \u0026ldquo;.\u0026rdquo; in the name Do not change the public access settings (Let them be on \u0026ldquo;block public access\u0026rdquo; mode) AWS ACCESS KEY Configuration # In AWS Console -\u0026gt; IAM (under Security, Identity, \u0026amp; Compliance) Add a user with programatic api\u0026rsquo;s access We recommend setting up below listed policy, replace with your buckets name { \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;s3:ListAllMyBuckets\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:s3:::*\u0026#34; }, { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;s3:*\u0026#34;, \u0026#34;Resource\u0026#34;: [ \u0026#34;arn:aws:s3:::\u0026lt;bucket_name\u0026gt;\u0026#34;, \u0026#34;arn:aws:s3:::\u0026lt;bucket_name\u0026gt;/*\u0026#34; ] } ] } Provide the values in config above storage-s3-endpoint -\u0026gt; should be your bucket location say s3.ap-southeast-1.amazonaws.com storage-s3-access-key -\u0026gt; Access key you obtained for the user created above storage-s3-secret-key -\u0026gt; Secret key you obtained for the user created above storage-s3-bucket -\u0026gt; Keep this as the that you created just now. Migrating data from local storage to AWS s3 bucket # This step is only needed if you have a running instance. Ignore this if you are setting up a fresh instance. We have provided s3cmd command for the copy operation.\ns3cmd sync --add-header=\u0026#34;Cache-Control:public, max-age=315576000, immutable\u0026#34; ./ s3://\u0026lt;bucket name\u0026gt; Migrating between backends # Currently, migration between backends is freely possible. To do so, you only have to move the directories (and their contents) between the different implementations.\nOne way to do so, is by utilizing the MinIO Client. The migration process might look something like this:\n# 1. Change the GoToSocial configuration to the new backend (and restart) # 2. Register the S3 Backend with the MinIO client mc alias set scw https://s3.nl-ams.scw.cloud # 3. Mirror the folder structure to the remote bucket mc mirror /gotosocial/storage/ scw/example-bucket/ # 4. Aaaand we\u0026#39;re done! If you want to migrate back, switch around the arguments of the mc mirror command.\n"},{"id":41,"href":"/docs/federation/","title":"Federation","section":"Docs","content":" Why Federation? # GoToSocial uses the ActivityPub federation protocol.\nFederation means that you can hang out not just with people on your home server, but with people all over the Fediverse. Your home server is part of a network of servers all over the world that all communicate using the same protocol\u0026ndash;they speak the same \u0026rsquo;language\u0026rsquo;. Your data is no longer centralized on one company\u0026rsquo;s servers, but resides on your own server and is shared \u0026ndash; as you see fit \u0026ndash; across a resilient web of servers run by other people.\nNot all of the servers you \u0026lsquo;federate\u0026rsquo; with will be running GoToSocial: popular implementations of ActivityPub include software like Mastodon, WriteFreely, and many others. GoToSocial communicates seamlessly with these other servers.\nThis federated approach also means that you aren\u0026rsquo;t beholden to arbitrary rules from some gigantic corporation potentially thousands of miles away. Your server has its own rules and culture; your fellow server residents are your neighbors; you will likely get to know your server admins and moderators, or be an admin yourself.\nGoToSocial advocates for many small, weird, specialist servers where people can feel at home, rather than a few big and generic ones where one person\u0026rsquo;s voice can get lost in the crowd.\n"},{"id":42,"href":"/docs/configuration/statuses/","title":"Statuses","section":"Configuration","content":" Statuses # Settings # ########################### ##### STATUSES CONFIG ##### ########################### # Config pertaining to the creation of statuses/posts, and permitted limits. # Int. Maximum amount of characters permitted for a new status. # Note that going way higher than the default might break federation. # Examples: [140, 500, 5000] # Default: 5000 statuses-max-chars: 5000 # Int. Maximum amount of characters allowed in the CW/subject header of a status. # Note that going way higher than the default might break federation. # Examples: [100, 200] # Default: 100 statuses-cw-max-chars: 100 # Int. Maximum amount of options to permit when creating a new poll. # Note that going way higher than the default might break federation. # Examples: [4, 6, 10] # Default: 6 statuses-poll-max-options: 6 # Int. Maximum amount of characters to permit per poll option when creating a new poll. # Note that going way higher than the default might break federation. # Examples: [50, 100, 150] # Default: 50 statuses-poll-option-max-chars: 50 # Int. Maximum amount of media files that can be attached to a new status. # Note that going way higher than the default might break federation. # Examples: [4, 6, 10] # Default: 6 statuses-media-max-files: 6 "},{"id":43,"href":"/docs/configuration/tls/","title":"TLS","section":"Configuration","content":" TLS # It\u0026rsquo;s possible to configure TLS support in one of two ways:\nBuilt-in support for Lets Encrypt / ACME compatible vendors Loading TLS files from disk It is not possible to have both methods enabled at the same time.\nNote that when using TLS files loaded from disk you are responsible for restarting the instance when the files change. They are not automatically reloaded.\nSettings # ############################## ##### LETSENCRYPT CONFIG ##### ############################## # Config pertaining to the automatic acquisition and use of LetsEncrypt HTTPS certificates. # Bool. Whether or not letsencrypt should be enabled for the server. # If false, the rest of the settings here will be ignored. # If you serve GoToSocial behind a reverse proxy like nginx or traefik, leave this turned off. # If you don\u0026#39;t, then turn it on so that you can use https. # Options: [true, false] # Default: false letsencrypt-enabled: false # Int. Port to listen for letsencrypt certificate challenges on. # If letsencrypt is enabled, this port must be reachable or you won\u0026#39;t be able to obtain certs. # If letsencrypt is disabled, this port will not be used. # This *must not* be the same as the webserver/API port specified above. # Examples: [80, 8000, 1312] # Default: 80 letsencrypt-port: 80 # String. Directory in which to store LetsEncrypt certificates. # It is a good move to make this a sub-path within your storage directory, as it makes # backup easier, but you might wish to move them elsewhere if they\u0026#39;re also accessed by other services. # In any case, make sure GoToSocial has permissions to write to / read from this directory. # Examples: [\u0026#34;/home/gotosocial/storage/certs\u0026#34;, \u0026#34;/acmecerts\u0026#34;] # Default: \u0026#34;/gotosocial/storage/certs\u0026#34; letsencrypt-cert-dir: \u0026#34;/gotosocial/storage/certs\u0026#34; # String. Email address to use when registering LetsEncrypt certs. # Most likely, this will be the email address of the instance administrator. # LetsEncrypt will send notifications about expiring certificates etc to this address. # Examples: [\u0026#34;admin@example.org\u0026#34;] # Default: \u0026#34;\u0026#34; letsencrypt-email-address: \u0026#34;\u0026#34; ############################## ##### MANUAL TLS CONFIG ##### ############################## # String. Path to a PEM-encoded file on disk that includes the certificate chain # and the public key # Examples: [\u0026#34;/gotosocial/storage/certs/chain.pem\u0026#34;] # Default: \u0026#34;\u0026#34; tls-certificate-chain: \u0026#34;\u0026#34; # String. Path to a PEM-encoded file on disk containing the private key for the # associated tls-certificate-chain # Examples: [\u0026#34;/gotosocial/storage/certs/private.pem\u0026#34;] # Default: \u0026#34;\u0026#34; tls-certificate-key: \u0026#34;\u0026#34; "},{"id":44,"href":"/docs/configuration/oidc/","title":"OpenID Connect (OIDC)","section":"Configuration","content":" OpenID Connect (OIDC) # GoToSocial supports OpenID Connect, which is an identification protocol built on top of OAuth 2.0, an industry standard protocol for authorization.\nThis means that you can connect GoToSocial to an external OIDC provider like Gitlab, Google, Keycloak, or Dex and allow users to sign in to GoToSocial using their credentials for that provider.\nThis is very convenient in the following cases:\nYou\u0026rsquo;re running multiple services on a platform (Matrix, Peertube, GoToSocial), and you want users to be able to use the same sign in page for all of them. You want to delegate management of users, accounts, passwords etc. to an external service to make admin easier for yourself. You already have a lot of users in an external system and you don\u0026rsquo;t want to have to recreate them all in GoToSocial manually. Tip\nIf a user doesn\u0026rsquo;t exist yet, login will fail if your IdP doesn\u0026rsquo;t return a non-empty email as part of the claims. The email needs to be unique on this instance. Though we use the sub claim to associate the external identity with a GtS user, when a user is created it needs an email associated with it.\nSettings # GoToSocial exposes the following configuration settings for OIDC, shown below with their default values.\n####################### ##### OIDC CONFIG ##### ####################### # Config for authentication with an external OIDC provider (Dex, Google, Auth0, etc). # Bool. Enable authentication with external OIDC provider. If set to true, then # the other OIDC options must be set as well. If this is set to false, then the standard # internal oauth flow will be used, where users sign in to GtS with username/password. # Options: [true, false] # Default: false oidc-enabled: false # String. Name of the oidc idp (identity provider). This will be shown to users when # they log in. # Examples: [\u0026#34;Google\u0026#34;, \u0026#34;Dex\u0026#34;, \u0026#34;Auth0\u0026#34;] # Default: \u0026#34;\u0026#34; oidc-idp-name: \u0026#34;\u0026#34; # Bool. Skip the normal verification flow of tokens returned from the OIDC provider, ie., # don\u0026#39;t check the expiry or signature. This should only be used in debugging or testing, # never ever in a production environment as it\u0026#39;s extremely unsafe! # Options: [true, false] # Default: false oidc-skip-verification: false # String. The OIDC issuer URI. This is where GtS will redirect users to for login. # Typically this will look like a standard web URL. # Examples: [\u0026#34;https://auth.example.org\u0026#34;, \u0026#34;https://example.org/auth\u0026#34;] # Default: \u0026#34;\u0026#34; oidc-issuer: \u0026#34;\u0026#34; # String. The ID for this client as registered with the OIDC provider. # Examples: [\u0026#34;some-client-id\u0026#34;, \u0026#34;fda3772a-ad35-41c9-9a59-f1943ad18f54\u0026#34;] # Default: \u0026#34;\u0026#34; oidc-client-id: \u0026#34;\u0026#34; # String. The secret for this client as registered with the OIDC provider. # Examples: [\u0026#34;super-secret-business\u0026#34;, \u0026#34;79379cf5-8057-426d-bb83-af504d98a7b0\u0026#34;] # Default: \u0026#34;\u0026#34; oidc-client-secret: \u0026#34;\u0026#34; # Array of string. Scopes to request from the OIDC provider. The returned values will be used to # populate users created in GtS as a result of the authentication flow. \u0026#39;openid\u0026#39; and \u0026#39;email\u0026#39; are required. # \u0026#39;profile\u0026#39; is used to extract a username for the newly created user. # \u0026#39;groups\u0026#39; is optional and can be used to determine if a user is an admin based on oidc-admin-groups. # Examples: See eg., https://auth0.com/docs/scopes/openid-connect-scopes # Default: [\u0026#34;openid\u0026#34;, \u0026#34;email\u0026#34;, \u0026#34;profile\u0026#34;, \u0026#34;groups\u0026#34;] oidc-scopes: - \u0026#34;openid\u0026#34; - \u0026#34;email\u0026#34; - \u0026#34;profile\u0026#34; - \u0026#34;groups\u0026#34; # Bool. Link OIDC authenticated users to existing ones based on their email address. # This is mostly intended for migration purposes if you were running previous versions of GTS # which only correlated users with their email address. Should be set to false for most usecases. # Options: [true, false] # Default: false oidc-link-existing: false # Array of string. If the returned ID token contains a \u0026#39;groups\u0026#39; claim that # matches one of the groups in oidc-admin-groups, then this user will be granted # admin rights on the GtS instance # Default: [] oidc-admin-groups: [] Behavior # When OIDC is enabled on GoToSocial, the default sign-in page redirects automatically to the sign-in page for the OIDC provider.\nThis means that OIDC essentially replaces the normal GtS email/password sign-in flow.\nDue to the way the ActivityPub standard works, you cannot change your username after it has been set. This conflicts with the OIDC spec which does not guarantee that the preferred_username field is stable.\nTo work with this, we ask the user to provide a username on their first login attempt. The field for this is pre-filled with the value of the preferred_username claim.\nAfter authenticating, GtS stores the sub claim supplied by the OIDC provider. On subsequent authentication attempts, the user is looked up using this claim exclusively.\nThis then allows you to change the username on a provider level without losing access to your GtS account.\nGroup membership # Most OIDC providers allow for the concept of groups and group memberships in returned claims. GoToSocial can use group membership to determine whether or not a user returned from an OIDC flow should be created as an admin account or not.\nIf the returned OIDC groups information for a user contains membership of the groups configured in oidc-admin-groups, then that user will be created/signed in as though they are an admin.\nMigrating from old versions # If you\u0026rsquo;re moving from an old version of GtS which used the unstable email claim for unique user identification, you can set the oidc-link-existing configuration to true. If no user can be found for the ID returned by the provider, a lookup based on the email claim is performed instead. If this succeeds, the stable id is added to the database for the matching user.\nYou should only use this for a limited time to avoid malicious account takeover.\nProvider Examples # Dex # Dex is an open-source OIDC Provider that you can host yourself. The procedure for installing Dex is out of scope for this documentation, but you can check out the Dex docs here.\nDex is great because it\u0026rsquo;s also written in Go, like GoToSocial, which means it\u0026rsquo;s small and fast and works well on lower-powered systems.\nTo configure Dex and GoToSocial to work together, create the following client under the staticClients section of your Dex config:\nstaticClients: - id: \u0026#39;gotosocial_client\u0026#39; redirectURIs: - \u0026#39;https://gotosocial.example.org/auth/callback\u0026#39; name: \u0026#39;GoToSocial\u0026#39; secret: \u0026#39;some-client-secret\u0026#39; Make sure to replace gotosocial_client with your desired client ID, and secret with a reasonably long and secure secret (a UUID for example). You should also replace gotosocial.example.org with the host of your GtS instance, but leave /auth/callback in place.\nNow, edit the oidc section of your GoToSocial config.yaml as follows:\noidc: enabled: true idpName: \u0026#34;Dex\u0026#34; skipVerification: false issuer: \u0026#34;https://auth.example.org\u0026#34; clientID: \u0026#34;gotosocial_client\u0026#34; clientSecret: \u0026#34;some-client-secret\u0026#34; scopes: - \u0026#34;openid\u0026#34; - \u0026#34;email\u0026#34; - \u0026#34;profile\u0026#34; - \u0026#34;groups\u0026#34; Make sure to replace the issuer variable with whatever your Dex issuer is set to. This should be the exact URI at which your Dex instance can be reached.\nNow, restart both GoToSocial and Dex so that the new settings are in place.\nWhen you next go to log in to GtS, you should be redirected to the sign in page for Dex. On a successful sign in, you\u0026rsquo;ll be directed back to GoToSocial.\n"},{"id":45,"href":"/docs/configuration/smtp/","title":"Email Config (smtp)","section":"Configuration","content":" Email Config (smtp) # GoToSocial supports sending emails to users via the Simple Mail Transfer Protocol or smtp.\nConfiguring GoToSocial to send emails is not required in order to have a properly running instance. Still, it\u0026rsquo;s very useful for doing things like sending confirmation emails and notifications, and handling password reset requests.\nIn order to make GoToSocial email sending work, you need an smtp-compatible mail service running somewhere, either as a server on the same machine that GoToSocial is running on, or via an external service like Mailgun. It may also be possible to use a free personal email address for sending emails, if your email provider supports smtp (check with them\u0026ndash;most do), but you might run into trouble sending lots of emails.\nSettings # The configuration options for smtp are as follows:\n####################### ##### SMTP CONFIG ##### ####################### # Config for sending emails via an smtp server. See https://en.wikipedia.org/wiki/Simple_Mail_Transfer_Protocol # String. The hostname of the smtp server you want to use. # If this is not set, smtp will not be used to send emails, and you can ignore the other settings. # Examples: [\u0026#34;mail.example.org\u0026#34;, \u0026#34;localhost\u0026#34;] # Default: \u0026#34;\u0026#34; smtp-host: \u0026#34;\u0026#34; # Int. Port to use to connect to the smtp server. # Examples: [] # Default: 0 smtp-port: 0 # String. Username to use when authenticating with the smtp server. # This should have been provided to you by your smtp host. # This is often, but not always, an email address. # Examples: [\u0026#34;maillord@example.org\u0026#34;] # Default: \u0026#34;\u0026#34; smtp-username: \u0026#34;\u0026#34; # String. Password to use when authenticating with the smtp server. # This should have been provided to you by your smtp host. # Examples: [\u0026#34;1234\u0026#34;, \u0026#34;password\u0026#34;] # Default: \u0026#34;\u0026#34; smtp-password: \u0026#34;\u0026#34; # String. \u0026#39;From\u0026#39; address for sent emails. # Examples: [\u0026#34;mail@example.org\u0026#34;] # Default: \u0026#34;\u0026#34; smtp-from: \u0026#34;\u0026#34; # Bool. If true, when an email is sent that has multiple recipients, each recipient # will be included in the To field, so that each recipient can see who else got the # email, and they can \u0026#39;reply all\u0026#39; to the other recipients if they want to. # # If false, email will be sent to Undisclosed Recipients, and each recipient will not # be able to see who else received the email. # # It might be useful to change this setting to \u0026#39;true\u0026#39; if you want to be able to discuss # new moderation reports with other admins by \u0026#39;replying-all\u0026#39; to the notification email. # Default: false smtp-disclose-recipients: false Note that if you don\u0026rsquo;t set Host, then email sending via smtp will be disabled, and the other settings will be ignored. GoToSocial will still log (at trace level) emails that would have been sent if smtp was enabled.\nBehavior # SSL # GoToSocial requires your smtp server to present valid SSL certificates. Most of the big services like Mailgun do this anyway, but if you\u0026rsquo;re running your own mail server without SSL for some reason, and you\u0026rsquo;re trying to connect GoToSocial to it, it will not work.\nThe exception to this requirement is if you\u0026rsquo;re running your mail server (or bridge to a mail server) on localhost, in which case SSL certs are not required.\nWhen are emails sent? # Currently, emails are sent:\nTo the provided email address of a new user to request email confirmation when a new account is created via the API. To all active instance moderators + admins when a new moderation report is received. By default, recipients are Bcc\u0026rsquo;d, but you can change this behavior with the setting smtp-disclose-recipients. To the creator of a report (on this instance) when the report is closed by a moderator. Can I test if my SMTP configuration is correct? # Yes, you can use the API to send a test email to yourself. Check the API documentation for the /api/v1/admin/email/test endpoint.\nHTML versus Plaintext # Emails are sent in plaintext by default. At this point, there is no option to send emails in html, but this is something that might be added later if there\u0026rsquo;s enough demand for it.\nCustomization # If you like, you can customize the templates that are used for generating emails. Follow the examples in web/templates.\n"},{"id":46,"href":"/docs/configuration/syslog/","title":"Syslog","section":"Configuration","content":" Syslog # GoToSocial can be configured to mirror logs to syslog, either via udp/tcp, or a local syslog (eg., /var/log/syslog).\nThis is useful if you want to daemonize GtS and not handle log rotations etc yourself but rely on a proven implementation.\nLogs in syslog will look something like this:\nDec 12 17:44:03 dilettante ./gotosocial[246860]: time=2021-12-12T17:44:03+01:00 level=info msg=connected to SQLITE database Dec 12 17:44:03 dilettante ./gotosocial[246860]: time=2021-12-12T17:44:03+01:00 level=info msg=there are no new migrations to run func=doMigration Settings # ######################### ##### SYSLOG CONFIG ##### ######################### # Config for additional syslog log hooks. See https://en.wikipedia.org/wiki/Syslog, # and https://github.com/sirupsen/logrus/tree/master/hooks/syslog. # # These settings are useful when one wants to daemonize GoToSocial and send logs # to a specific place, either a local location or a syslog server. Most users will # not need to touch these settings. # Bool. Enable the syslog logging hook. Logs will be mirrored to the configured destination. # Options: [true, false] # Default: false syslog-enabled: false # String. Protocol to use when directing logs to syslog. Leave empty to connect to local syslog. # Options: [\u0026#34;udp\u0026#34;, \u0026#34;tcp\u0026#34;, \u0026#34;\u0026#34;] # Default: \u0026#34;tcp\u0026#34; syslog-protocol: \u0026#34;udp\u0026#34; # String. Address:port to send syslog logs to. Leave empty to connect to local syslog. # Default: \u0026#34;localhost:514\u0026#34; syslog-address: \u0026#34;localhost:514\u0026#34; "},{"id":47,"href":"/docs/configuration/advanced/","title":"Advanced","section":"Configuration","content":" Advanced # Advanced settings options are provided for the sake of allowing admins to tune their instance to their liking.\nThese are set to sensible defaults, so most server admins won\u0026rsquo;t need to touch them or think about them.\nChanging these settings if you don\u0026rsquo;t know what you\u0026rsquo;re doing may break your instance.\nSettings # ############################# ##### ADVANCED SETTINGS ##### ############################# # Advanced settings pertaining to http timeouts, security, cookies, and more. # # ONLY ADJUST THESE SETTINGS IF YOU KNOW WHAT YOU ARE DOING! # # Most users will not need to (and should not) touch these settings, since # they are set to sensible defaults, and may break if they are changed. # # Nevertheless, they are provided for the sake of allowing server admins to # tweak their instance for performance or security reasons. # String. Value of the SameSite attribute of cookies set by GoToSocial. # Defaults to \u0026#39;lax\u0026#39; to ensure that the OIDC flow does not break, which is # fine in most cases. If you want to harden your instance against CSRF attacks # and don\u0026#39;t mind if some login-related things might break, you can set this # to \u0026#39;strict\u0026#39; instead. # # For an overview of what this does, see: # https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite # # Options: [\u0026#34;lax\u0026#34;, \u0026#34;strict\u0026#34;] # Default: \u0026#34;lax\u0026#34; advanced-cookies-samesite: \u0026#34;lax\u0026#34; # Int. Amount of requests to permit per router grouping from a single IP address within # a span of 5 minutes. If this amount is exceeded, a 429 HTTP error code will be returned. # # If you find yourself adjusting this limit because it\u0026#39;s regularly being exceeded, # you should first verify that your settings for `trusted-proxies` (above) are correct. # In many cases, when the rate limit is exceeded it is because your instance sees all # incoming requests as coming from the *same IP address* (you can verify this by looking # at the client IPs in your instance logs). If this is the case, try adding that IP # address to your `trusted-proxies` *BEFORE* you go adjusting this rate limit setting! # # If you set this to 0 or less, rate limiting will be disabled entirely. # # Examples: [1000, 500, 0] # Default: 300 advanced-rate-limit-requests: 300 # Int. Amount of open requests to permit per CPU, per router grouping, before applying http # request throttling. Any requests beyond the calculated limit are held in a backlog queue for # up to 30 seconds before either being processed or timing out. Requests that don\u0026#39;t fit in the backlog # queue will have status 503 returned to them, and the header \u0026#39;Retry-After\u0026#39; will be set to 30 seconds. # # Open request limit is available CPUs * multiplier; backlog queue limit is limit * multiplier. # # Example values for multiplier 8: # # 1 cpu = 08 open, 064 backlog # 2 cpu = 16 open, 128 backlog # 4 cpu = 32 open, 256 backlog # # Example values for multiplier 4: # # 1 cpu = 04 open, 016 backlog # 2 cpu = 08 open, 032 backlog # 4 cpu = 16 open, 064 backlog # # A multiplier of 8 is a sensible default, but you may wish to increase this for instances # running on very performant hardware, or decrease it for instances using v. slow CPUs. # # If you set this to 0 or less, http request throttling will be disabled entirely. # # Examples: [8, 4, 9, 0] # Default: 8 advanced-throttling-multiplier: 8 # Int. CPU multiplier for the amount of goroutines to spawn in order to send messages via ActivityPub. # Messages will be batched so that at most multiplier * CPU count messages will be sent out at once. # This can be tuned to limit concurrent POSTing to remote inboxes, preventing your instance CPU # usage from skyrocketing when an account with many followers posts a new status. # # Messages are split among available senders, and each sender processes its assigned messages in serial. # For example, say a user with 1000 followers is on an instance with 2 CPUs. With the default multiplier # of 2, this means 4 senders would be in process at once on this instance. When the user creates a new post, # each sender would end up iterating through about 250 Create messages + delivering them to remote instances. # # If you set this to 0 or less, only 1 sender will be used regardless of CPU count. This may be # useful in cases where you are working with very tight network or CPU constraints. # # Example values for multiplier 2 (default): # # 1 cpu = 2 concurrent senders # 2 cpu = 4 concurrent senders # 4 cpu = 8 concurrent senders # # Example values for multiplier 4: # # 1 cpu = 4 concurrent senders # 2 cpu = 8 concurrent senders # 4 cpu = 16 concurrent senders # # Example values for multiplier \u0026lt;1: # # 1 cpu = 1 concurrent sender # 2 cpu = 1 concurrent sender # 4 cpu = 1 concurrent sender advanced-sender-multiplier: 2 "},{"id":48,"href":"/docs/configuration/observability/","title":"Observability","section":"Configuration","content":" Observability # These settings let you tune and configure certain observability related behaviours.\nSettings # ################################## ##### OBSERVABILITY SETTINGS ##### ################################## # Bool. Enable generation/parsing of a request ID for each received HTTP Request. # Default: true request-id-enabled: true # String. Header name to use to extract a request or trace ID from. Typically set by a # loadbalancer or proxy. # Default: \u0026#34;X-Request-Id\u0026#34; request-id-header: \u0026#34;X-Request-Id\u0026#34; # Bool. Enable OpenTelemetry based tracing support. # Default: false tracing-enabled: false # String. Set the transport protocol for the tracing system. Can either be \u0026#34;grpc\u0026#34; for # OTLP gRPC or \u0026#34;jaeger\u0026#34; for jaeger based ingesters. # Options: [\u0026#34;grpc\u0026#34;, \u0026#34;jaeger\u0026#34;] # Default: \u0026#34;grpc\u0026#34; tracing-transport: \u0026#34;grpc\u0026#34; # String. Endpoint of the trace ingester. When using the gRPC based transport, the # endpoint is usually a single address/port combination. For the jaeger transport it # should be a fully qualified URL. # OTLP gRPC or \u0026#34;jaeger\u0026#34; for jaeger based ingesters # Examples: [\u0026#34;localhost:4317\u0026#34;, \u0026#34;http://localhost:14268/api/traces\u0026#34;] # Default: \u0026#34;\u0026#34; tracing-endpoint: \u0026#34;\u0026#34; # Bool. Disable HTTPS for the gRPC transport protocol. # Default: false tracing-insecure-transport: false "},{"id":49,"href":"/docs/advanced/caching/api/","title":"API","section":"Caching","content":" Caching API responses # It is possible to cache certain API responses to offload the GoToSocial process from having to handle all requests. We don\u0026rsquo;t recommend caching responses to requests under /api.\nWhen using a split domain deployment style, you need to ensure you configure caching on the host domain. The account domain should only be issuing redirects to the host domain which clients will automatically remember.\n!!! warning \u0026ldquo;There are only two hard things in computer science\u0026rdquo; Configuring caching incorrectly can result into all kinds of problems. Follow this guide carefully and thoroughly test your modifications. Don\u0026rsquo;t cache endpoints that require authentication without taking the Authorization header into account.\nEndpoints # Webfinger and hostmeta # Requests to /.well-known/webfinger and /.well-known/host-meta can be safely cached. Do be careful to ensure any caching strategy takes query parameters into account when caching webfinger requests as requests to that endpoint are of the form ?resource=acct:@username@domain.tld.\nPublic keys # Many implementations will regularly request the public key for a user in order to validate the signature on a message they received. This will happen whenever a message gets federated amongst other things. These keys are long lived, essentially eternal, and can thus be cached with a long lifetime.\nConfiguration snippets # nginx # For nginx, you\u0026rsquo;ll need to start by configuring a cache zone. The cache zone must be created in the http section, not within server or location.\nhttp { ... proxy_cache_path /var/cache/nginx keys_zone=gotosocial_ap_public_responses:10m inactive=1w; } This configures a cache of 10MB whose entries will be kept up to one week if they\u0026rsquo;re not accessed.\nThe zone is named gotosocial_ap_public_responses but you can name it whatever you want. 10MB is a lot of cache keys; you can probably use a smaller value on small instances.\nSecond, we need to update our GoToSocial nginx configuration to actually use the cache for the endpoints we want to cache.\nserver { server_name social.example.org; location ~ /.well-known/(webfinger|host-meta)$ { proxy_set_header Host $host; proxy_set_header X-Forwarded-For $remote_addr; proxy_set_header X-Forwarded-Proto $scheme; proxy_cache gotosocial_ap_public_responses; proxy_cache_background_update on; proxy_cache_key $scheme://$host$uri$is_args$query_string; proxy_cache_valid 200 10m; proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504 http_429; proxy_cache_lock on; add_header X-Cache-Status $upstream_cache_status; proxy_pass http://localhost:8080; } location ~ ^\\/users\\/(?:[a-z0-9_\\.]+)\\/main-key$ { proxy_set_header Host $host; proxy_set_header X-Forwarded-For $remote_addr; proxy_set_header X-Forwarded-Proto $scheme; proxy_cache gotosocial_ap_public_responses; proxy_cache_background_update on; proxy_cache_key $scheme://$host$uri; proxy_cache_valid 200 604800s; proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504 http_429; proxy_cache_lock on; add_header X-Cache-Status $upstream_cache_status; proxy_pass http://localhost:8080; } The proxy_pass and proxy_set_header are mostly the same, but the proxy_cache* entries warrant some explanation:\nproxy_cache gotosocial_ap_public_responses tells nginx to use the gotosocial_ap_public_responses cache zone we previously created. If you named it something else, you should change this value proxy_cache_background_update on means nginx will try and refresh a cached resource that\u0026rsquo;s about to expire in the background, to ensure it has a current copy on disk proxy_cache_key is configured in such a way that it takes the query string into account for caching. So a request for .well-known/webfinger?acct=user1@example.org and .well-known/webfinger?acct=user2@example.org are not seen as the same. proxy_cache_valid 200 10m; means we only cache 200 responses from GTS and for 10 minutes. You can add additional lines of these, like proxy_cache_valid 404 1m; to cache 404 responses for 1 minute proxy_cache_use_stale tells nginx it\u0026rsquo;s allowed to use a stale cache entry (so older than 10 minutes) in certain cases proxy_cache_lock on means that if a resource is not cached and there\u0026rsquo;s multiple concurrent requests for them, the queries will be queued up so that only one request goes through and the rest is then answered from cache add_header X-Cache-Status $upstream_cache_status will add an X-Cache-Status header to the response so you can check if things are getting cached. You can remove this. The provided configuration will serve a stale response in case there\u0026rsquo;s an error proxying to GoToSocial, if our connection to GoToSocial times out, if GoToSocial returns a 5xx status code or if GoToSocial returns 429 (Too Many Requests). The updating value says that we\u0026rsquo;re allowed to serve a stale entry if nginx is currently in the process of refreshing its cache. Because we configured inactive=1w in the proxy_cache_path directive, nginx may serve a response up to one week old if the conditions in proxy_cache_use_stale are met.\n"},{"id":50,"href":"/docs/advanced/caching/assets-media/","title":"Assets Media","section":"Caching","content":" Caching assets and media # When you\u0026rsquo;ve configured your GoToSocial instance with local storage for media, you can use your reverse proxy to serve these files directly and cache them. This avoids hitting GoToSocial for these requests and reverse proxies can typically serve assets faster than GoToSocial.\nYou can also use your reverse proxy to cache the GoToSocial web UI assets, like the CSS and images it uses.\nWhen using a split domain deployment style, you need to ensure you configure caching of the assets and media on the host domain.\n!!! warning \u0026ldquo;Media pruning\u0026rdquo; If you\u0026rsquo;ve configured media pruning, you need to ensure that when media is not found on disk the request is still sent on to GoToSocial. This will ensure the media is fetched again from the remote instance and subsequent requests for this media will then be handled by your reverse proxy again.\nEndpoints # There are 2 endpoints that serve assets we can serve and cache:\n/assets which contains fonts, CSS, images etc. for the web UI /fileserver which serves attachments for status posts when using the local storage backend The filesystem location of /assets is defined by the web-asset-base-dir configuration option. Files under /fileserver are retrieved from the storage-local-base-path.\nConfiguration # nginx # Here\u0026rsquo;s an example of the three location blocks you\u0026rsquo;ll need to add to your existing configuration in nginx:\nserver { server_name social.example.org; location /assets/ { alias web-asset-base-dir/; autoindex off; expires 5m; add_header Cache-Control \u0026#34;public\u0026#34;; } location @fileserver { proxy_pass http://localhost:8080; proxy_set_header Host $host; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \u0026#34;upgrade\u0026#34;; proxy_set_header X-Forwarded-For $remote_addr; proxy_set_header X-Forwarded-Proto $scheme; } location /fileserver/ { alias storage-local-base-path/; autoindex off; expires max; add_header Cache-Control \u0026#34;private, immutable\u0026#34;; try_files $uri @fileserver; } } The /fileserver location is a bit special. When we fail to fetch the media from disk, we want to proxy the request on to GoToSocial so it can try and fetch it. The try_files directive can\u0026rsquo;t take a proxy_pass itself so instead we created the named @fileserver location that we pass in last to try_files.\n!!! bug \u0026ldquo;Trailing slashes\u0026rdquo; The trailing slashes in the location directives and the alias are significant, do not remove those.\nThe expires directive adds the necessary headers to inform the client how long it may cache the resource:\nFor assets, which may change on each release, 5 minutes is used in this example For attachments, which should never change once they\u0026rsquo;re created, max is used instead setting the cache expiry to the 31st of December 2037. For other options, see the nginx documentation on the expires directive.\nNginx does not add cache headers to 4xx or 5xx response codes so a failure to fetch an asset won\u0026rsquo;t get cached by clients. The autoindex off directive tells nginx to not serve a directory listing. This should be the default but it doesn\u0026rsquo;t hurt to be explicit. The added add_header lines set additional options for the Cache-Control header:\npublic is used to indicate that anyone may cache this resource immutable is used to indicate this resource will never change while it is fresh (it\u0026rsquo;s before the end of the expires) allowing clients to forgo conditional requests to revalidate the resource during that timespan. "},{"id":51,"href":"/docs/getting_started/user_creation/","title":"User Creation","section":"Getting Started","content":" Creating users # Regardless of the installation method, you\u0026rsquo;ll need to create some users. GoToSocial currently doesn\u0026rsquo;t have a way for users to be created through the web UI, or for people to sign-up through the web UI.\nUsing the CLI, you can create a user:\n$ gotosocial --config-path /path/to/config.yaml \\ admin account create \\ --username some_username \\ --email some_email@whatever.org \\ --password \u0026#39;SOME_PASSWORD\u0026#39; In the above command, replace some_username with your desired username, some_email@whatever.org with the email address you want to associate with your account, and SOME_PASSWORD with a secure password.\nIf you want your user to have admin rights, you can promote them using a similar command:\n$ gotosocial --config-path /path/to/config.yaml \\ admin account promote --username some_username Replace some_username with the username of the account you just created.\n!!! info When running these commands, you\u0026rsquo;ll get a bit of output like the following:\n```text time=XXXX level=info msg=connected to SQLITE database time=XXXX level=info msg=there are no new migrations to run func=doMigration time=XXXX level=info msg=closing db connection ``` This is normal and indicates that the commands ran as expected. Containers # When running GoToSocial from a container, you\u0026rsquo;ll need to execute the above command in the conatiner instead. How to do this varies based on your container runtime, but for Docker it should look like:\n$ docker exec -it CONTAINER_NAME_OR_ID \\ /gotosocial/gotosocial \\ admin account create \\ --username some_username \\ --email someone@example.org \\ --password \u0026#39;some_very_good_password\u0026#39; If you followed our Docker guide, the container name will be gotosocial. Both the name and the ID can be retrieved through docker ps.\n"}]